
cpu_1.elf:     file format elf32-littlenios2
cpu_1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000240

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010258 memsz 0x00010258 flags r-x
    LOAD off    0x00011278 vaddr 0x00010278 paddr 0x00011d7c align 2**12
         filesz 0x00001b04 memsz 0x00001b04 flags rw-
    LOAD off    0x00013880 vaddr 0x00013880 paddr 0x00013880 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f8f0  00000240  00000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000748  0000fb30  0000fb30  00010b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b04  00010278  00011d7c  00011278  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  00013880  00013880  00013880  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  000139e0  000139e0  00012d7c  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04020000  04020000  00012d7c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00012d7c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fa0  00000000  00000000  00012da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000253d6  00000000  00000000  00013d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000987e  00000000  00000000  00039116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ba56  00000000  00000000  00042994  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002444  00000000  00000000  0004e3ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003a40  00000000  00000000  00050830  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000171e9  00000000  00000000  00054270  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0006b45c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001850  00000000  00000000  0006b490  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000702da  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  000702dd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000702e2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000702e3  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000702e4  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000702e8  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000702ec  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000702f0  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000702f9  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00070302  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0007030b  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  00070314  2**0
                  CONTENTS, READONLY
 30 .jdi          0000e05e  00000000  00000000  00070345  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000c7fcb  00000000  00000000  0007e3a3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000240 l    d  .text	00000000 .text
0000fb30 l    d  .rodata	00000000 .rodata
00010278 l    d  .rwdata	00000000 .rwdata
00013880 l    d  .bss	00000000 .bss
000139e0 l    d  .sdram_controller	00000000 .sdram_controller
04020000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../cpu_1_bsp//obj/HAL/src/crt0.o
00000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cpu_1.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000feba l     O .rodata	00000010 zeroes.4255
000028f0 l     F .text	000000bc __sbprintf
0000feca l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00002b00 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
000046bc l     F .text	00000008 __fp_lock
000046c4 l     F .text	00000008 __fp_unlock
000046d8 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010278 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000106bc l     O .rwdata	00000020 lc_ctype_charset
0001069c l     O .rwdata	00000020 lc_message_charset
000106dc l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0000fefc l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007a58 l     F .text	000000fc __sprint_r.part.0
00010030 l     O .rodata	00000010 blanks.4199
00010020 l     O .rodata	00000010 zeroes.4200
00008e60 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0000a364 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000ca90 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000cbb0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000cbdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000ccdc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000cdd0 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000ceb4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000d090 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011d64 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000d2ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000d434 l     F .text	00000038 alt_dev_reg
0000d46c l     F .text	00000050 alt_get_errno
0000d4bc l     F .text	0000006c alt_avalon_mutex_reg
00010cc4 l     O .rwdata	00001060 jtag_uart
00011d24 l     O .rwdata	00000010 mutex
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000d800 l     F .text	00000204 altera_avalon_jtag_uart_irq
0000da04 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0000e024 l     F .text	00000050 alt_get_errno
0000e074 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000e2fc l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000e7fc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000ed38 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000ee70 l     F .text	00000050 alt_get_errno
0000eec0 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
000138b4 g     O .bss	00000004 alt_instruction_exception_handler
00000810 g     F .text	00000018 putchar
00006f64 g     F .text	00000074 _mprec_log10
00007050 g     F .text	0000008c __any_on
00009520 g     F .text	00000054 _isatty_r
0000ff08 g     O .rodata	00000028 __mprec_tinytens
0000cfd8 g     F .text	00000078 alt_main
00000828 g     F .text	000000a8 _puts_r
000138e0 g     O .bss	00000100 alt_irq
00009574 g     F .text	0000005c _lseek_r
00011d7c g       *ABS*	00000000 __flash_rwdata_start
0000b5f8 g     F .text	00000084 .hidden __eqdf2
000139e0 g       *ABS*	00000000 __alt_heap_start
000007cc g     F .text	0000003c printf
0000962c g     F .text	0000009c _wcrtomb_r
00007950 g     F .text	0000005c __sseek
00004a0c g     F .text	00000010 __sinit
0000f408 g     F .text	00000024 alt_get_cpu_freq
00008f1c g     F .text	00000138 __swbuf_r
000054b8 g     F .text	0000007c _setlocale_r
00004874 g     F .text	00000068 __sfmoreglue
0000d070 g     F .text	00000020 __malloc_unlock
00005fe0 g     F .text	0000015c memmove
0000e3f8 g     F .text	00000280 perf_print_formatted_report
000049f4 g     F .text	00000018 _cleanup
0000e1a8 g     F .text	00000040 altera_avalon_mutex_trylock
0000613c g     F .text	000000a8 _Balloc
0000b67c g     F .text	000000e0 .hidden __gtdf2
0000f280 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
0000e238 g     F .text	00000074 altera_avalon_mutex_is_mine
00000020 g       *ABS*	00000000 __flash_exceptions_start
000094c8 g     F .text	00000058 _fstat_r
00013898 g     O .bss	00000004 errno
000078cc g     F .text	00000008 __seofread
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller
000138a0 g     O .bss	00000004 alt_argv
00019d34 g       *ABS*	00000000 _gp
00010b44 g     O .rwdata	00000180 alt_fd_list
00000808 g     F .text	00000008 _putchar_r
0000e9a8 g     F .text	00000090 alt_find_dev
00000544 g     F .text	00000138 memcpy
000046cc g     F .text	0000000c _cleanup_r
0000c8b8 g     F .text	000000d0 .hidden __floatsidf
0000edf8 g     F .text	00000078 alt_io_redirect
0000b75c g     F .text	000000e0 .hidden __ltdf2
0000fb30 g       *ABS*	00000000 __DTOR_END__
000008d0 g     F .text	00000014 puts
0000f680 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000077b0 g     F .text	00000074 __fpclassifyd
00006ec0 g     F .text	000000a4 __ratio
00008e3c g     F .text	00000024 __vfiprintf_internal
0000dc00 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000007a0 g     F .text	0000002c _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000a480 g     F .text	00000008 .hidden __udivsi3
0000cd2c g     F .text	000000a4 isatty
0000ff58 g     O .rodata	000000c8 __mprec_tens
00005534 g     F .text	0000000c __locale_charset
0000f5f4 g     F .text	0000008c alt_icache_flush
00013894 g     O .bss	00000004 __malloc_top_pad
0000f3a8 g     F .text	00000040 perf_get_num_starts
00011d3c g     O .rwdata	00000004 __mb_cur_max
00005564 g     F .text	0000000c _localeconv_r
00006548 g     F .text	0000003c __i2b
00004e70 g     F .text	000004c0 __sfvwrite_r
00007824 g     F .text	00000054 _sbrk_r
000095d0 g     F .text	0000005c _read_r
00011d5c g     O .rwdata	00000004 alt_max_fd
000091e4 g     F .text	000000f0 _fclose_r
0000468c g     F .text	00000030 fflush
00013890 g     O .bss	00000004 __malloc_max_sbrked_mem
0000a490 g     F .text	0000089c .hidden __adddf3
00006c68 g     F .text	0000011c __b2d
00009dd4 g     F .text	00000590 .hidden __umoddi3
0000cf04 g     F .text	000000d4 lseek
0000e2ac g     F .text	00000050 altera_avalon_mutex_first_lock
00011d34 g     O .rwdata	00000004 _global_impure_ptr
00007248 g     F .text	00000568 _realloc_r
000139e0 g       *ABS*	00000000 __bss_end
0000ec48 g     F .text	000000f0 alt_iic_isr_register
0000f17c g     F .text	00000104 alt_tick
00009814 g     F .text	000005c0 .hidden __udivdi3
000092e8 g     F .text	00000184 _fputwc_r
0000ff30 g     O .rodata	00000028 __mprec_bigtens
0000632c g     F .text	00000104 __s2b
0000c988 g     F .text	000000a4 .hidden __floatunsidf
00006a10 g     F .text	00000060 __mcmp
00004a2c g     F .text	00000018 __fp_lock_all
0000ebfc g     F .text	0000004c alt_ic_irq_enabled
0000f0e4 g     F .text	00000098 alt_alarm_stop
000138a8 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d0 alt_irq_handler
00010b1c g     O .rwdata	00000028 alt_dev_null
0000e0f0 g     F .text	00000054 altera_avalon_mutex_open
0000e7b8 g     F .text	00000044 alt_dcache_flush_all
00006430 g     F .text	00000068 __hi0bits
0000c830 g     F .text	00000088 .hidden __fixdfsi
00011d7c g       *ABS*	00000000 __ram_rwdata_end
00011d54 g     O .rwdata	00000008 alt_dev_list
0000d33c g     F .text	000000f8 write
000070dc g     F .text	000000a0 _putc_r
00011d68 g     O .rwdata	00000008 alt_mutex_list
00010278 g       *ABS*	00000000 __ram_rodata_end
0000cc2c g     F .text	000000b0 fstat
0000b75c g     F .text	000000e0 .hidden __ledf2
00006780 g     F .text	00000140 __pow5mult
00007b6c g     F .text	000012d0 ___vfiprintf_internal_r
00013888 g     O .bss	00000004 __nlocale_changed
0000a488 g     F .text	00000008 .hidden __umodsi3
000139e0 g       *ABS*	00000000 end
0000d73c g     F .text	000000c4 altera_avalon_jtag_uart_init
000001cc g     F .exceptions	00000074 alt_instruction_exception_entry
0000fb30 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0000e370 g     F .text	00000088 alt_avalon_timer_sc_init
0000ca2c g     F .text	00000064 .hidden __clzsi2
0000de0c g     F .text	00000218 altera_avalon_jtag_uart_write
00004a1c g     F .text	00000004 __sfp_lock_acquire
00005ef8 g     F .text	000000e8 memchr
0000097c g     F .text	00001f50 ___vfprintf_internal_r
00004b80 g     F .text	000002f0 _free_r
00005540 g     F .text	00000010 __locale_mb_cur_max
0000f8f8 g     F .text	00000194 __call_exitprocs
00013884 g     O .bss	00000004 __mlocale_changed
00011d40 g     O .rwdata	00000004 __malloc_sbrk_base
00000240 g     F .text	0000004c _start
000138ac g     O .bss	00000004 _alt_tick_rate
0000fa8c g     F .text	00000070 .hidden __floatundidf
000068c0 g     F .text	00000150 __lshift
000138b0 g     O .bss	00000004 _alt_nticks
0000d0e0 g     F .text	000000fc read
0000d55c g     F .text	0000007c alt_sys_init
0000f7e4 g     F .text	00000114 __register_exitproc
0000e1e8 g     F .text	00000050 altera_avalon_mutex_unlock
00006584 g     F .text	000001fc __multiply
0000daac g     F .text	00000068 altera_avalon_jtag_uart_close
00010278 g       *ABS*	00000000 __ram_rwdata_start
0000fb30 g       *ABS*	00000000 __ram_rodata_start
000138b8 g     O .bss	00000028 __malloc_current_mallinfo
00006d84 g     F .text	0000013c __d2b
0000d5d8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f540 g     F .text	000000b4 alt_get_fd
000090cc g     F .text	00000054 _close_r
0000f2a0 g     F .text	000000bc perf_get_section_time
0000f768 g     F .text	0000007c memcmp
0000d698 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000139e0 g       *ABS*	00000000 __alt_stack_base
0000d6e8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000029ac g     F .text	00000154 __swsetup_r
0000ad2c g     F .text	000008cc .hidden __divdf3
000048dc g     F .text	00000118 __sfp
00006fd8 g     F .text	00000078 __copybits
0000f35c g     F .text	0000004c perf_get_total_time
00010714 g     O .rwdata	00000408 __malloc_av_
00004a28 g     F .text	00000004 __sinit_lock_release
0000b83c g     F .text	00000724 .hidden __muldf3
00007878 g     F .text	00000054 __sread
0000f42c g     F .text	00000114 alt_find_file
0000e84c g     F .text	000000a4 alt_dev_llist_insert
0000d050 g     F .text	00000020 __malloc_lock
0000d23c g     F .text	000000b0 sbrk
00004630 g     F .text	0000005c _fflush_r
00009120 g     F .text	000000c4 _calloc_r
00013880 g       *ABS*	00000000 __bss_start
0000067c g     F .text	00000124 memset
0000028c g     F .text	000002b8 main
000138a4 g     O .bss	00000004 alt_envp
0001388c g     O .bss	00000004 __malloc_max_total_mem
0000d638 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00009054 g     F .text	0000001c __swbuf
000079ac g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
000092d4 g     F .text	00000014 fclose
0000e168 g     F .text	00000040 altera_avalon_mutex_lock
00002d00 g     F .text	00001728 _dtoa_r
00005750 g     F .text	000007a8 _malloc_r
00009788 g     F .text	00000030 __ascii_wctomb
00011d60 g     O .rwdata	00000004 alt_errno
00005330 g     F .text	000000c4 _fwalk
0000717c g     F .text	000000cc putc
0000a3d0 g     F .text	00000054 .hidden __divsi3
00004a5c g     F .text	00000124 _malloc_trim_r
0000fb30 g       *ABS*	00000000 __CTOR_END__
000079b4 g     F .text	000000a4 strcmp
0000fb30 g       *ABS*	00000000 __flash_rodata_start
0000fb30 g       *ABS*	00000000 __DTOR_LIST__
0000b5f8 g     F .text	00000084 .hidden __nedf2
0000d528 g     F .text	00000034 alt_irq_init
0000d1dc g     F .text	00000060 alt_release_fd
00010040 g     O .rodata	00000100 .hidden __clz_tab
00013880 g     O .bss	00000004 _PathLocale
0000f71c g     F .text	00000014 atexit
00009070 g     F .text	0000005c _write_r
00005570 g     F .text	0000001c setlocale
00011d38 g     O .rwdata	00000004 _impure_ptr
0001389c g     O .bss	00000004 alt_argc
00004428 g     F .text	00000208 __sflush_r
0000e94c g     F .text	0000005c _do_dtors
0000555c g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00006c08 g     F .text	00000060 __ulp
00004a44 g     F .text	00000018 __fp_unlock_all
00011d4c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000558c g     F .text	0000000c localeconv
0000ea68 g     F .text	00000050 alt_ic_isr_register
00011d7c g       *ABS*	00000000 _edata
000139e0 g       *ABS*	00000000 _end
00000240 g       *ABS*	00000000 __ram_exceptions_end
0000db14 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0000eb58 g     F .text	000000a4 alt_ic_irq_disable
000078d4 g     F .text	0000007c __swrite
00011d44 g     O .rwdata	00000004 __malloc_trim_threshold
0000f3e8 g     F .text	00000020 alt_get_performance_counter_base
00005550 g     F .text	0000000c __locale_msgcharset
0000f730 g     F .text	00000038 exit
000053f4 g     F .text	000000c4 _fwalk_reent
00006a70 g     F .text	00000198 __mdiff
0000a424 g     F .text	0000005c .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00004a20 g     F .text	00000004 __sfp_lock_release
0000fafc g     F .text	00000034 _exit
0000e678 g     F .text	00000140 alt_alarm_start
00005598 g     F .text	000001b8 __smakebuf_r
000008e4 g     F .text	00000098 strlen
0000ef8c g     F .text	00000158 open
0000b67c g     F .text	000000e0 .hidden __gedf2
00011d48 g     O .rwdata	00000004 __wctomb
00007b54 g     F .text	00000018 __sprint_r
0000ea38 g     F .text	00000030 alt_icache_flush_all
00011d70 g     O .rwdata	00000004 alt_priority_mask
0000eab8 g     F .text	000000a0 alt_ic_irq_enable
000028cc g     F .text	00000024 __vfprintf_internal
0000e144 g     F .text	00000024 altera_avalon_mutex_close
000097b8 g     F .text	0000005c _wctomb_r
0000bf60 g     F .text	000008d0 .hidden __subdf3
00006498 g     F .text	000000b0 __lo0bits
00011d74 g     O .rwdata	00000008 alt_alarm_list
0000e8f0 g     F .text	0000005c _do_ctors
000096c8 g     F .text	000000c0 wcrtomb
0000cae0 g     F .text	000000d0 close
0000ce34 g     F .text	00000080 alt_load
0000946c g     F .text	0000005c fputwc
00000000  w      *UND*	00000000 free
00004a24 g     F .text	00000004 __sinit_lock_acquire
0000620c g     F .text	00000120 __multadd
000061e4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00880014 	movui	r2,8192
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_mem_onchip_memory2_0+0xfbfe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409014 	ori	at,at,576
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001cc0 	call	1cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	108e3804 	addi	r2,r2,14560
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	108e3804 	addi	r2,r2,14560
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	21000104 	addi	r4,r4,4
 168:	1105883a 	add	r2,r2,r4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_mem_onchip_memory2_0+0xfbfe012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_mem_onchip_memory2_0+0xfbfe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	e037883a 	mov	sp,fp
 1bc:	dfc00117 	ldw	ra,4(sp)
 1c0:	df000017 	ldw	fp,0(sp)
 1c4:	dec00204 	addi	sp,sp,8
 1c8:	f800283a 	ret

000001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1cc:	defffb04 	addi	sp,sp,-20
 1d0:	dfc00415 	stw	ra,16(sp)
 1d4:	df000315 	stw	fp,12(sp)
 1d8:	df000304 	addi	fp,sp,12
 1dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e0:	000531fa 	rdctl	r2,exception
 1e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1e8:	e0bffd17 	ldw	r2,-12(fp)
 1ec:	10801f0c 	andi	r2,r2,124
 1f0:	1004d0ba 	srli	r2,r2,2
 1f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1f8:	0005333a 	rdctl	r2,badaddr
 1fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 200:	d0a6e017 	ldw	r2,-25728(gp)
 204:	10000726 	beq	r2,zero,224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 208:	d0a6e017 	ldw	r2,-25728(gp)
 20c:	e0fffd17 	ldw	r3,-12(fp)
 210:	1809883a 	mov	r4,r3
 214:	e17fff17 	ldw	r5,-4(fp)
 218:	e1bffe17 	ldw	r6,-8(fp)
 21c:	103ee83a 	callr	r2
 220:	00000206 	br	22c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 228:	0005883a 	mov	r2,zero
}
 22c:	e037883a 	mov	sp,fp
 230:	dfc00117 	ldw	ra,4(sp)
 234:	df000017 	ldw	fp,0(sp)
 238:	dec00204 	addi	sp,sp,8
 23c:	f800283a 	ret

Disassembly of section .text:

00000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     240:	00840014 	movui	r2,4096
#endif

0:
    initd 0(r2)
     244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     24c:	00bffd16 	blt	zero,r2,244 <__alt_mem_onchip_memory2_0+0xfbfe0244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     250:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
     254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     258:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     25c:	d6a74d14 	ori	gp,gp,40244
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     260:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     264:	108e2014 	ori	r2,r2,14464

    movhi r3, %hi(__bss_end)
     268:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     26c:	18ce7814 	ori	r3,r3,14816

    beq r2, r3, 1f
     270:	10c00326 	beq	r2,r3,280 <_start+0x40>

0:
    stw zero, (r2)
     274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     27c:	10fffd36 	bltu	r2,r3,274 <__alt_mem_onchip_memory2_0+0xfbfe0274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     280:	000ce340 	call	ce34 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     284:	000cfd80 	call	cfd8 <alt_main>

00000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     288:	003fff06 	br	288 <__alt_mem_onchip_memory2_0+0xfbfe0288>

0000028c <main>:
    int status_start;
    int status_done;
}   shared_mem_struct;

int main()
{
     28c:	defecd04 	addi	sp,sp,-1228
     290:	dfc13215 	stw	ra,1224(sp)
     294:	df013115 	stw	fp,1220(sp)
     298:	df013104 	addi	fp,sp,1220
    printf("Hello\n");
     29c:	01000074 	movhi	r4,1
     2a0:	213ecc04 	addi	r4,r4,-1232
     2a4:	00008d00 	call	8d0 <puts>
   //initialize the message buffer location
   shared_mem_struct *message;
   message = (shared_mem_struct*)shared_mem;
     2a8:	008100b4 	movhi	r2,1026
     2ac:	e0bed015 	stw	r2,-1216(fp)

  volatile int i,j,k; //i = row, j = column,

  int count;
  int M1[10][10]={  0,0,0,0,0,0,0,0,0,0,
     2b0:	00800074 	movhi	r2,1
     2b4:	10bed504 	addi	r2,r2,-1196
     2b8:	e0fed404 	addi	r3,fp,-1200
     2bc:	100b883a 	mov	r5,r2
     2c0:	00806404 	movi	r2,400
     2c4:	1809883a 	mov	r4,r3
     2c8:	100d883a 	mov	r6,r2
     2cc:	00005440 	call	544 <memcpy>
                    32,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    19,32,33,34,32,32,33,34,32,32};

  int M2[10][10]={  32,32,33,34,32,32,33,34,32,32,
     2d0:	00800074 	movhi	r2,1
     2d4:	10bf3904 	addi	r2,r2,-796
     2d8:	e0ff3804 	addi	r3,fp,-800
     2dc:	100b883a 	mov	r5,r2
     2e0:	00806404 	movi	r2,400
     2e4:	1809883a 	mov	r4,r3
     2e8:	100d883a 	mov	r6,r2
     2ec:	00005440 	call	544 <memcpy>
                    19,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    19,32,33,34,32,32,33,34,32,32};
  int C[10][10]= {0};
     2f0:	e0ff9c04 	addi	r3,fp,-400
     2f4:	00806404 	movi	r2,400
     2f8:	1809883a 	mov	r4,r3
     2fc:	000b883a 	mov	r5,zero
     300:	100d883a 	mov	r6,r2
     304:	000067c0 	call	67c <memset>

  for( i=0; i<10; i++)
     308:	e03ed115 	stw	zero,-1212(fp)
     30c:	00003206 	br	3d8 <main+0x14c>
  {
    for (j=0; j<10; j++)
     310:	e03ed215 	stw	zero,-1208(fp)
     314:	00002a06 	br	3c0 <main+0x134>
    {
        (message)->M1s[i][j]=M1[i][j];
     318:	e1bed117 	ldw	r6,-1212(fp)
     31c:	e17ed217 	ldw	r5,-1208(fp)
     320:	e0fed117 	ldw	r3,-1212(fp)
     324:	e0bed217 	ldw	r2,-1208(fp)
     328:	18c002a4 	muli	r3,r3,10
     32c:	1885883a 	add	r2,r3,r2
     330:	1085883a 	add	r2,r2,r2
     334:	1085883a 	add	r2,r2,r2
     338:	e0fed004 	addi	r3,fp,-1216
     33c:	1885883a 	add	r2,r3,r2
     340:	10800404 	addi	r2,r2,16
     344:	10c00017 	ldw	r3,0(r2)
     348:	e13ed017 	ldw	r4,-1216(fp)
     34c:	308002a4 	muli	r2,r6,10
     350:	1145883a 	add	r2,r2,r5
     354:	1085883a 	add	r2,r2,r2
     358:	1085883a 	add	r2,r2,r2
     35c:	2085883a 	add	r2,r4,r2
     360:	10c00015 	stw	r3,0(r2)
        (message)->M2s[i][j]=M2[i][j];
     364:	e1bed117 	ldw	r6,-1212(fp)
     368:	e17ed217 	ldw	r5,-1208(fp)
     36c:	e0fed117 	ldw	r3,-1212(fp)
     370:	e0bed217 	ldw	r2,-1208(fp)
     374:	18c002a4 	muli	r3,r3,10
     378:	1885883a 	add	r2,r3,r2
     37c:	1085883a 	add	r2,r2,r2
     380:	1085883a 	add	r2,r2,r2
     384:	e0fed004 	addi	r3,fp,-1216
     388:	1885883a 	add	r2,r3,r2
     38c:	10806804 	addi	r2,r2,416
     390:	10c00017 	ldw	r3,0(r2)
     394:	e13ed017 	ldw	r4,-1216(fp)
     398:	308002a4 	muli	r2,r6,10
     39c:	1145883a 	add	r2,r2,r5
     3a0:	10801904 	addi	r2,r2,100
     3a4:	1085883a 	add	r2,r2,r2
     3a8:	1085883a 	add	r2,r2,r2
     3ac:	2085883a 	add	r2,r4,r2
     3b0:	10c00015 	stw	r3,0(r2)
                    19,32,33,34,32,32,33,34,32,32};
  int C[10][10]= {0};

  for( i=0; i<10; i++)
  {
    for (j=0; j<10; j++)
     3b4:	e0bed217 	ldw	r2,-1208(fp)
     3b8:	10800044 	addi	r2,r2,1
     3bc:	e0bed215 	stw	r2,-1208(fp)
     3c0:	e0bed217 	ldw	r2,-1208(fp)
     3c4:	10800290 	cmplti	r2,r2,10
     3c8:	103fd31e 	bne	r2,zero,318 <__alt_mem_onchip_memory2_0+0xfbfe0318>
                    32,32,33,34,32,32,33,34,32,32,
                    32,32,33,34,32,32,33,34,32,32,
                    19,32,33,34,32,32,33,34,32,32};
  int C[10][10]= {0};

  for( i=0; i<10; i++)
     3cc:	e0bed117 	ldw	r2,-1212(fp)
     3d0:	10800044 	addi	r2,r2,1
     3d4:	e0bed115 	stw	r2,-1212(fp)
     3d8:	e0bed117 	ldw	r2,-1212(fp)
     3dc:	10800290 	cmplti	r2,r2,10
     3e0:	103fcb1e 	bne	r2,zero,310 <__alt_mem_onchip_memory2_0+0xfbfe0310>
        (message)->M1s[i][j]=M1[i][j];
        (message)->M2s[i][j]=M2[i][j];
    }
  }

  (message)->status_start=1;
     3e4:	e0bed017 	ldw	r2,-1216(fp)
     3e8:	00c00044 	movi	r3,1
     3ec:	10c12c15 	stw	r3,1200(r2)
  (message)->status_done=1;
     3f0:	e0bed017 	ldw	r2,-1216(fp)
     3f4:	00c00044 	movi	r3,1
     3f8:	10c12d15 	stw	r3,1204(r2)

  PERF_RESET (PERFORMANCE_COUNTER_BASE);            //Reset Performance Counters to 0
     3fc:	00c00044 	movi	r3,1
     400:	00810034 	movhi	r2,1024
     404:	10840004 	addi	r2,r2,4096
     408:	10c00035 	stwio	r3,0(r2)
  PERF_START_MEASURING (PERFORMANCE_COUNTER_BASE);  //Start the Counter
     40c:	0007883a 	mov	r3,zero
     410:	00810034 	movhi	r2,1024
     414:	10840104 	addi	r2,r2,4100
     418:	10c00035 	stwio	r3,0(r2)
  PERF_BEGIN (PERFORMANCE_COUNTER_BASE,2);          //Start the overhead counter
     41c:	0007883a 	mov	r3,zero
     420:	00810034 	movhi	r2,1024
     424:	10840904 	addi	r2,r2,4132
     428:	10c00035 	stwio	r3,0(r2)
   PERF_BEGIN (PERFORMANCE_COUNTER_BASE,1);          //Start the Matrix Multiplication Counter
     42c:	0007883a 	mov	r3,zero
     430:	00810034 	movhi	r2,1024
     434:	10840504 	addi	r2,r2,4116
     438:	10c00035 	stwio	r3,0(r2)
  PERF_END (PERFORMANCE_COUNTER_BASE,2);            //Stop the overhead counter
     43c:	0007883a 	mov	r3,zero
     440:	00810034 	movhi	r2,1024
     444:	10840804 	addi	r2,r2,4128
     448:	10c00035 	stwio	r3,0(r2)
      }
    }
  }
  */
    //CPU stops the performance_count and print performance_count result and matrix C from 1000th iteration on the terminal.
  while((message)->status_done!=3) ;
     44c:	0001883a 	nop
     450:	e0bed017 	ldw	r2,-1216(fp)
     454:	10812d17 	ldw	r2,1204(r2)
     458:	108000d8 	cmpnei	r2,r2,3
     45c:	103ffc1e 	bne	r2,zero,450 <__alt_mem_onchip_memory2_0+0xfbfe0450>
  for (i=0;i<=9;i++)
     460:	e03ed115 	stw	zero,-1212(fp)
     464:	00001b06 	br	4d4 <main+0x248>
    {
        for(j=0;j<9;j++)
     468:	e03ed215 	stw	zero,-1208(fp)
     46c:	00001106 	br	4b4 <main+0x228>
        {
            printf("%d ",(message)->Cs[i][j]);
     470:	e13ed117 	ldw	r4,-1212(fp)
     474:	e0bed217 	ldw	r2,-1208(fp)
     478:	e0fed017 	ldw	r3,-1216(fp)
     47c:	210002a4 	muli	r4,r4,10
     480:	2085883a 	add	r2,r4,r2
     484:	10803204 	addi	r2,r2,200
     488:	1085883a 	add	r2,r2,r2
     48c:	1085883a 	add	r2,r2,r2
     490:	1885883a 	add	r2,r3,r2
     494:	10800017 	ldw	r2,0(r2)
     498:	01000074 	movhi	r4,1
     49c:	213ece04 	addi	r4,r4,-1224
     4a0:	100b883a 	mov	r5,r2
     4a4:	00007cc0 	call	7cc <printf>
  */
    //CPU stops the performance_count and print performance_count result and matrix C from 1000th iteration on the terminal.
  while((message)->status_done!=3) ;
  for (i=0;i<=9;i++)
    {
        for(j=0;j<9;j++)
     4a8:	e0bed217 	ldw	r2,-1208(fp)
     4ac:	10800044 	addi	r2,r2,1
     4b0:	e0bed215 	stw	r2,-1208(fp)
     4b4:	e0bed217 	ldw	r2,-1208(fp)
     4b8:	10800250 	cmplti	r2,r2,9
     4bc:	103fec1e 	bne	r2,zero,470 <__alt_mem_onchip_memory2_0+0xfbfe0470>
        {
            printf("%d ",(message)->Cs[i][j]);
        }
        printf("\n");
     4c0:	01000284 	movi	r4,10
     4c4:	00008100 	call	810 <putchar>
    }
  }
  */
    //CPU stops the performance_count and print performance_count result and matrix C from 1000th iteration on the terminal.
  while((message)->status_done!=3) ;
  for (i=0;i<=9;i++)
     4c8:	e0bed117 	ldw	r2,-1212(fp)
     4cc:	10800044 	addi	r2,r2,1
     4d0:	e0bed115 	stw	r2,-1212(fp)
     4d4:	e0bed117 	ldw	r2,-1212(fp)
     4d8:	10800290 	cmplti	r2,r2,10
     4dc:	103fe21e 	bne	r2,zero,468 <__alt_mem_onchip_memory2_0+0xfbfe0468>
            printf("%d ",(message)->Cs[i][j]);
        }
        printf("\n");
    }

  PERF_END (PERFORMANCE_COUNTER_BASE,1);            //Stop the Matrix Multiplication Counter
     4e0:	0007883a 	mov	r3,zero
     4e4:	00810034 	movhi	r2,1024
     4e8:	10840404 	addi	r2,r2,4112
     4ec:	10c00035 	stwio	r3,0(r2)
  PERF_STOP_MEASURING (PERFORMANCE_COUNTER_BASE);   //Stop all counters
     4f0:	0007883a 	mov	r3,zero
     4f4:	00810034 	movhi	r2,1024
     4f8:	10840004 	addi	r2,r2,4096
     4fc:	10c00035 	stwio	r3,0(r2)

  perf_print_formatted_report((void *)PERFORMANCE_COUNTER_BASE, ALT_CPU_FREQ, 2,
     500:	00800074 	movhi	r2,1
     504:	10bed204 	addi	r2,r2,-1208
     508:	d8800015 	stw	r2,0(sp)
     50c:	01010034 	movhi	r4,1024
     510:	21040004 	addi	r4,r4,4096
     514:	014221b4 	movhi	r5,2182
     518:	29407004 	addi	r5,r5,448
     51c:	01800084 	movi	r6,2
     520:	01c00074 	movhi	r7,1
     524:	39fecf04 	addi	r7,r7,-1220
     528:	000e3f80 	call	e3f8 <perf_print_formatted_report>
  "1000 loops","PC overhead");

  return 0;
     52c:	0005883a 	mov	r2,zero
}
     530:	e037883a 	mov	sp,fp
     534:	dfc00117 	ldw	ra,4(sp)
     538:	df000017 	ldw	fp,0(sp)
     53c:	dec00204 	addi	sp,sp,8
     540:	f800283a 	ret

00000544 <memcpy>:
     544:	deffff04 	addi	sp,sp,-4
     548:	dc000015 	stw	r16,0(sp)
     54c:	00c003c4 	movi	r3,15
     550:	2005883a 	mov	r2,r4
     554:	1980432e 	bgeu	r3,r6,664 <memcpy+0x120>
     558:	2146b03a 	or	r3,r4,r5
     55c:	18c000cc 	andi	r3,r3,3
     560:	1800421e 	bne	r3,zero,66c <memcpy+0x128>
     564:	343ffc04 	addi	r16,r6,-16
     568:	8020d13a 	srli	r16,r16,4
     56c:	28c00104 	addi	r3,r5,4
     570:	23400104 	addi	r13,r4,4
     574:	801e913a 	slli	r15,r16,4
     578:	2b000204 	addi	r12,r5,8
     57c:	22c00204 	addi	r11,r4,8
     580:	7bc00504 	addi	r15,r15,20
     584:	2a800304 	addi	r10,r5,12
     588:	22400304 	addi	r9,r4,12
     58c:	2bdf883a 	add	r15,r5,r15
     590:	2811883a 	mov	r8,r5
     594:	200f883a 	mov	r7,r4
     598:	41000017 	ldw	r4,0(r8)
     59c:	39c00404 	addi	r7,r7,16
     5a0:	18c00404 	addi	r3,r3,16
     5a4:	393ffc15 	stw	r4,-16(r7)
     5a8:	1bbffc17 	ldw	r14,-16(r3)
     5ac:	6b400404 	addi	r13,r13,16
     5b0:	5ac00404 	addi	r11,r11,16
     5b4:	6bbffc15 	stw	r14,-16(r13)
     5b8:	63800017 	ldw	r14,0(r12)
     5bc:	4a400404 	addi	r9,r9,16
     5c0:	42000404 	addi	r8,r8,16
     5c4:	5bbffc15 	stw	r14,-16(r11)
     5c8:	53800017 	ldw	r14,0(r10)
     5cc:	63000404 	addi	r12,r12,16
     5d0:	52800404 	addi	r10,r10,16
     5d4:	4bbffc15 	stw	r14,-16(r9)
     5d8:	1bffef1e 	bne	r3,r15,598 <__alt_mem_onchip_memory2_0+0xfbfe0598>
     5dc:	81c00044 	addi	r7,r16,1
     5e0:	380e913a 	slli	r7,r7,4
     5e4:	310003cc 	andi	r4,r6,15
     5e8:	02c000c4 	movi	r11,3
     5ec:	11c7883a 	add	r3,r2,r7
     5f0:	29cb883a 	add	r5,r5,r7
     5f4:	59001f2e 	bgeu	r11,r4,674 <memcpy+0x130>
     5f8:	1813883a 	mov	r9,r3
     5fc:	2811883a 	mov	r8,r5
     600:	200f883a 	mov	r7,r4
     604:	42800017 	ldw	r10,0(r8)
     608:	4a400104 	addi	r9,r9,4
     60c:	39ffff04 	addi	r7,r7,-4
     610:	4abfff15 	stw	r10,-4(r9)
     614:	42000104 	addi	r8,r8,4
     618:	59fffa36 	bltu	r11,r7,604 <__alt_mem_onchip_memory2_0+0xfbfe0604>
     61c:	213fff04 	addi	r4,r4,-4
     620:	2008d0ba 	srli	r4,r4,2
     624:	318000cc 	andi	r6,r6,3
     628:	21000044 	addi	r4,r4,1
     62c:	2109883a 	add	r4,r4,r4
     630:	2109883a 	add	r4,r4,r4
     634:	1907883a 	add	r3,r3,r4
     638:	290b883a 	add	r5,r5,r4
     63c:	30000626 	beq	r6,zero,658 <memcpy+0x114>
     640:	198d883a 	add	r6,r3,r6
     644:	29c00003 	ldbu	r7,0(r5)
     648:	18c00044 	addi	r3,r3,1
     64c:	29400044 	addi	r5,r5,1
     650:	19ffffc5 	stb	r7,-1(r3)
     654:	19bffb1e 	bne	r3,r6,644 <__alt_mem_onchip_memory2_0+0xfbfe0644>
     658:	dc000017 	ldw	r16,0(sp)
     65c:	dec00104 	addi	sp,sp,4
     660:	f800283a 	ret
     664:	2007883a 	mov	r3,r4
     668:	003ff406 	br	63c <__alt_mem_onchip_memory2_0+0xfbfe063c>
     66c:	2007883a 	mov	r3,r4
     670:	003ff306 	br	640 <__alt_mem_onchip_memory2_0+0xfbfe0640>
     674:	200d883a 	mov	r6,r4
     678:	003ff006 	br	63c <__alt_mem_onchip_memory2_0+0xfbfe063c>

0000067c <memset>:
     67c:	20c000cc 	andi	r3,r4,3
     680:	2005883a 	mov	r2,r4
     684:	18004326 	beq	r3,zero,794 <memset+0x118>
     688:	31ffffc4 	addi	r7,r6,-1
     68c:	30004026 	beq	r6,zero,790 <memset+0x114>
     690:	2813883a 	mov	r9,r5
     694:	200d883a 	mov	r6,r4
     698:	2007883a 	mov	r3,r4
     69c:	00000406 	br	6b0 <memset+0x34>
     6a0:	3a3fffc4 	addi	r8,r7,-1
     6a4:	31800044 	addi	r6,r6,1
     6a8:	38003926 	beq	r7,zero,790 <memset+0x114>
     6ac:	400f883a 	mov	r7,r8
     6b0:	18c00044 	addi	r3,r3,1
     6b4:	32400005 	stb	r9,0(r6)
     6b8:	1a0000cc 	andi	r8,r3,3
     6bc:	403ff81e 	bne	r8,zero,6a0 <__alt_mem_onchip_memory2_0+0xfbfe06a0>
     6c0:	010000c4 	movi	r4,3
     6c4:	21c02d2e 	bgeu	r4,r7,77c <memset+0x100>
     6c8:	29803fcc 	andi	r6,r5,255
     6cc:	3008923a 	slli	r4,r6,8
     6d0:	218cb03a 	or	r6,r4,r6
     6d4:	3008943a 	slli	r4,r6,16
     6d8:	218cb03a 	or	r6,r4,r6
     6dc:	010003c4 	movi	r4,15
     6e0:	21c0182e 	bgeu	r4,r7,744 <memset+0xc8>
     6e4:	3b3ffc04 	addi	r12,r7,-16
     6e8:	6018d13a 	srli	r12,r12,4
     6ec:	1a000104 	addi	r8,r3,4
     6f0:	1ac00204 	addi	r11,r3,8
     6f4:	6008913a 	slli	r4,r12,4
     6f8:	1a800304 	addi	r10,r3,12
     6fc:	1813883a 	mov	r9,r3
     700:	21000504 	addi	r4,r4,20
     704:	1909883a 	add	r4,r3,r4
     708:	49800015 	stw	r6,0(r9)
     70c:	41800015 	stw	r6,0(r8)
     710:	59800015 	stw	r6,0(r11)
     714:	51800015 	stw	r6,0(r10)
     718:	42000404 	addi	r8,r8,16
     71c:	4a400404 	addi	r9,r9,16
     720:	5ac00404 	addi	r11,r11,16
     724:	52800404 	addi	r10,r10,16
     728:	413ff71e 	bne	r8,r4,708 <__alt_mem_onchip_memory2_0+0xfbfe0708>
     72c:	63000044 	addi	r12,r12,1
     730:	6018913a 	slli	r12,r12,4
     734:	39c003cc 	andi	r7,r7,15
     738:	010000c4 	movi	r4,3
     73c:	1b07883a 	add	r3,r3,r12
     740:	21c00e2e 	bgeu	r4,r7,77c <memset+0x100>
     744:	1813883a 	mov	r9,r3
     748:	3811883a 	mov	r8,r7
     74c:	010000c4 	movi	r4,3
     750:	49800015 	stw	r6,0(r9)
     754:	423fff04 	addi	r8,r8,-4
     758:	4a400104 	addi	r9,r9,4
     75c:	223ffc36 	bltu	r4,r8,750 <__alt_mem_onchip_memory2_0+0xfbfe0750>
     760:	393fff04 	addi	r4,r7,-4
     764:	2008d0ba 	srli	r4,r4,2
     768:	39c000cc 	andi	r7,r7,3
     76c:	21000044 	addi	r4,r4,1
     770:	2109883a 	add	r4,r4,r4
     774:	2109883a 	add	r4,r4,r4
     778:	1907883a 	add	r3,r3,r4
     77c:	38000426 	beq	r7,zero,790 <memset+0x114>
     780:	19cf883a 	add	r7,r3,r7
     784:	19400005 	stb	r5,0(r3)
     788:	18c00044 	addi	r3,r3,1
     78c:	19fffd1e 	bne	r3,r7,784 <__alt_mem_onchip_memory2_0+0xfbfe0784>
     790:	f800283a 	ret
     794:	2007883a 	mov	r3,r4
     798:	300f883a 	mov	r7,r6
     79c:	003fc806 	br	6c0 <__alt_mem_onchip_memory2_0+0xfbfe06c0>

000007a0 <_printf_r>:
     7a0:	defffd04 	addi	sp,sp,-12
     7a4:	dfc00015 	stw	ra,0(sp)
     7a8:	d9800115 	stw	r6,4(sp)
     7ac:	d9c00215 	stw	r7,8(sp)
     7b0:	280d883a 	mov	r6,r5
     7b4:	21400217 	ldw	r5,8(r4)
     7b8:	d9c00104 	addi	r7,sp,4
     7bc:	000097c0 	call	97c <___vfprintf_internal_r>
     7c0:	dfc00017 	ldw	ra,0(sp)
     7c4:	dec00304 	addi	sp,sp,12
     7c8:	f800283a 	ret

000007cc <printf>:
     7cc:	defffc04 	addi	sp,sp,-16
     7d0:	dfc00015 	stw	ra,0(sp)
     7d4:	d9400115 	stw	r5,4(sp)
     7d8:	d9800215 	stw	r6,8(sp)
     7dc:	d9c00315 	stw	r7,12(sp)
     7e0:	00800074 	movhi	r2,1
     7e4:	10874e04 	addi	r2,r2,7480
     7e8:	10800017 	ldw	r2,0(r2)
     7ec:	200b883a 	mov	r5,r4
     7f0:	d9800104 	addi	r6,sp,4
     7f4:	11000217 	ldw	r4,8(r2)
     7f8:	00028cc0 	call	28cc <__vfprintf_internal>
     7fc:	dfc00017 	ldw	ra,0(sp)
     800:	dec00404 	addi	sp,sp,16
     804:	f800283a 	ret

00000808 <_putchar_r>:
     808:	21800217 	ldw	r6,8(r4)
     80c:	00070dc1 	jmpi	70dc <_putc_r>

00000810 <putchar>:
     810:	00800074 	movhi	r2,1
     814:	10874e04 	addi	r2,r2,7480
     818:	200b883a 	mov	r5,r4
     81c:	11000017 	ldw	r4,0(r2)
     820:	21800217 	ldw	r6,8(r4)
     824:	00070dc1 	jmpi	70dc <_putc_r>

00000828 <_puts_r>:
     828:	defff604 	addi	sp,sp,-40
     82c:	dc000715 	stw	r16,28(sp)
     830:	2021883a 	mov	r16,r4
     834:	2809883a 	mov	r4,r5
     838:	dc400815 	stw	r17,32(sp)
     83c:	dfc00915 	stw	ra,36(sp)
     840:	2823883a 	mov	r17,r5
     844:	00008e40 	call	8e4 <strlen>
     848:	81400217 	ldw	r5,8(r16)
     84c:	11000044 	addi	r4,r2,1
     850:	d8800115 	stw	r2,4(sp)
     854:	00800074 	movhi	r2,1
     858:	2980030b 	ldhu	r6,12(r5)
     85c:	10bf9d04 	addi	r2,r2,-396
     860:	d8800215 	stw	r2,8(sp)
     864:	00800044 	movi	r2,1
     868:	d8800315 	stw	r2,12(sp)
     86c:	00800084 	movi	r2,2
     870:	d8800515 	stw	r2,20(sp)
     874:	dc400015 	stw	r17,0(sp)
     878:	d9000615 	stw	r4,24(sp)
     87c:	dec00415 	stw	sp,16(sp)
     880:	3088000c 	andi	r2,r6,8192
     884:	1000061e 	bne	r2,zero,8a0 <_puts_r+0x78>
     888:	29001917 	ldw	r4,100(r5)
     88c:	00b7ffc4 	movi	r2,-8193
     890:	31880014 	ori	r6,r6,8192
     894:	2084703a 	and	r2,r4,r2
     898:	2980030d 	sth	r6,12(r5)
     89c:	28801915 	stw	r2,100(r5)
     8a0:	8009883a 	mov	r4,r16
     8a4:	d9800404 	addi	r6,sp,16
     8a8:	0004e700 	call	4e70 <__sfvwrite_r>
     8ac:	1000061e 	bne	r2,zero,8c8 <_puts_r+0xa0>
     8b0:	00800284 	movi	r2,10
     8b4:	dfc00917 	ldw	ra,36(sp)
     8b8:	dc400817 	ldw	r17,32(sp)
     8bc:	dc000717 	ldw	r16,28(sp)
     8c0:	dec00a04 	addi	sp,sp,40
     8c4:	f800283a 	ret
     8c8:	00bfffc4 	movi	r2,-1
     8cc:	003ff906 	br	8b4 <__alt_mem_onchip_memory2_0+0xfbfe08b4>

000008d0 <puts>:
     8d0:	00800074 	movhi	r2,1
     8d4:	10874e04 	addi	r2,r2,7480
     8d8:	200b883a 	mov	r5,r4
     8dc:	11000017 	ldw	r4,0(r2)
     8e0:	00008281 	jmpi	828 <_puts_r>

000008e4 <strlen>:
     8e4:	208000cc 	andi	r2,r4,3
     8e8:	10002026 	beq	r2,zero,96c <strlen+0x88>
     8ec:	20800007 	ldb	r2,0(r4)
     8f0:	10002026 	beq	r2,zero,974 <strlen+0x90>
     8f4:	2005883a 	mov	r2,r4
     8f8:	00000206 	br	904 <strlen+0x20>
     8fc:	10c00007 	ldb	r3,0(r2)
     900:	18001826 	beq	r3,zero,964 <strlen+0x80>
     904:	10800044 	addi	r2,r2,1
     908:	10c000cc 	andi	r3,r2,3
     90c:	183ffb1e 	bne	r3,zero,8fc <__alt_mem_onchip_memory2_0+0xfbfe08fc>
     910:	10c00017 	ldw	r3,0(r2)
     914:	01ffbff4 	movhi	r7,65279
     918:	39ffbfc4 	addi	r7,r7,-257
     91c:	00ca303a 	nor	r5,zero,r3
     920:	01a02074 	movhi	r6,32897
     924:	19c7883a 	add	r3,r3,r7
     928:	31a02004 	addi	r6,r6,-32640
     92c:	1946703a 	and	r3,r3,r5
     930:	1986703a 	and	r3,r3,r6
     934:	1800091e 	bne	r3,zero,95c <strlen+0x78>
     938:	10800104 	addi	r2,r2,4
     93c:	10c00017 	ldw	r3,0(r2)
     940:	19cb883a 	add	r5,r3,r7
     944:	00c6303a 	nor	r3,zero,r3
     948:	28c6703a 	and	r3,r5,r3
     94c:	1986703a 	and	r3,r3,r6
     950:	183ff926 	beq	r3,zero,938 <__alt_mem_onchip_memory2_0+0xfbfe0938>
     954:	00000106 	br	95c <strlen+0x78>
     958:	10800044 	addi	r2,r2,1
     95c:	10c00007 	ldb	r3,0(r2)
     960:	183ffd1e 	bne	r3,zero,958 <__alt_mem_onchip_memory2_0+0xfbfe0958>
     964:	1105c83a 	sub	r2,r2,r4
     968:	f800283a 	ret
     96c:	2005883a 	mov	r2,r4
     970:	003fe706 	br	910 <__alt_mem_onchip_memory2_0+0xfbfe0910>
     974:	0005883a 	mov	r2,zero
     978:	f800283a 	ret

0000097c <___vfprintf_internal_r>:
     97c:	deffb604 	addi	sp,sp,-296
     980:	dfc04915 	stw	ra,292(sp)
     984:	ddc04715 	stw	r23,284(sp)
     988:	dd804615 	stw	r22,280(sp)
     98c:	282f883a 	mov	r23,r5
     990:	202d883a 	mov	r22,r4
     994:	d9802a15 	stw	r6,168(sp)
     998:	d9c02d15 	stw	r7,180(sp)
     99c:	df004815 	stw	fp,288(sp)
     9a0:	dd404515 	stw	r21,276(sp)
     9a4:	dd004415 	stw	r20,272(sp)
     9a8:	dcc04315 	stw	r19,268(sp)
     9ac:	dc804215 	stw	r18,264(sp)
     9b0:	dc404115 	stw	r17,260(sp)
     9b4:	dc004015 	stw	r16,256(sp)
     9b8:	00055640 	call	5564 <_localeconv_r>
     9bc:	10800017 	ldw	r2,0(r2)
     9c0:	1009883a 	mov	r4,r2
     9c4:	d8803515 	stw	r2,212(sp)
     9c8:	00008e40 	call	8e4 <strlen>
     9cc:	d8803815 	stw	r2,224(sp)
     9d0:	b0000226 	beq	r22,zero,9dc <___vfprintf_internal_r+0x60>
     9d4:	b0800e17 	ldw	r2,56(r22)
     9d8:	1000e126 	beq	r2,zero,d60 <___vfprintf_internal_r+0x3e4>
     9dc:	b880030b 	ldhu	r2,12(r23)
     9e0:	10c8000c 	andi	r3,r2,8192
     9e4:	1800061e 	bne	r3,zero,a00 <___vfprintf_internal_r+0x84>
     9e8:	b9001917 	ldw	r4,100(r23)
     9ec:	00f7ffc4 	movi	r3,-8193
     9f0:	10880014 	ori	r2,r2,8192
     9f4:	20c6703a 	and	r3,r4,r3
     9f8:	b880030d 	sth	r2,12(r23)
     9fc:	b8c01915 	stw	r3,100(r23)
     a00:	10c0020c 	andi	r3,r2,8
     a04:	1800a726 	beq	r3,zero,ca4 <___vfprintf_internal_r+0x328>
     a08:	b8c00417 	ldw	r3,16(r23)
     a0c:	1800a526 	beq	r3,zero,ca4 <___vfprintf_internal_r+0x328>
     a10:	1080068c 	andi	r2,r2,26
     a14:	00c00284 	movi	r3,10
     a18:	10c0aa26 	beq	r2,r3,cc4 <___vfprintf_internal_r+0x348>
     a1c:	dac01e04 	addi	r11,sp,120
     a20:	db001dc4 	addi	r12,sp,119
     a24:	d8800404 	addi	r2,sp,16
     a28:	05000074 	movhi	r20,1
     a2c:	dac02815 	stw	r11,160(sp)
     a30:	5b17c83a 	sub	r11,r11,r12
     a34:	a53fae84 	addi	r20,r20,-326
     a38:	db002915 	stw	r12,164(sp)
     a3c:	d8801e15 	stw	r2,120(sp)
     a40:	d8002015 	stw	zero,128(sp)
     a44:	d8001f15 	stw	zero,124(sp)
     a48:	d8003315 	stw	zero,204(sp)
     a4c:	d8003715 	stw	zero,220(sp)
     a50:	d8003915 	stw	zero,228(sp)
     a54:	1011883a 	mov	r8,r2
     a58:	d8003b15 	stw	zero,236(sp)
     a5c:	d8003a15 	stw	zero,232(sp)
     a60:	d8002f15 	stw	zero,188(sp)
     a64:	dac03c15 	stw	r11,240(sp)
     a68:	db002a17 	ldw	r12,168(sp)
     a6c:	60800007 	ldb	r2,0(r12)
     a70:	1000be26 	beq	r2,zero,d6c <___vfprintf_internal_r+0x3f0>
     a74:	00c00944 	movi	r3,37
     a78:	10c0bc26 	beq	r2,r3,d6c <___vfprintf_internal_r+0x3f0>
     a7c:	6021883a 	mov	r16,r12
     a80:	00000106 	br	a88 <___vfprintf_internal_r+0x10c>
     a84:	10c08426 	beq	r2,r3,c98 <___vfprintf_internal_r+0x31c>
     a88:	84000044 	addi	r16,r16,1
     a8c:	80800007 	ldb	r2,0(r16)
     a90:	103ffc1e 	bne	r2,zero,a84 <__alt_mem_onchip_memory2_0+0xfbfe0a84>
     a94:	dac02a17 	ldw	r11,168(sp)
     a98:	82e3c83a 	sub	r17,r16,r11
     a9c:	88000f26 	beq	r17,zero,adc <___vfprintf_internal_r+0x160>
     aa0:	d8c02017 	ldw	r3,128(sp)
     aa4:	d8801f17 	ldw	r2,124(sp)
     aa8:	dac02a17 	ldw	r11,168(sp)
     aac:	1c47883a 	add	r3,r3,r17
     ab0:	10800044 	addi	r2,r2,1
     ab4:	d8c02015 	stw	r3,128(sp)
     ab8:	42c00015 	stw	r11,0(r8)
     abc:	44400115 	stw	r17,4(r8)
     ac0:	d8801f15 	stw	r2,124(sp)
     ac4:	00c001c4 	movi	r3,7
     ac8:	18809316 	blt	r3,r2,d18 <___vfprintf_internal_r+0x39c>
     acc:	42000204 	addi	r8,r8,8
     ad0:	db002f17 	ldw	r12,188(sp)
     ad4:	6459883a 	add	r12,r12,r17
     ad8:	db002f15 	stw	r12,188(sp)
     adc:	80800007 	ldb	r2,0(r16)
     ae0:	10009426 	beq	r2,zero,d34 <___vfprintf_internal_r+0x3b8>
     ae4:	80800044 	addi	r2,r16,1
     ae8:	84000047 	ldb	r16,1(r16)
     aec:	d8002785 	stb	zero,158(sp)
     af0:	000d883a 	mov	r6,zero
     af4:	027fffc4 	movi	r9,-1
     af8:	d8002e15 	stw	zero,184(sp)
     afc:	0023883a 	mov	r17,zero
     b00:	01001604 	movi	r4,88
     b04:	01400244 	movi	r5,9
     b08:	02800a84 	movi	r10,42
     b0c:	01c01b04 	movi	r7,108
     b10:	10c00044 	addi	r3,r2,1
     b14:	80bff804 	addi	r2,r16,-32
     b18:	2082cd36 	bltu	r4,r2,1650 <___vfprintf_internal_r+0xcd4>
     b1c:	100490ba 	slli	r2,r2,2
     b20:	02c00034 	movhi	r11,0
     b24:	5ac2cd04 	addi	r11,r11,2868
     b28:	12c5883a 	add	r2,r2,r11
     b2c:	10800017 	ldw	r2,0(r2)
     b30:	1000683a 	jmp	r2
     b34:	00001468 	cmpgeui	zero,zero,81
     b38:	00001650 	cmplti	zero,zero,89
     b3c:	00001650 	cmplti	zero,zero,89
     b40:	000015b8 	rdprs	zero,zero,86
     b44:	00001650 	cmplti	zero,zero,89
     b48:	00001650 	cmplti	zero,zero,89
     b4c:	00001650 	cmplti	zero,zero,89
     b50:	00001650 	cmplti	zero,zero,89
     b54:	00001650 	cmplti	zero,zero,89
     b58:	00001650 	cmplti	zero,zero,89
     b5c:	00001488 	cmpgei	zero,zero,82
     b60:	000014b4 	movhi	zero,82
     b64:	00001650 	cmplti	zero,zero,89
     b68:	00000d74 	movhi	zero,53
     b6c:	00000d84 	movi	zero,54
     b70:	00001650 	cmplti	zero,zero,89
     b74:	00000dc4 	movi	zero,55
     b78:	00000dd4 	movui	zero,55
     b7c:	00000dd4 	movui	zero,55
     b80:	00000dd4 	movui	zero,55
     b84:	00000dd4 	movui	zero,55
     b88:	00000dd4 	movui	zero,55
     b8c:	00000dd4 	movui	zero,55
     b90:	00000dd4 	movui	zero,55
     b94:	00000dd4 	movui	zero,55
     b98:	00000dd4 	movui	zero,55
     b9c:	00001650 	cmplti	zero,zero,89
     ba0:	00001650 	cmplti	zero,zero,89
     ba4:	00001650 	cmplti	zero,zero,89
     ba8:	00001650 	cmplti	zero,zero,89
     bac:	00001650 	cmplti	zero,zero,89
     bb0:	00001650 	cmplti	zero,zero,89
     bb4:	00001650 	cmplti	zero,zero,89
     bb8:	00001650 	cmplti	zero,zero,89
     bbc:	00001650 	cmplti	zero,zero,89
     bc0:	00001650 	cmplti	zero,zero,89
     bc4:	00000e08 	cmpgei	zero,zero,56
     bc8:	00001278 	rdprs	zero,zero,73
     bcc:	00001650 	cmplti	zero,zero,89
     bd0:	00001278 	rdprs	zero,zero,73
     bd4:	00001650 	cmplti	zero,zero,89
     bd8:	00001650 	cmplti	zero,zero,89
     bdc:	00001650 	cmplti	zero,zero,89
     be0:	00001650 	cmplti	zero,zero,89
     be4:	00001364 	muli	zero,zero,77
     be8:	00001650 	cmplti	zero,zero,89
     bec:	00001650 	cmplti	zero,zero,89
     bf0:	0000120c 	andi	zero,zero,72
     bf4:	00001650 	cmplti	zero,zero,89
     bf8:	00001650 	cmplti	zero,zero,89
     bfc:	00001650 	cmplti	zero,zero,89
     c00:	00001650 	cmplti	zero,zero,89
     c04:	00001650 	cmplti	zero,zero,89
     c08:	00001248 	cmpgei	zero,zero,73
     c0c:	00001650 	cmplti	zero,zero,89
     c10:	00001650 	cmplti	zero,zero,89
     c14:	0000140c 	andi	zero,zero,80
     c18:	00001650 	cmplti	zero,zero,89
     c1c:	00001650 	cmplti	zero,zero,89
     c20:	00001650 	cmplti	zero,zero,89
     c24:	00001650 	cmplti	zero,zero,89
     c28:	00001650 	cmplti	zero,zero,89
     c2c:	00001650 	cmplti	zero,zero,89
     c30:	00001650 	cmplti	zero,zero,89
     c34:	00001650 	cmplti	zero,zero,89
     c38:	00001650 	cmplti	zero,zero,89
     c3c:	00001650 	cmplti	zero,zero,89
     c40:	000014c4 	movi	zero,83
     c44:	00001374 	movhi	zero,77
     c48:	00001278 	rdprs	zero,zero,73
     c4c:	00001278 	rdprs	zero,zero,73
     c50:	00001278 	rdprs	zero,zero,73
     c54:	000013b4 	movhi	zero,78
     c58:	00001374 	movhi	zero,77
     c5c:	00001650 	cmplti	zero,zero,89
     c60:	00001650 	cmplti	zero,zero,89
     c64:	000013c4 	movi	zero,79
     c68:	00001650 	cmplti	zero,zero,89
     c6c:	000013d8 	cmpnei	zero,zero,79
     c70:	00001614 	movui	zero,88
     c74:	0000131c 	xori	zero,zero,76
     c78:	000015c8 	cmpgei	zero,zero,87
     c7c:	00001650 	cmplti	zero,zero,89
     c80:	00001504 	movi	zero,84
     c84:	00001650 	cmplti	zero,zero,89
     c88:	000015d8 	cmpnei	zero,zero,87
     c8c:	00001650 	cmplti	zero,zero,89
     c90:	00001650 	cmplti	zero,zero,89
     c94:	00001578 	rdprs	zero,zero,85
     c98:	db002a17 	ldw	r12,168(sp)
     c9c:	8323c83a 	sub	r17,r16,r12
     ca0:	003f7e06 	br	a9c <__alt_mem_onchip_memory2_0+0xfbfe0a9c>
     ca4:	b009883a 	mov	r4,r22
     ca8:	b80b883a 	mov	r5,r23
     cac:	00029ac0 	call	29ac <__swsetup_r>
     cb0:	10000c1e 	bne	r2,zero,ce4 <___vfprintf_internal_r+0x368>
     cb4:	b880030b 	ldhu	r2,12(r23)
     cb8:	00c00284 	movi	r3,10
     cbc:	1080068c 	andi	r2,r2,26
     cc0:	10ff561e 	bne	r2,r3,a1c <__alt_mem_onchip_memory2_0+0xfbfe0a1c>
     cc4:	b880038f 	ldh	r2,14(r23)
     cc8:	103f5416 	blt	r2,zero,a1c <__alt_mem_onchip_memory2_0+0xfbfe0a1c>
     ccc:	d9802a17 	ldw	r6,168(sp)
     cd0:	d9c02d17 	ldw	r7,180(sp)
     cd4:	b009883a 	mov	r4,r22
     cd8:	b80b883a 	mov	r5,r23
     cdc:	00028f00 	call	28f0 <__sbprintf>
     ce0:	00000106 	br	ce8 <___vfprintf_internal_r+0x36c>
     ce4:	00bfffc4 	movi	r2,-1
     ce8:	dfc04917 	ldw	ra,292(sp)
     cec:	df004817 	ldw	fp,288(sp)
     cf0:	ddc04717 	ldw	r23,284(sp)
     cf4:	dd804617 	ldw	r22,280(sp)
     cf8:	dd404517 	ldw	r21,276(sp)
     cfc:	dd004417 	ldw	r20,272(sp)
     d00:	dcc04317 	ldw	r19,268(sp)
     d04:	dc804217 	ldw	r18,264(sp)
     d08:	dc404117 	ldw	r17,260(sp)
     d0c:	dc004017 	ldw	r16,256(sp)
     d10:	dec04a04 	addi	sp,sp,296
     d14:	f800283a 	ret
     d18:	b009883a 	mov	r4,r22
     d1c:	b80b883a 	mov	r5,r23
     d20:	d9801e04 	addi	r6,sp,120
     d24:	0007b540 	call	7b54 <__sprint_r>
     d28:	1000081e 	bne	r2,zero,d4c <___vfprintf_internal_r+0x3d0>
     d2c:	da000404 	addi	r8,sp,16
     d30:	003f6706 	br	ad0 <__alt_mem_onchip_memory2_0+0xfbfe0ad0>
     d34:	d8802017 	ldw	r2,128(sp)
     d38:	10000426 	beq	r2,zero,d4c <___vfprintf_internal_r+0x3d0>
     d3c:	b009883a 	mov	r4,r22
     d40:	b80b883a 	mov	r5,r23
     d44:	d9801e04 	addi	r6,sp,120
     d48:	0007b540 	call	7b54 <__sprint_r>
     d4c:	b880030b 	ldhu	r2,12(r23)
     d50:	1080100c 	andi	r2,r2,64
     d54:	103fe31e 	bne	r2,zero,ce4 <__alt_mem_onchip_memory2_0+0xfbfe0ce4>
     d58:	d8802f17 	ldw	r2,188(sp)
     d5c:	003fe206 	br	ce8 <__alt_mem_onchip_memory2_0+0xfbfe0ce8>
     d60:	b009883a 	mov	r4,r22
     d64:	0004a0c0 	call	4a0c <__sinit>
     d68:	003f1c06 	br	9dc <__alt_mem_onchip_memory2_0+0xfbfe09dc>
     d6c:	dc002a17 	ldw	r16,168(sp)
     d70:	003f5a06 	br	adc <__alt_mem_onchip_memory2_0+0xfbfe0adc>
     d74:	1805883a 	mov	r2,r3
     d78:	8c400114 	ori	r17,r17,4
     d7c:	1c000007 	ldb	r16,0(r3)
     d80:	003f6306 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
     d84:	1c000007 	ldb	r16,0(r3)
     d88:	18800044 	addi	r2,r3,1
     d8c:	8286ad26 	beq	r16,r10,2844 <___vfprintf_internal_r+0x1ec8>
     d90:	82fff404 	addi	r11,r16,-48
     d94:	1007883a 	mov	r3,r2
     d98:	0013883a 	mov	r9,zero
     d9c:	2aff5d36 	bltu	r5,r11,b14 <__alt_mem_onchip_memory2_0+0xfbfe0b14>
     da0:	1c000007 	ldb	r16,0(r3)
     da4:	4a4002a4 	muli	r9,r9,10
     da8:	18c00044 	addi	r3,r3,1
     dac:	5a53883a 	add	r9,r11,r9
     db0:	82fff404 	addi	r11,r16,-48
     db4:	2afffa2e 	bgeu	r5,r11,da0 <__alt_mem_onchip_memory2_0+0xfbfe0da0>
     db8:	483f560e 	bge	r9,zero,b14 <__alt_mem_onchip_memory2_0+0xfbfe0b14>
     dbc:	027fffc4 	movi	r9,-1
     dc0:	003f5406 	br	b14 <__alt_mem_onchip_memory2_0+0xfbfe0b14>
     dc4:	8c402014 	ori	r17,r17,128
     dc8:	1805883a 	mov	r2,r3
     dcc:	1c000007 	ldb	r16,0(r3)
     dd0:	003f4f06 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
     dd4:	1805883a 	mov	r2,r3
     dd8:	d8002e15 	stw	zero,184(sp)
     ddc:	82fff404 	addi	r11,r16,-48
     de0:	0019883a 	mov	r12,zero
     de4:	14000007 	ldb	r16,0(r2)
     de8:	630002a4 	muli	r12,r12,10
     dec:	18c00044 	addi	r3,r3,1
     df0:	1805883a 	mov	r2,r3
     df4:	62d9883a 	add	r12,r12,r11
     df8:	82fff404 	addi	r11,r16,-48
     dfc:	2afff92e 	bgeu	r5,r11,de4 <__alt_mem_onchip_memory2_0+0xfbfe0de4>
     e00:	db002e15 	stw	r12,184(sp)
     e04:	003f4306 	br	b14 <__alt_mem_onchip_memory2_0+0xfbfe0b14>
     e08:	8c400414 	ori	r17,r17,16
     e0c:	d8c02a15 	stw	r3,168(sp)
     e10:	d9802785 	stb	r6,158(sp)
     e14:	8880080c 	andi	r2,r17,32
     e18:	d8c02d17 	ldw	r3,180(sp)
     e1c:	10015a26 	beq	r2,zero,1388 <___vfprintf_internal_r+0xa0c>
     e20:	db002d17 	ldw	r12,180(sp)
     e24:	18800117 	ldw	r2,4(r3)
     e28:	1cc00017 	ldw	r19,0(r3)
     e2c:	63000204 	addi	r12,r12,8
     e30:	db002d15 	stw	r12,180(sp)
     e34:	1039883a 	mov	fp,r2
     e38:	10044516 	blt	r2,zero,1f50 <___vfprintf_internal_r+0x15d4>
     e3c:	dd402783 	ldbu	r21,158(sp)
     e40:	da403215 	stw	r9,200(sp)
     e44:	00800044 	movi	r2,1
     e48:	9f06b03a 	or	r3,r19,fp
     e4c:	48000216 	blt	r9,zero,e58 <___vfprintf_internal_r+0x4dc>
     e50:	013fdfc4 	movi	r4,-129
     e54:	8922703a 	and	r17,r17,r4
     e58:	1802071e 	bne	r3,zero,1678 <___vfprintf_internal_r+0xcfc>
     e5c:	4802fa26 	beq	r9,zero,1a48 <___vfprintf_internal_r+0x10cc>
     e60:	10803fcc 	andi	r2,r2,255
     e64:	00c00044 	movi	r3,1
     e68:	10c22926 	beq	r2,r3,1710 <___vfprintf_internal_r+0xd94>
     e6c:	00c00084 	movi	r3,2
     e70:	10c31726 	beq	r2,r3,1ad0 <___vfprintf_internal_r+0x1154>
     e74:	d8c01e04 	addi	r3,sp,120
     e78:	9808d0fa 	srli	r4,r19,3
     e7c:	e00a977a 	slli	r5,fp,29
     e80:	e038d0fa 	srli	fp,fp,3
     e84:	9cc001cc 	andi	r19,r19,7
     e88:	98800c04 	addi	r2,r19,48
     e8c:	18ffffc4 	addi	r3,r3,-1
     e90:	2926b03a 	or	r19,r5,r4
     e94:	18800005 	stb	r2,0(r3)
     e98:	9f08b03a 	or	r4,r19,fp
     e9c:	203ff61e 	bne	r4,zero,e78 <__alt_mem_onchip_memory2_0+0xfbfe0e78>
     ea0:	8900004c 	andi	r4,r17,1
     ea4:	d8c03115 	stw	r3,196(sp)
     ea8:	2003931e 	bne	r4,zero,1cf8 <___vfprintf_internal_r+0x137c>
     eac:	dac02817 	ldw	r11,160(sp)
     eb0:	58e5c83a 	sub	r18,r11,r3
     eb4:	9005883a 	mov	r2,r18
     eb8:	9240010e 	bge	r18,r9,ec0 <___vfprintf_internal_r+0x544>
     ebc:	4805883a 	mov	r2,r9
     ec0:	d8802b15 	stw	r2,172(sp)
     ec4:	d8003415 	stw	zero,208(sp)
     ec8:	a8803fcc 	andi	r2,r21,255
     ecc:	1080201c 	xori	r2,r2,128
     ed0:	10bfe004 	addi	r2,r2,-128
     ed4:	10000326 	beq	r2,zero,ee4 <___vfprintf_internal_r+0x568>
     ed8:	db002b17 	ldw	r12,172(sp)
     edc:	63000044 	addi	r12,r12,1
     ee0:	db002b15 	stw	r12,172(sp)
     ee4:	88c0008c 	andi	r3,r17,2
     ee8:	d8c02c15 	stw	r3,176(sp)
     eec:	18000326 	beq	r3,zero,efc <___vfprintf_internal_r+0x580>
     ef0:	dac02b17 	ldw	r11,172(sp)
     ef4:	5ac00084 	addi	r11,r11,2
     ef8:	dac02b15 	stw	r11,172(sp)
     efc:	8b00210c 	andi	r12,r17,132
     f00:	db003015 	stw	r12,192(sp)
     f04:	6001da1e 	bne	r12,zero,1670 <___vfprintf_internal_r+0xcf4>
     f08:	dac02e17 	ldw	r11,184(sp)
     f0c:	db002b17 	ldw	r12,172(sp)
     f10:	5b39c83a 	sub	fp,r11,r12
     f14:	0701d60e 	bge	zero,fp,1670 <___vfprintf_internal_r+0xcf4>
     f18:	02400404 	movi	r9,16
     f1c:	d8c02017 	ldw	r3,128(sp)
     f20:	d8801f17 	ldw	r2,124(sp)
     f24:	4f053c0e 	bge	r9,fp,2418 <___vfprintf_internal_r+0x1a9c>
     f28:	01400074 	movhi	r5,1
     f2c:	297fb284 	addi	r5,r5,-310
     f30:	d9403615 	stw	r5,216(sp)
     f34:	482b883a 	mov	r21,r9
     f38:	04c001c4 	movi	r19,7
     f3c:	00000306 	br	f4c <___vfprintf_internal_r+0x5d0>
     f40:	e73ffc04 	addi	fp,fp,-16
     f44:	42000204 	addi	r8,r8,8
     f48:	af00130e 	bge	r21,fp,f98 <___vfprintf_internal_r+0x61c>
     f4c:	02c00074 	movhi	r11,1
     f50:	18c00404 	addi	r3,r3,16
     f54:	10800044 	addi	r2,r2,1
     f58:	5affb284 	addi	r11,r11,-310
     f5c:	42c00015 	stw	r11,0(r8)
     f60:	45400115 	stw	r21,4(r8)
     f64:	d8c02015 	stw	r3,128(sp)
     f68:	d8801f15 	stw	r2,124(sp)
     f6c:	98bff40e 	bge	r19,r2,f40 <__alt_mem_onchip_memory2_0+0xfbfe0f40>
     f70:	b009883a 	mov	r4,r22
     f74:	b80b883a 	mov	r5,r23
     f78:	d9801e04 	addi	r6,sp,120
     f7c:	0007b540 	call	7b54 <__sprint_r>
     f80:	103f721e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
     f84:	e73ffc04 	addi	fp,fp,-16
     f88:	d8c02017 	ldw	r3,128(sp)
     f8c:	d8801f17 	ldw	r2,124(sp)
     f90:	da000404 	addi	r8,sp,16
     f94:	af3fed16 	blt	r21,fp,f4c <__alt_mem_onchip_memory2_0+0xfbfe0f4c>
     f98:	db003617 	ldw	r12,216(sp)
     f9c:	e0c7883a 	add	r3,fp,r3
     fa0:	10800044 	addi	r2,r2,1
     fa4:	43000015 	stw	r12,0(r8)
     fa8:	47000115 	stw	fp,4(r8)
     fac:	d8c02015 	stw	r3,128(sp)
     fb0:	d8801f15 	stw	r2,124(sp)
     fb4:	010001c4 	movi	r4,7
     fb8:	20830e16 	blt	r4,r2,1bf4 <___vfprintf_internal_r+0x1278>
     fbc:	d8802787 	ldb	r2,158(sp)
     fc0:	42000204 	addi	r8,r8,8
     fc4:	10000c26 	beq	r2,zero,ff8 <___vfprintf_internal_r+0x67c>
     fc8:	d8801f17 	ldw	r2,124(sp)
     fcc:	d9002784 	addi	r4,sp,158
     fd0:	18c00044 	addi	r3,r3,1
     fd4:	10800044 	addi	r2,r2,1
     fd8:	41000015 	stw	r4,0(r8)
     fdc:	01000044 	movi	r4,1
     fe0:	41000115 	stw	r4,4(r8)
     fe4:	d8c02015 	stw	r3,128(sp)
     fe8:	d8801f15 	stw	r2,124(sp)
     fec:	010001c4 	movi	r4,7
     ff0:	2082a716 	blt	r4,r2,1a90 <___vfprintf_internal_r+0x1114>
     ff4:	42000204 	addi	r8,r8,8
     ff8:	dac02c17 	ldw	r11,176(sp)
     ffc:	58000c26 	beq	r11,zero,1030 <___vfprintf_internal_r+0x6b4>
    1000:	d8801f17 	ldw	r2,124(sp)
    1004:	d9002704 	addi	r4,sp,156
    1008:	18c00084 	addi	r3,r3,2
    100c:	10800044 	addi	r2,r2,1
    1010:	41000015 	stw	r4,0(r8)
    1014:	01000084 	movi	r4,2
    1018:	41000115 	stw	r4,4(r8)
    101c:	d8c02015 	stw	r3,128(sp)
    1020:	d8801f15 	stw	r2,124(sp)
    1024:	010001c4 	movi	r4,7
    1028:	2082a116 	blt	r4,r2,1ab0 <___vfprintf_internal_r+0x1134>
    102c:	42000204 	addi	r8,r8,8
    1030:	db003017 	ldw	r12,192(sp)
    1034:	00802004 	movi	r2,128
    1038:	60820326 	beq	r12,r2,1848 <___vfprintf_internal_r+0xecc>
    103c:	db003217 	ldw	r12,200(sp)
    1040:	64abc83a 	sub	r21,r12,r18
    1044:	0540260e 	bge	zero,r21,10e0 <___vfprintf_internal_r+0x764>
    1048:	07000404 	movi	fp,16
    104c:	d8801f17 	ldw	r2,124(sp)
    1050:	e544570e 	bge	fp,r21,21b0 <___vfprintf_internal_r+0x1834>
    1054:	01400074 	movhi	r5,1
    1058:	297fae84 	addi	r5,r5,-326
    105c:	d9402c15 	stw	r5,176(sp)
    1060:	04c001c4 	movi	r19,7
    1064:	00000306 	br	1074 <___vfprintf_internal_r+0x6f8>
    1068:	ad7ffc04 	addi	r21,r21,-16
    106c:	42000204 	addi	r8,r8,8
    1070:	e540110e 	bge	fp,r21,10b8 <___vfprintf_internal_r+0x73c>
    1074:	18c00404 	addi	r3,r3,16
    1078:	10800044 	addi	r2,r2,1
    107c:	45000015 	stw	r20,0(r8)
    1080:	47000115 	stw	fp,4(r8)
    1084:	d8c02015 	stw	r3,128(sp)
    1088:	d8801f15 	stw	r2,124(sp)
    108c:	98bff60e 	bge	r19,r2,1068 <__alt_mem_onchip_memory2_0+0xfbfe1068>
    1090:	b009883a 	mov	r4,r22
    1094:	b80b883a 	mov	r5,r23
    1098:	d9801e04 	addi	r6,sp,120
    109c:	0007b540 	call	7b54 <__sprint_r>
    10a0:	103f2a1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    10a4:	ad7ffc04 	addi	r21,r21,-16
    10a8:	d8c02017 	ldw	r3,128(sp)
    10ac:	d8801f17 	ldw	r2,124(sp)
    10b0:	da000404 	addi	r8,sp,16
    10b4:	e57fef16 	blt	fp,r21,1074 <__alt_mem_onchip_memory2_0+0xfbfe1074>
    10b8:	dac02c17 	ldw	r11,176(sp)
    10bc:	1d47883a 	add	r3,r3,r21
    10c0:	10800044 	addi	r2,r2,1
    10c4:	42c00015 	stw	r11,0(r8)
    10c8:	45400115 	stw	r21,4(r8)
    10cc:	d8c02015 	stw	r3,128(sp)
    10d0:	d8801f15 	stw	r2,124(sp)
    10d4:	010001c4 	movi	r4,7
    10d8:	20826516 	blt	r4,r2,1a70 <___vfprintf_internal_r+0x10f4>
    10dc:	42000204 	addi	r8,r8,8
    10e0:	8880400c 	andi	r2,r17,256
    10e4:	1001901e 	bne	r2,zero,1728 <___vfprintf_internal_r+0xdac>
    10e8:	d8801f17 	ldw	r2,124(sp)
    10ec:	db003117 	ldw	r12,196(sp)
    10f0:	1c87883a 	add	r3,r3,r18
    10f4:	10800044 	addi	r2,r2,1
    10f8:	43000015 	stw	r12,0(r8)
    10fc:	44800115 	stw	r18,4(r8)
    1100:	d8c02015 	stw	r3,128(sp)
    1104:	d8801f15 	stw	r2,124(sp)
    1108:	010001c4 	movi	r4,7
    110c:	20824016 	blt	r4,r2,1a10 <___vfprintf_internal_r+0x1094>
    1110:	42000204 	addi	r8,r8,8
    1114:	8c40010c 	andi	r17,r17,4
    1118:	88003126 	beq	r17,zero,11e0 <___vfprintf_internal_r+0x864>
    111c:	db002e17 	ldw	r12,184(sp)
    1120:	dac02b17 	ldw	r11,172(sp)
    1124:	62e1c83a 	sub	r16,r12,r11
    1128:	04002d0e 	bge	zero,r16,11e0 <___vfprintf_internal_r+0x864>
    112c:	04400404 	movi	r17,16
    1130:	d8801f17 	ldw	r2,124(sp)
    1134:	8c05150e 	bge	r17,r16,258c <___vfprintf_internal_r+0x1c10>
    1138:	01000074 	movhi	r4,1
    113c:	213fb284 	addi	r4,r4,-310
    1140:	d9003615 	stw	r4,216(sp)
    1144:	048001c4 	movi	r18,7
    1148:	00000306 	br	1158 <___vfprintf_internal_r+0x7dc>
    114c:	843ffc04 	addi	r16,r16,-16
    1150:	42000204 	addi	r8,r8,8
    1154:	8c00130e 	bge	r17,r16,11a4 <___vfprintf_internal_r+0x828>
    1158:	01400074 	movhi	r5,1
    115c:	18c00404 	addi	r3,r3,16
    1160:	10800044 	addi	r2,r2,1
    1164:	297fb284 	addi	r5,r5,-310
    1168:	41400015 	stw	r5,0(r8)
    116c:	44400115 	stw	r17,4(r8)
    1170:	d8c02015 	stw	r3,128(sp)
    1174:	d8801f15 	stw	r2,124(sp)
    1178:	90bff40e 	bge	r18,r2,114c <__alt_mem_onchip_memory2_0+0xfbfe114c>
    117c:	b009883a 	mov	r4,r22
    1180:	b80b883a 	mov	r5,r23
    1184:	d9801e04 	addi	r6,sp,120
    1188:	0007b540 	call	7b54 <__sprint_r>
    118c:	103eef1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1190:	843ffc04 	addi	r16,r16,-16
    1194:	d8c02017 	ldw	r3,128(sp)
    1198:	d8801f17 	ldw	r2,124(sp)
    119c:	da000404 	addi	r8,sp,16
    11a0:	8c3fed16 	blt	r17,r16,1158 <__alt_mem_onchip_memory2_0+0xfbfe1158>
    11a4:	dac03617 	ldw	r11,216(sp)
    11a8:	1c07883a 	add	r3,r3,r16
    11ac:	10800044 	addi	r2,r2,1
    11b0:	42c00015 	stw	r11,0(r8)
    11b4:	44000115 	stw	r16,4(r8)
    11b8:	d8c02015 	stw	r3,128(sp)
    11bc:	d8801f15 	stw	r2,124(sp)
    11c0:	010001c4 	movi	r4,7
    11c4:	2080060e 	bge	r4,r2,11e0 <___vfprintf_internal_r+0x864>
    11c8:	b009883a 	mov	r4,r22
    11cc:	b80b883a 	mov	r5,r23
    11d0:	d9801e04 	addi	r6,sp,120
    11d4:	0007b540 	call	7b54 <__sprint_r>
    11d8:	103edc1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    11dc:	d8c02017 	ldw	r3,128(sp)
    11e0:	d8802b17 	ldw	r2,172(sp)
    11e4:	db002e17 	ldw	r12,184(sp)
    11e8:	1300010e 	bge	r2,r12,11f0 <___vfprintf_internal_r+0x874>
    11ec:	6005883a 	mov	r2,r12
    11f0:	dac02f17 	ldw	r11,188(sp)
    11f4:	5897883a 	add	r11,r11,r2
    11f8:	dac02f15 	stw	r11,188(sp)
    11fc:	18020c1e 	bne	r3,zero,1a30 <___vfprintf_internal_r+0x10b4>
    1200:	d8001f15 	stw	zero,124(sp)
    1204:	da000404 	addi	r8,sp,16
    1208:	003e1706 	br	a68 <__alt_mem_onchip_memory2_0+0xfbfe0a68>
    120c:	8c400414 	ori	r17,r17,16
    1210:	d8c02a15 	stw	r3,168(sp)
    1214:	8880080c 	andi	r2,r17,32
    1218:	10010126 	beq	r2,zero,1620 <___vfprintf_internal_r+0xca4>
    121c:	db002d17 	ldw	r12,180(sp)
    1220:	0005883a 	mov	r2,zero
    1224:	64c00017 	ldw	r19,0(r12)
    1228:	67000117 	ldw	fp,4(r12)
    122c:	63000204 	addi	r12,r12,8
    1230:	db002d15 	stw	r12,180(sp)
    1234:	9f06b03a 	or	r3,r19,fp
    1238:	d8002785 	stb	zero,158(sp)
    123c:	da403215 	stw	r9,200(sp)
    1240:	002b883a 	mov	r21,zero
    1244:	003f0106 	br	e4c <__alt_mem_onchip_memory2_0+0xfbfe0e4c>
    1248:	8c400414 	ori	r17,r17,16
    124c:	d8c02a15 	stw	r3,168(sp)
    1250:	8880080c 	andi	r2,r17,32
    1254:	1000e326 	beq	r2,zero,15e4 <___vfprintf_internal_r+0xc68>
    1258:	dac02d17 	ldw	r11,180(sp)
    125c:	00800044 	movi	r2,1
    1260:	5cc00017 	ldw	r19,0(r11)
    1264:	5f000117 	ldw	fp,4(r11)
    1268:	5ac00204 	addi	r11,r11,8
    126c:	dac02d15 	stw	r11,180(sp)
    1270:	9f06b03a 	or	r3,r19,fp
    1274:	003ff006 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1278:	db002d17 	ldw	r12,180(sp)
    127c:	dac02d17 	ldw	r11,180(sp)
    1280:	d8c02a15 	stw	r3,168(sp)
    1284:	63000017 	ldw	r12,0(r12)
    1288:	5ac00117 	ldw	r11,4(r11)
    128c:	d9802785 	stb	r6,158(sp)
    1290:	6009883a 	mov	r4,r12
    1294:	580b883a 	mov	r5,r11
    1298:	db003715 	stw	r12,220(sp)
    129c:	da003f15 	stw	r8,252(sp)
    12a0:	da403e15 	stw	r9,248(sp)
    12a4:	dac03915 	stw	r11,228(sp)
    12a8:	00077b00 	call	77b0 <__fpclassifyd>
    12ac:	db002d17 	ldw	r12,180(sp)
    12b0:	04800044 	movi	r18,1
    12b4:	da003f17 	ldw	r8,252(sp)
    12b8:	64c00204 	addi	r19,r12,8
    12bc:	da403e17 	ldw	r9,248(sp)
    12c0:	d9003717 	ldw	r4,220(sp)
    12c4:	d9403917 	ldw	r5,228(sp)
    12c8:	14832b1e 	bne	r2,r18,1f78 <___vfprintf_internal_r+0x15fc>
    12cc:	000d883a 	mov	r6,zero
    12d0:	000f883a 	mov	r7,zero
    12d4:	000b75c0 	call	b75c <__ledf2>
    12d8:	da003f17 	ldw	r8,252(sp)
    12dc:	1004b716 	blt	r2,zero,25bc <___vfprintf_internal_r+0x1c40>
    12e0:	dd402783 	ldbu	r21,158(sp)
    12e4:	008011c4 	movi	r2,71
    12e8:	14040e0e 	bge	r2,r16,2324 <___vfprintf_internal_r+0x19a8>
    12ec:	00c00074 	movhi	r3,1
    12f0:	18ff9f04 	addi	r3,r3,-388
    12f4:	d8c03115 	stw	r3,196(sp)
    12f8:	02c000c4 	movi	r11,3
    12fc:	00bfdfc4 	movi	r2,-129
    1300:	dac02b15 	stw	r11,172(sp)
    1304:	88a2703a 	and	r17,r17,r2
    1308:	dcc02d15 	stw	r19,180(sp)
    130c:	5825883a 	mov	r18,r11
    1310:	d8003215 	stw	zero,200(sp)
    1314:	d8003415 	stw	zero,208(sp)
    1318:	003eeb06 	br	ec8 <__alt_mem_onchip_memory2_0+0xfbfe0ec8>
    131c:	db002d17 	ldw	r12,180(sp)
    1320:	00800c04 	movi	r2,48
    1324:	d8802705 	stb	r2,156(sp)
    1328:	64c00017 	ldw	r19,0(r12)
    132c:	00801e04 	movi	r2,120
    1330:	d8802745 	stb	r2,157(sp)
    1334:	00800074 	movhi	r2,1
    1338:	10bfa704 	addi	r2,r2,-356
    133c:	63000104 	addi	r12,r12,4
    1340:	d8c02a15 	stw	r3,168(sp)
    1344:	d8803b15 	stw	r2,236(sp)
    1348:	0039883a 	mov	fp,zero
    134c:	8c400094 	ori	r17,r17,2
    1350:	db002d15 	stw	r12,180(sp)
    1354:	00800084 	movi	r2,2
    1358:	04001e04 	movi	r16,120
    135c:	9807883a 	mov	r3,r19
    1360:	003fb506 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1364:	8c400214 	ori	r17,r17,8
    1368:	1805883a 	mov	r2,r3
    136c:	1c000007 	ldb	r16,0(r3)
    1370:	003de706 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    1374:	d8c02a15 	stw	r3,168(sp)
    1378:	d9802785 	stb	r6,158(sp)
    137c:	8880080c 	andi	r2,r17,32
    1380:	d8c02d17 	ldw	r3,180(sp)
    1384:	103ea61e 	bne	r2,zero,e20 <__alt_mem_onchip_memory2_0+0xfbfe0e20>
    1388:	8880040c 	andi	r2,r17,16
    138c:	1002221e 	bne	r2,zero,1c18 <___vfprintf_internal_r+0x129c>
    1390:	8880100c 	andi	r2,r17,64
    1394:	10022026 	beq	r2,zero,1c18 <___vfprintf_internal_r+0x129c>
    1398:	1cc0000f 	ldh	r19,0(r3)
    139c:	db002d17 	ldw	r12,180(sp)
    13a0:	9839d7fa 	srai	fp,r19,31
    13a4:	63000104 	addi	r12,r12,4
    13a8:	db002d15 	stw	r12,180(sp)
    13ac:	e005883a 	mov	r2,fp
    13b0:	003ea106 	br	e38 <__alt_mem_onchip_memory2_0+0xfbfe0e38>
    13b4:	8c401014 	ori	r17,r17,64
    13b8:	1805883a 	mov	r2,r3
    13bc:	1c000007 	ldb	r16,0(r3)
    13c0:	003dd306 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    13c4:	1c000007 	ldb	r16,0(r3)
    13c8:	81c3e926 	beq	r16,r7,2370 <___vfprintf_internal_r+0x19f4>
    13cc:	8c400414 	ori	r17,r17,16
    13d0:	1805883a 	mov	r2,r3
    13d4:	003dce06 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    13d8:	d8c02a15 	stw	r3,168(sp)
    13dc:	d9802785 	stb	r6,158(sp)
    13e0:	8880080c 	andi	r2,r17,32
    13e4:	10034726 	beq	r2,zero,2104 <___vfprintf_internal_r+0x1788>
    13e8:	db002d17 	ldw	r12,180(sp)
    13ec:	dac02f17 	ldw	r11,188(sp)
    13f0:	60800017 	ldw	r2,0(r12)
    13f4:	5807d7fa 	srai	r3,r11,31
    13f8:	63000104 	addi	r12,r12,4
    13fc:	db002d15 	stw	r12,180(sp)
    1400:	12c00015 	stw	r11,0(r2)
    1404:	10c00115 	stw	r3,4(r2)
    1408:	003d9706 	br	a68 <__alt_mem_onchip_memory2_0+0xfbfe0a68>
    140c:	03000074 	movhi	r12,1
    1410:	633fa204 	addi	r12,r12,-376
    1414:	d8c02a15 	stw	r3,168(sp)
    1418:	d9802785 	stb	r6,158(sp)
    141c:	db003b15 	stw	r12,236(sp)
    1420:	88c0080c 	andi	r3,r17,32
    1424:	d8802d17 	ldw	r2,180(sp)
    1428:	18005b26 	beq	r3,zero,1598 <___vfprintf_internal_r+0xc1c>
    142c:	dac02d17 	ldw	r11,180(sp)
    1430:	14c00017 	ldw	r19,0(r2)
    1434:	17000117 	ldw	fp,4(r2)
    1438:	5ac00204 	addi	r11,r11,8
    143c:	dac02d15 	stw	r11,180(sp)
    1440:	8880004c 	andi	r2,r17,1
    1444:	10022926 	beq	r2,zero,1cec <___vfprintf_internal_r+0x1370>
    1448:	9f06b03a 	or	r3,r19,fp
    144c:	18032b26 	beq	r3,zero,20fc <___vfprintf_internal_r+0x1780>
    1450:	00800c04 	movi	r2,48
    1454:	d8802705 	stb	r2,156(sp)
    1458:	dc002745 	stb	r16,157(sp)
    145c:	8c400094 	ori	r17,r17,2
    1460:	00800084 	movi	r2,2
    1464:	003f7406 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1468:	30803fcc 	andi	r2,r6,255
    146c:	1080201c 	xori	r2,r2,128
    1470:	10bfe004 	addi	r2,r2,-128
    1474:	1003351e 	bne	r2,zero,214c <___vfprintf_internal_r+0x17d0>
    1478:	1805883a 	mov	r2,r3
    147c:	01800804 	movi	r6,32
    1480:	1c000007 	ldb	r16,0(r3)
    1484:	003da206 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    1488:	dac02d17 	ldw	r11,180(sp)
    148c:	db002d17 	ldw	r12,180(sp)
    1490:	5ac00017 	ldw	r11,0(r11)
    1494:	dac02e15 	stw	r11,184(sp)
    1498:	62c00104 	addi	r11,r12,4
    149c:	db002e17 	ldw	r12,184(sp)
    14a0:	6003ad16 	blt	r12,zero,2358 <___vfprintf_internal_r+0x19dc>
    14a4:	dac02d15 	stw	r11,180(sp)
    14a8:	1805883a 	mov	r2,r3
    14ac:	1c000007 	ldb	r16,0(r3)
    14b0:	003d9706 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    14b4:	1805883a 	mov	r2,r3
    14b8:	01800ac4 	movi	r6,43
    14bc:	1c000007 	ldb	r16,0(r3)
    14c0:	003d9306 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    14c4:	db002d17 	ldw	r12,180(sp)
    14c8:	d8c02a15 	stw	r3,168(sp)
    14cc:	00c00044 	movi	r3,1
    14d0:	60800017 	ldw	r2,0(r12)
    14d4:	63000104 	addi	r12,r12,4
    14d8:	d8c02b15 	stw	r3,172(sp)
    14dc:	d8002785 	stb	zero,158(sp)
    14e0:	d8801405 	stb	r2,80(sp)
    14e4:	db002d15 	stw	r12,180(sp)
    14e8:	dac01404 	addi	r11,sp,80
    14ec:	1825883a 	mov	r18,r3
    14f0:	d8003215 	stw	zero,200(sp)
    14f4:	d8003415 	stw	zero,208(sp)
    14f8:	dac03115 	stw	r11,196(sp)
    14fc:	0005883a 	mov	r2,zero
    1500:	003e7806 	br	ee4 <__alt_mem_onchip_memory2_0+0xfbfe0ee4>
    1504:	dac02d17 	ldw	r11,180(sp)
    1508:	db002d17 	ldw	r12,180(sp)
    150c:	d8c02a15 	stw	r3,168(sp)
    1510:	5ac00017 	ldw	r11,0(r11)
    1514:	d8002785 	stb	zero,158(sp)
    1518:	64c00104 	addi	r19,r12,4
    151c:	dac03115 	stw	r11,196(sp)
    1520:	5803fe26 	beq	r11,zero,251c <___vfprintf_internal_r+0x1ba0>
    1524:	d9003117 	ldw	r4,196(sp)
    1528:	4803b416 	blt	r9,zero,23fc <___vfprintf_internal_r+0x1a80>
    152c:	480d883a 	mov	r6,r9
    1530:	000b883a 	mov	r5,zero
    1534:	da003f15 	stw	r8,252(sp)
    1538:	da403e15 	stw	r9,248(sp)
    153c:	0005ef80 	call	5ef8 <memchr>
    1540:	da003f17 	ldw	r8,252(sp)
    1544:	da403e17 	ldw	r9,248(sp)
    1548:	10043026 	beq	r2,zero,260c <___vfprintf_internal_r+0x1c90>
    154c:	d8c03117 	ldw	r3,196(sp)
    1550:	10e5c83a 	sub	r18,r2,r3
    1554:	4c836b16 	blt	r9,r18,2304 <___vfprintf_internal_r+0x1988>
    1558:	9005883a 	mov	r2,r18
    155c:	9003ac16 	blt	r18,zero,2410 <___vfprintf_internal_r+0x1a94>
    1560:	dd402783 	ldbu	r21,158(sp)
    1564:	d8802b15 	stw	r2,172(sp)
    1568:	dcc02d15 	stw	r19,180(sp)
    156c:	d8003215 	stw	zero,200(sp)
    1570:	d8003415 	stw	zero,208(sp)
    1574:	003e5406 	br	ec8 <__alt_mem_onchip_memory2_0+0xfbfe0ec8>
    1578:	00800074 	movhi	r2,1
    157c:	10bfa704 	addi	r2,r2,-356
    1580:	d8c02a15 	stw	r3,168(sp)
    1584:	d8803b15 	stw	r2,236(sp)
    1588:	d9802785 	stb	r6,158(sp)
    158c:	88c0080c 	andi	r3,r17,32
    1590:	d8802d17 	ldw	r2,180(sp)
    1594:	183fa51e 	bne	r3,zero,142c <__alt_mem_onchip_memory2_0+0xfbfe142c>
    1598:	88c0040c 	andi	r3,r17,16
    159c:	1802ee26 	beq	r3,zero,2158 <___vfprintf_internal_r+0x17dc>
    15a0:	db002d17 	ldw	r12,180(sp)
    15a4:	14c00017 	ldw	r19,0(r2)
    15a8:	0039883a 	mov	fp,zero
    15ac:	63000104 	addi	r12,r12,4
    15b0:	db002d15 	stw	r12,180(sp)
    15b4:	003fa206 	br	1440 <__alt_mem_onchip_memory2_0+0xfbfe1440>
    15b8:	8c400054 	ori	r17,r17,1
    15bc:	1805883a 	mov	r2,r3
    15c0:	1c000007 	ldb	r16,0(r3)
    15c4:	003d5206 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    15c8:	8c400814 	ori	r17,r17,32
    15cc:	1805883a 	mov	r2,r3
    15d0:	1c000007 	ldb	r16,0(r3)
    15d4:	003d4e06 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    15d8:	d8c02a15 	stw	r3,168(sp)
    15dc:	8880080c 	andi	r2,r17,32
    15e0:	103f1d1e 	bne	r2,zero,1258 <__alt_mem_onchip_memory2_0+0xfbfe1258>
    15e4:	8880040c 	andi	r2,r17,16
    15e8:	1001b81e 	bne	r2,zero,1ccc <___vfprintf_internal_r+0x1350>
    15ec:	8880100c 	andi	r2,r17,64
    15f0:	1001b626 	beq	r2,zero,1ccc <___vfprintf_internal_r+0x1350>
    15f4:	dac02d17 	ldw	r11,180(sp)
    15f8:	0039883a 	mov	fp,zero
    15fc:	00800044 	movi	r2,1
    1600:	5cc0000b 	ldhu	r19,0(r11)
    1604:	5ac00104 	addi	r11,r11,4
    1608:	dac02d15 	stw	r11,180(sp)
    160c:	9807883a 	mov	r3,r19
    1610:	003f0906 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1614:	d8c02a15 	stw	r3,168(sp)
    1618:	8880080c 	andi	r2,r17,32
    161c:	103eff1e 	bne	r2,zero,121c <__alt_mem_onchip_memory2_0+0xfbfe121c>
    1620:	8880040c 	andi	r2,r17,16
    1624:	1001a11e 	bne	r2,zero,1cac <___vfprintf_internal_r+0x1330>
    1628:	8880100c 	andi	r2,r17,64
    162c:	10019f26 	beq	r2,zero,1cac <___vfprintf_internal_r+0x1330>
    1630:	db002d17 	ldw	r12,180(sp)
    1634:	0039883a 	mov	fp,zero
    1638:	0005883a 	mov	r2,zero
    163c:	64c0000b 	ldhu	r19,0(r12)
    1640:	63000104 	addi	r12,r12,4
    1644:	db002d15 	stw	r12,180(sp)
    1648:	9807883a 	mov	r3,r19
    164c:	003efa06 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1650:	d8c02a15 	stw	r3,168(sp)
    1654:	d9802785 	stb	r6,158(sp)
    1658:	803db626 	beq	r16,zero,d34 <__alt_mem_onchip_memory2_0+0xfbfe0d34>
    165c:	00c00044 	movi	r3,1
    1660:	d8c02b15 	stw	r3,172(sp)
    1664:	dc001405 	stb	r16,80(sp)
    1668:	d8002785 	stb	zero,158(sp)
    166c:	003f9e06 	br	14e8 <__alt_mem_onchip_memory2_0+0xfbfe14e8>
    1670:	d8c02017 	ldw	r3,128(sp)
    1674:	003e5306 	br	fc4 <__alt_mem_onchip_memory2_0+0xfbfe0fc4>
    1678:	10803fcc 	andi	r2,r2,255
    167c:	00c00044 	movi	r3,1
    1680:	10fdfa1e 	bne	r2,r3,e6c <__alt_mem_onchip_memory2_0+0xfbfe0e6c>
    1684:	e000021e 	bne	fp,zero,1690 <___vfprintf_internal_r+0xd14>
    1688:	00800244 	movi	r2,9
    168c:	14c0202e 	bgeu	r2,r19,1710 <___vfprintf_internal_r+0xd94>
    1690:	dc002b15 	stw	r16,172(sp)
    1694:	dc402c15 	stw	r17,176(sp)
    1698:	9821883a 	mov	r16,r19
    169c:	e023883a 	mov	r17,fp
    16a0:	dc801e04 	addi	r18,sp,120
    16a4:	4827883a 	mov	r19,r9
    16a8:	4039883a 	mov	fp,r8
    16ac:	8009883a 	mov	r4,r16
    16b0:	880b883a 	mov	r5,r17
    16b4:	01800284 	movi	r6,10
    16b8:	000f883a 	mov	r7,zero
    16bc:	0009dd40 	call	9dd4 <__umoddi3>
    16c0:	10800c04 	addi	r2,r2,48
    16c4:	94bfffc4 	addi	r18,r18,-1
    16c8:	8009883a 	mov	r4,r16
    16cc:	880b883a 	mov	r5,r17
    16d0:	01800284 	movi	r6,10
    16d4:	000f883a 	mov	r7,zero
    16d8:	90800005 	stb	r2,0(r18)
    16dc:	00098140 	call	9814 <__udivdi3>
    16e0:	1021883a 	mov	r16,r2
    16e4:	10c4b03a 	or	r2,r2,r3
    16e8:	1823883a 	mov	r17,r3
    16ec:	103fef1e 	bne	r2,zero,16ac <__alt_mem_onchip_memory2_0+0xfbfe16ac>
    16f0:	dac02817 	ldw	r11,160(sp)
    16f4:	dc803115 	stw	r18,196(sp)
    16f8:	dc002b17 	ldw	r16,172(sp)
    16fc:	dc402c17 	ldw	r17,176(sp)
    1700:	9813883a 	mov	r9,r19
    1704:	e011883a 	mov	r8,fp
    1708:	5ca5c83a 	sub	r18,r11,r18
    170c:	003de906 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1710:	9cc00c04 	addi	r19,r19,48
    1714:	d8c01dc4 	addi	r3,sp,119
    1718:	dcc01dc5 	stb	r19,119(sp)
    171c:	dc803c17 	ldw	r18,240(sp)
    1720:	d8c03115 	stw	r3,196(sp)
    1724:	003de306 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1728:	00801944 	movi	r2,101
    172c:	1400710e 	bge	r2,r16,18f4 <___vfprintf_internal_r+0xf78>
    1730:	d9003717 	ldw	r4,220(sp)
    1734:	d9403917 	ldw	r5,228(sp)
    1738:	000d883a 	mov	r6,zero
    173c:	000f883a 	mov	r7,zero
    1740:	d8c03d15 	stw	r3,244(sp)
    1744:	da003f15 	stw	r8,252(sp)
    1748:	000b5f80 	call	b5f8 <__eqdf2>
    174c:	d8c03d17 	ldw	r3,244(sp)
    1750:	da003f17 	ldw	r8,252(sp)
    1754:	1000ef1e 	bne	r2,zero,1b14 <___vfprintf_internal_r+0x1198>
    1758:	d8801f17 	ldw	r2,124(sp)
    175c:	01000074 	movhi	r4,1
    1760:	213fae04 	addi	r4,r4,-328
    1764:	18c00044 	addi	r3,r3,1
    1768:	10800044 	addi	r2,r2,1
    176c:	41000015 	stw	r4,0(r8)
    1770:	01000044 	movi	r4,1
    1774:	41000115 	stw	r4,4(r8)
    1778:	d8c02015 	stw	r3,128(sp)
    177c:	d8801f15 	stw	r2,124(sp)
    1780:	010001c4 	movi	r4,7
    1784:	20828e16 	blt	r4,r2,21c0 <___vfprintf_internal_r+0x1844>
    1788:	42000204 	addi	r8,r8,8
    178c:	d8802617 	ldw	r2,152(sp)
    1790:	dac03317 	ldw	r11,204(sp)
    1794:	12c00216 	blt	r2,r11,17a0 <___vfprintf_internal_r+0xe24>
    1798:	8880004c 	andi	r2,r17,1
    179c:	103e5d26 	beq	r2,zero,1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    17a0:	db003817 	ldw	r12,224(sp)
    17a4:	d8801f17 	ldw	r2,124(sp)
    17a8:	dac03517 	ldw	r11,212(sp)
    17ac:	1b07883a 	add	r3,r3,r12
    17b0:	10800044 	addi	r2,r2,1
    17b4:	42c00015 	stw	r11,0(r8)
    17b8:	43000115 	stw	r12,4(r8)
    17bc:	d8c02015 	stw	r3,128(sp)
    17c0:	d8801f15 	stw	r2,124(sp)
    17c4:	010001c4 	movi	r4,7
    17c8:	2082ed16 	blt	r4,r2,2380 <___vfprintf_internal_r+0x1a04>
    17cc:	42000204 	addi	r8,r8,8
    17d0:	db003317 	ldw	r12,204(sp)
    17d4:	643fffc4 	addi	r16,r12,-1
    17d8:	043e4e0e 	bge	zero,r16,1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    17dc:	04800404 	movi	r18,16
    17e0:	d8801f17 	ldw	r2,124(sp)
    17e4:	94007e0e 	bge	r18,r16,19e0 <___vfprintf_internal_r+0x1064>
    17e8:	01400074 	movhi	r5,1
    17ec:	297fae84 	addi	r5,r5,-326
    17f0:	d9402c15 	stw	r5,176(sp)
    17f4:	054001c4 	movi	r21,7
    17f8:	00000306 	br	1808 <___vfprintf_internal_r+0xe8c>
    17fc:	42000204 	addi	r8,r8,8
    1800:	843ffc04 	addi	r16,r16,-16
    1804:	9400790e 	bge	r18,r16,19ec <___vfprintf_internal_r+0x1070>
    1808:	18c00404 	addi	r3,r3,16
    180c:	10800044 	addi	r2,r2,1
    1810:	45000015 	stw	r20,0(r8)
    1814:	44800115 	stw	r18,4(r8)
    1818:	d8c02015 	stw	r3,128(sp)
    181c:	d8801f15 	stw	r2,124(sp)
    1820:	a8bff60e 	bge	r21,r2,17fc <__alt_mem_onchip_memory2_0+0xfbfe17fc>
    1824:	b009883a 	mov	r4,r22
    1828:	b80b883a 	mov	r5,r23
    182c:	d9801e04 	addi	r6,sp,120
    1830:	0007b540 	call	7b54 <__sprint_r>
    1834:	103d451e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1838:	d8c02017 	ldw	r3,128(sp)
    183c:	d8801f17 	ldw	r2,124(sp)
    1840:	da000404 	addi	r8,sp,16
    1844:	003fee06 	br	1800 <__alt_mem_onchip_memory2_0+0xfbfe1800>
    1848:	dac02e17 	ldw	r11,184(sp)
    184c:	db002b17 	ldw	r12,172(sp)
    1850:	5b2bc83a 	sub	r21,r11,r12
    1854:	057df90e 	bge	zero,r21,103c <__alt_mem_onchip_memory2_0+0xfbfe103c>
    1858:	07000404 	movi	fp,16
    185c:	d8801f17 	ldw	r2,124(sp)
    1860:	e543640e 	bge	fp,r21,25f4 <___vfprintf_internal_r+0x1c78>
    1864:	01400074 	movhi	r5,1
    1868:	297fae84 	addi	r5,r5,-326
    186c:	d9402c15 	stw	r5,176(sp)
    1870:	04c001c4 	movi	r19,7
    1874:	00000306 	br	1884 <___vfprintf_internal_r+0xf08>
    1878:	ad7ffc04 	addi	r21,r21,-16
    187c:	42000204 	addi	r8,r8,8
    1880:	e540110e 	bge	fp,r21,18c8 <___vfprintf_internal_r+0xf4c>
    1884:	18c00404 	addi	r3,r3,16
    1888:	10800044 	addi	r2,r2,1
    188c:	45000015 	stw	r20,0(r8)
    1890:	47000115 	stw	fp,4(r8)
    1894:	d8c02015 	stw	r3,128(sp)
    1898:	d8801f15 	stw	r2,124(sp)
    189c:	98bff60e 	bge	r19,r2,1878 <__alt_mem_onchip_memory2_0+0xfbfe1878>
    18a0:	b009883a 	mov	r4,r22
    18a4:	b80b883a 	mov	r5,r23
    18a8:	d9801e04 	addi	r6,sp,120
    18ac:	0007b540 	call	7b54 <__sprint_r>
    18b0:	103d261e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    18b4:	ad7ffc04 	addi	r21,r21,-16
    18b8:	d8c02017 	ldw	r3,128(sp)
    18bc:	d8801f17 	ldw	r2,124(sp)
    18c0:	da000404 	addi	r8,sp,16
    18c4:	e57fef16 	blt	fp,r21,1884 <__alt_mem_onchip_memory2_0+0xfbfe1884>
    18c8:	dac02c17 	ldw	r11,176(sp)
    18cc:	1d47883a 	add	r3,r3,r21
    18d0:	10800044 	addi	r2,r2,1
    18d4:	42c00015 	stw	r11,0(r8)
    18d8:	45400115 	stw	r21,4(r8)
    18dc:	d8c02015 	stw	r3,128(sp)
    18e0:	d8801f15 	stw	r2,124(sp)
    18e4:	010001c4 	movi	r4,7
    18e8:	20819116 	blt	r4,r2,1f30 <___vfprintf_internal_r+0x15b4>
    18ec:	42000204 	addi	r8,r8,8
    18f0:	003dd206 	br	103c <__alt_mem_onchip_memory2_0+0xfbfe103c>
    18f4:	db003317 	ldw	r12,204(sp)
    18f8:	00800044 	movi	r2,1
    18fc:	18c00044 	addi	r3,r3,1
    1900:	1301530e 	bge	r2,r12,1e50 <___vfprintf_internal_r+0x14d4>
    1904:	dc001f17 	ldw	r16,124(sp)
    1908:	dac03117 	ldw	r11,196(sp)
    190c:	00800044 	movi	r2,1
    1910:	84000044 	addi	r16,r16,1
    1914:	40800115 	stw	r2,4(r8)
    1918:	42c00015 	stw	r11,0(r8)
    191c:	d8c02015 	stw	r3,128(sp)
    1920:	dc001f15 	stw	r16,124(sp)
    1924:	008001c4 	movi	r2,7
    1928:	14016b16 	blt	r2,r16,1ed8 <___vfprintf_internal_r+0x155c>
    192c:	42000204 	addi	r8,r8,8
    1930:	db003817 	ldw	r12,224(sp)
    1934:	dac03517 	ldw	r11,212(sp)
    1938:	84000044 	addi	r16,r16,1
    193c:	1b07883a 	add	r3,r3,r12
    1940:	42c00015 	stw	r11,0(r8)
    1944:	43000115 	stw	r12,4(r8)
    1948:	d8c02015 	stw	r3,128(sp)
    194c:	dc001f15 	stw	r16,124(sp)
    1950:	008001c4 	movi	r2,7
    1954:	14016916 	blt	r2,r16,1efc <___vfprintf_internal_r+0x1580>
    1958:	44800204 	addi	r18,r8,8
    195c:	d9003717 	ldw	r4,220(sp)
    1960:	d9403917 	ldw	r5,228(sp)
    1964:	000d883a 	mov	r6,zero
    1968:	000f883a 	mov	r7,zero
    196c:	d8c03d15 	stw	r3,244(sp)
    1970:	000b5f80 	call	b5f8 <__eqdf2>
    1974:	d8c03d17 	ldw	r3,244(sp)
    1978:	db003317 	ldw	r12,204(sp)
    197c:	1000ad26 	beq	r2,zero,1c34 <___vfprintf_internal_r+0x12b8>
    1980:	dac03117 	ldw	r11,196(sp)
    1984:	60bfffc4 	addi	r2,r12,-1
    1988:	1887883a 	add	r3,r3,r2
    198c:	59000044 	addi	r4,r11,1
    1990:	84000044 	addi	r16,r16,1
    1994:	90800115 	stw	r2,4(r18)
    1998:	91000015 	stw	r4,0(r18)
    199c:	d8c02015 	stw	r3,128(sp)
    19a0:	dc001f15 	stw	r16,124(sp)
    19a4:	008001c4 	movi	r2,7
    19a8:	14014216 	blt	r2,r16,1eb4 <___vfprintf_internal_r+0x1538>
    19ac:	94800204 	addi	r18,r18,8
    19b0:	dac03a17 	ldw	r11,232(sp)
    19b4:	dd4022c4 	addi	r21,sp,139
    19b8:	84000044 	addi	r16,r16,1
    19bc:	1ac7883a 	add	r3,r3,r11
    19c0:	95400015 	stw	r21,0(r18)
    19c4:	92c00115 	stw	r11,4(r18)
    19c8:	d8c02015 	stw	r3,128(sp)
    19cc:	dc001f15 	stw	r16,124(sp)
    19d0:	008001c4 	movi	r2,7
    19d4:	14000e16 	blt	r2,r16,1a10 <___vfprintf_internal_r+0x1094>
    19d8:	92000204 	addi	r8,r18,8
    19dc:	003dcd06 	br	1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    19e0:	01000074 	movhi	r4,1
    19e4:	213fae84 	addi	r4,r4,-326
    19e8:	d9002c15 	stw	r4,176(sp)
    19ec:	dac02c17 	ldw	r11,176(sp)
    19f0:	1c07883a 	add	r3,r3,r16
    19f4:	44000115 	stw	r16,4(r8)
    19f8:	42c00015 	stw	r11,0(r8)
    19fc:	10800044 	addi	r2,r2,1
    1a00:	d8c02015 	stw	r3,128(sp)
    1a04:	d8801f15 	stw	r2,124(sp)
    1a08:	010001c4 	movi	r4,7
    1a0c:	20bdc00e 	bge	r4,r2,1110 <__alt_mem_onchip_memory2_0+0xfbfe1110>
    1a10:	b009883a 	mov	r4,r22
    1a14:	b80b883a 	mov	r5,r23
    1a18:	d9801e04 	addi	r6,sp,120
    1a1c:	0007b540 	call	7b54 <__sprint_r>
    1a20:	103cca1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1a24:	d8c02017 	ldw	r3,128(sp)
    1a28:	da000404 	addi	r8,sp,16
    1a2c:	003db906 	br	1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    1a30:	b009883a 	mov	r4,r22
    1a34:	b80b883a 	mov	r5,r23
    1a38:	d9801e04 	addi	r6,sp,120
    1a3c:	0007b540 	call	7b54 <__sprint_r>
    1a40:	103def26 	beq	r2,zero,1200 <__alt_mem_onchip_memory2_0+0xfbfe1200>
    1a44:	003cc106 	br	d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1a48:	10803fcc 	andi	r2,r2,255
    1a4c:	1000651e 	bne	r2,zero,1be4 <___vfprintf_internal_r+0x1268>
    1a50:	8880004c 	andi	r2,r17,1
    1a54:	10013226 	beq	r2,zero,1f20 <___vfprintf_internal_r+0x15a4>
    1a58:	00800c04 	movi	r2,48
    1a5c:	d8c01dc4 	addi	r3,sp,119
    1a60:	d8801dc5 	stb	r2,119(sp)
    1a64:	dc803c17 	ldw	r18,240(sp)
    1a68:	d8c03115 	stw	r3,196(sp)
    1a6c:	003d1106 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1a70:	b009883a 	mov	r4,r22
    1a74:	b80b883a 	mov	r5,r23
    1a78:	d9801e04 	addi	r6,sp,120
    1a7c:	0007b540 	call	7b54 <__sprint_r>
    1a80:	103cb21e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1a84:	d8c02017 	ldw	r3,128(sp)
    1a88:	da000404 	addi	r8,sp,16
    1a8c:	003d9406 	br	10e0 <__alt_mem_onchip_memory2_0+0xfbfe10e0>
    1a90:	b009883a 	mov	r4,r22
    1a94:	b80b883a 	mov	r5,r23
    1a98:	d9801e04 	addi	r6,sp,120
    1a9c:	0007b540 	call	7b54 <__sprint_r>
    1aa0:	103caa1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1aa4:	d8c02017 	ldw	r3,128(sp)
    1aa8:	da000404 	addi	r8,sp,16
    1aac:	003d5206 	br	ff8 <__alt_mem_onchip_memory2_0+0xfbfe0ff8>
    1ab0:	b009883a 	mov	r4,r22
    1ab4:	b80b883a 	mov	r5,r23
    1ab8:	d9801e04 	addi	r6,sp,120
    1abc:	0007b540 	call	7b54 <__sprint_r>
    1ac0:	103ca21e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1ac4:	d8c02017 	ldw	r3,128(sp)
    1ac8:	da000404 	addi	r8,sp,16
    1acc:	003d5806 	br	1030 <__alt_mem_onchip_memory2_0+0xfbfe1030>
    1ad0:	d9403b17 	ldw	r5,236(sp)
    1ad4:	d8c01e04 	addi	r3,sp,120
    1ad8:	988003cc 	andi	r2,r19,15
    1adc:	e008973a 	slli	r4,fp,28
    1ae0:	2885883a 	add	r2,r5,r2
    1ae4:	9826d13a 	srli	r19,r19,4
    1ae8:	10800003 	ldbu	r2,0(r2)
    1aec:	e038d13a 	srli	fp,fp,4
    1af0:	18ffffc4 	addi	r3,r3,-1
    1af4:	24e6b03a 	or	r19,r4,r19
    1af8:	18800005 	stb	r2,0(r3)
    1afc:	9f04b03a 	or	r2,r19,fp
    1b00:	103ff51e 	bne	r2,zero,1ad8 <__alt_mem_onchip_memory2_0+0xfbfe1ad8>
    1b04:	db002817 	ldw	r12,160(sp)
    1b08:	d8c03115 	stw	r3,196(sp)
    1b0c:	60e5c83a 	sub	r18,r12,r3
    1b10:	003ce806 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1b14:	dc002617 	ldw	r16,152(sp)
    1b18:	0401b10e 	bge	zero,r16,21e0 <___vfprintf_internal_r+0x1864>
    1b1c:	db003117 	ldw	r12,196(sp)
    1b20:	dac03317 	ldw	r11,204(sp)
    1b24:	62e1883a 	add	r16,r12,r11
    1b28:	db003417 	ldw	r12,208(sp)
    1b2c:	5825883a 	mov	r18,r11
    1b30:	62c0010e 	bge	r12,r11,1b38 <___vfprintf_internal_r+0x11bc>
    1b34:	6025883a 	mov	r18,r12
    1b38:	04800b0e 	bge	zero,r18,1b68 <___vfprintf_internal_r+0x11ec>
    1b3c:	d8801f17 	ldw	r2,124(sp)
    1b40:	dac03117 	ldw	r11,196(sp)
    1b44:	1c87883a 	add	r3,r3,r18
    1b48:	10800044 	addi	r2,r2,1
    1b4c:	42c00015 	stw	r11,0(r8)
    1b50:	44800115 	stw	r18,4(r8)
    1b54:	d8c02015 	stw	r3,128(sp)
    1b58:	d8801f15 	stw	r2,124(sp)
    1b5c:	010001c4 	movi	r4,7
    1b60:	20824f16 	blt	r4,r2,24a0 <___vfprintf_internal_r+0x1b24>
    1b64:	42000204 	addi	r8,r8,8
    1b68:	90024b16 	blt	r18,zero,2498 <___vfprintf_internal_r+0x1b1c>
    1b6c:	db003417 	ldw	r12,208(sp)
    1b70:	64a5c83a 	sub	r18,r12,r18
    1b74:	0480730e 	bge	zero,r18,1d44 <___vfprintf_internal_r+0x13c8>
    1b78:	05400404 	movi	r21,16
    1b7c:	d8801f17 	ldw	r2,124(sp)
    1b80:	ac817d0e 	bge	r21,r18,2178 <___vfprintf_internal_r+0x17fc>
    1b84:	01400074 	movhi	r5,1
    1b88:	297fae84 	addi	r5,r5,-326
    1b8c:	d9402c15 	stw	r5,176(sp)
    1b90:	070001c4 	movi	fp,7
    1b94:	00000306 	br	1ba4 <___vfprintf_internal_r+0x1228>
    1b98:	42000204 	addi	r8,r8,8
    1b9c:	94bffc04 	addi	r18,r18,-16
    1ba0:	ac81780e 	bge	r21,r18,2184 <___vfprintf_internal_r+0x1808>
    1ba4:	18c00404 	addi	r3,r3,16
    1ba8:	10800044 	addi	r2,r2,1
    1bac:	45000015 	stw	r20,0(r8)
    1bb0:	45400115 	stw	r21,4(r8)
    1bb4:	d8c02015 	stw	r3,128(sp)
    1bb8:	d8801f15 	stw	r2,124(sp)
    1bbc:	e0bff60e 	bge	fp,r2,1b98 <__alt_mem_onchip_memory2_0+0xfbfe1b98>
    1bc0:	b009883a 	mov	r4,r22
    1bc4:	b80b883a 	mov	r5,r23
    1bc8:	d9801e04 	addi	r6,sp,120
    1bcc:	0007b540 	call	7b54 <__sprint_r>
    1bd0:	103c5e1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1bd4:	d8c02017 	ldw	r3,128(sp)
    1bd8:	d8801f17 	ldw	r2,124(sp)
    1bdc:	da000404 	addi	r8,sp,16
    1be0:	003fee06 	br	1b9c <__alt_mem_onchip_memory2_0+0xfbfe1b9c>
    1be4:	dac01e04 	addi	r11,sp,120
    1be8:	0025883a 	mov	r18,zero
    1bec:	dac03115 	stw	r11,196(sp)
    1bf0:	003cb006 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1bf4:	b009883a 	mov	r4,r22
    1bf8:	b80b883a 	mov	r5,r23
    1bfc:	d9801e04 	addi	r6,sp,120
    1c00:	0007b540 	call	7b54 <__sprint_r>
    1c04:	103c511e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1c08:	d8c02017 	ldw	r3,128(sp)
    1c0c:	d8802787 	ldb	r2,158(sp)
    1c10:	da000404 	addi	r8,sp,16
    1c14:	003ceb06 	br	fc4 <__alt_mem_onchip_memory2_0+0xfbfe0fc4>
    1c18:	1cc00017 	ldw	r19,0(r3)
    1c1c:	dac02d17 	ldw	r11,180(sp)
    1c20:	9839d7fa 	srai	fp,r19,31
    1c24:	5ac00104 	addi	r11,r11,4
    1c28:	dac02d15 	stw	r11,180(sp)
    1c2c:	e005883a 	mov	r2,fp
    1c30:	003c8106 	br	e38 <__alt_mem_onchip_memory2_0+0xfbfe0e38>
    1c34:	657fffc4 	addi	r21,r12,-1
    1c38:	057f5d0e 	bge	zero,r21,19b0 <__alt_mem_onchip_memory2_0+0xfbfe19b0>
    1c3c:	07000404 	movi	fp,16
    1c40:	e540900e 	bge	fp,r21,1e84 <___vfprintf_internal_r+0x1508>
    1c44:	01000074 	movhi	r4,1
    1c48:	213fae84 	addi	r4,r4,-326
    1c4c:	d9002c15 	stw	r4,176(sp)
    1c50:	01c001c4 	movi	r7,7
    1c54:	00000306 	br	1c64 <___vfprintf_internal_r+0x12e8>
    1c58:	94800204 	addi	r18,r18,8
    1c5c:	ad7ffc04 	addi	r21,r21,-16
    1c60:	e5408b0e 	bge	fp,r21,1e90 <___vfprintf_internal_r+0x1514>
    1c64:	18c00404 	addi	r3,r3,16
    1c68:	84000044 	addi	r16,r16,1
    1c6c:	95000015 	stw	r20,0(r18)
    1c70:	97000115 	stw	fp,4(r18)
    1c74:	d8c02015 	stw	r3,128(sp)
    1c78:	dc001f15 	stw	r16,124(sp)
    1c7c:	3c3ff60e 	bge	r7,r16,1c58 <__alt_mem_onchip_memory2_0+0xfbfe1c58>
    1c80:	b009883a 	mov	r4,r22
    1c84:	b80b883a 	mov	r5,r23
    1c88:	d9801e04 	addi	r6,sp,120
    1c8c:	d9c03d15 	stw	r7,244(sp)
    1c90:	0007b540 	call	7b54 <__sprint_r>
    1c94:	d9c03d17 	ldw	r7,244(sp)
    1c98:	103c2c1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1c9c:	d8c02017 	ldw	r3,128(sp)
    1ca0:	dc001f17 	ldw	r16,124(sp)
    1ca4:	dc800404 	addi	r18,sp,16
    1ca8:	003fec06 	br	1c5c <__alt_mem_onchip_memory2_0+0xfbfe1c5c>
    1cac:	dac02d17 	ldw	r11,180(sp)
    1cb0:	0039883a 	mov	fp,zero
    1cb4:	0005883a 	mov	r2,zero
    1cb8:	5cc00017 	ldw	r19,0(r11)
    1cbc:	5ac00104 	addi	r11,r11,4
    1cc0:	dac02d15 	stw	r11,180(sp)
    1cc4:	9807883a 	mov	r3,r19
    1cc8:	003d5b06 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1ccc:	db002d17 	ldw	r12,180(sp)
    1cd0:	0039883a 	mov	fp,zero
    1cd4:	00800044 	movi	r2,1
    1cd8:	64c00017 	ldw	r19,0(r12)
    1cdc:	63000104 	addi	r12,r12,4
    1ce0:	db002d15 	stw	r12,180(sp)
    1ce4:	9807883a 	mov	r3,r19
    1ce8:	003d5306 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1cec:	00800084 	movi	r2,2
    1cf0:	9f06b03a 	or	r3,r19,fp
    1cf4:	003d5006 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    1cf8:	10803fcc 	andi	r2,r2,255
    1cfc:	1080201c 	xori	r2,r2,128
    1d00:	10bfe004 	addi	r2,r2,-128
    1d04:	01000c04 	movi	r4,48
    1d08:	1101a526 	beq	r2,r4,23a0 <___vfprintf_internal_r+0x1a24>
    1d0c:	dac03117 	ldw	r11,196(sp)
    1d10:	db002817 	ldw	r12,160(sp)
    1d14:	193fffc5 	stb	r4,-1(r3)
    1d18:	5affffc4 	addi	r11,r11,-1
    1d1c:	dac03115 	stw	r11,196(sp)
    1d20:	62e5c83a 	sub	r18,r12,r11
    1d24:	003c6306 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1d28:	b009883a 	mov	r4,r22
    1d2c:	b80b883a 	mov	r5,r23
    1d30:	d9801e04 	addi	r6,sp,120
    1d34:	0007b540 	call	7b54 <__sprint_r>
    1d38:	103c041e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1d3c:	d8c02017 	ldw	r3,128(sp)
    1d40:	da000404 	addi	r8,sp,16
    1d44:	db003117 	ldw	r12,196(sp)
    1d48:	dac03417 	ldw	r11,208(sp)
    1d4c:	d8802617 	ldw	r2,152(sp)
    1d50:	62e5883a 	add	r18,r12,r11
    1d54:	db003317 	ldw	r12,204(sp)
    1d58:	13000216 	blt	r2,r12,1d64 <___vfprintf_internal_r+0x13e8>
    1d5c:	8900004c 	andi	r4,r17,1
    1d60:	20000c26 	beq	r4,zero,1d94 <___vfprintf_internal_r+0x1418>
    1d64:	dac03817 	ldw	r11,224(sp)
    1d68:	d9001f17 	ldw	r4,124(sp)
    1d6c:	db003517 	ldw	r12,212(sp)
    1d70:	1ac7883a 	add	r3,r3,r11
    1d74:	21000044 	addi	r4,r4,1
    1d78:	43000015 	stw	r12,0(r8)
    1d7c:	42c00115 	stw	r11,4(r8)
    1d80:	d8c02015 	stw	r3,128(sp)
    1d84:	d9001f15 	stw	r4,124(sp)
    1d88:	014001c4 	movi	r5,7
    1d8c:	2901cc16 	blt	r5,r4,24c0 <___vfprintf_internal_r+0x1b44>
    1d90:	42000204 	addi	r8,r8,8
    1d94:	dac03317 	ldw	r11,204(sp)
    1d98:	8489c83a 	sub	r4,r16,r18
    1d9c:	5885c83a 	sub	r2,r11,r2
    1da0:	1021883a 	mov	r16,r2
    1da4:	2080010e 	bge	r4,r2,1dac <___vfprintf_internal_r+0x1430>
    1da8:	2021883a 	mov	r16,r4
    1dac:	04000a0e 	bge	zero,r16,1dd8 <___vfprintf_internal_r+0x145c>
    1db0:	d9001f17 	ldw	r4,124(sp)
    1db4:	1c07883a 	add	r3,r3,r16
    1db8:	44800015 	stw	r18,0(r8)
    1dbc:	21000044 	addi	r4,r4,1
    1dc0:	44000115 	stw	r16,4(r8)
    1dc4:	d8c02015 	stw	r3,128(sp)
    1dc8:	d9001f15 	stw	r4,124(sp)
    1dcc:	014001c4 	movi	r5,7
    1dd0:	2901e316 	blt	r5,r4,2560 <___vfprintf_internal_r+0x1be4>
    1dd4:	42000204 	addi	r8,r8,8
    1dd8:	8001df16 	blt	r16,zero,2558 <___vfprintf_internal_r+0x1bdc>
    1ddc:	1421c83a 	sub	r16,r2,r16
    1de0:	043ccc0e 	bge	zero,r16,1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    1de4:	04800404 	movi	r18,16
    1de8:	d8801f17 	ldw	r2,124(sp)
    1dec:	943efc0e 	bge	r18,r16,19e0 <__alt_mem_onchip_memory2_0+0xfbfe19e0>
    1df0:	01400074 	movhi	r5,1
    1df4:	297fae84 	addi	r5,r5,-326
    1df8:	d9402c15 	stw	r5,176(sp)
    1dfc:	054001c4 	movi	r21,7
    1e00:	00000306 	br	1e10 <___vfprintf_internal_r+0x1494>
    1e04:	42000204 	addi	r8,r8,8
    1e08:	843ffc04 	addi	r16,r16,-16
    1e0c:	943ef70e 	bge	r18,r16,19ec <__alt_mem_onchip_memory2_0+0xfbfe19ec>
    1e10:	18c00404 	addi	r3,r3,16
    1e14:	10800044 	addi	r2,r2,1
    1e18:	45000015 	stw	r20,0(r8)
    1e1c:	44800115 	stw	r18,4(r8)
    1e20:	d8c02015 	stw	r3,128(sp)
    1e24:	d8801f15 	stw	r2,124(sp)
    1e28:	a8bff60e 	bge	r21,r2,1e04 <__alt_mem_onchip_memory2_0+0xfbfe1e04>
    1e2c:	b009883a 	mov	r4,r22
    1e30:	b80b883a 	mov	r5,r23
    1e34:	d9801e04 	addi	r6,sp,120
    1e38:	0007b540 	call	7b54 <__sprint_r>
    1e3c:	103bc31e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1e40:	d8c02017 	ldw	r3,128(sp)
    1e44:	d8801f17 	ldw	r2,124(sp)
    1e48:	da000404 	addi	r8,sp,16
    1e4c:	003fee06 	br	1e08 <__alt_mem_onchip_memory2_0+0xfbfe1e08>
    1e50:	8888703a 	and	r4,r17,r2
    1e54:	203eab1e 	bne	r4,zero,1904 <__alt_mem_onchip_memory2_0+0xfbfe1904>
    1e58:	dc001f17 	ldw	r16,124(sp)
    1e5c:	db003117 	ldw	r12,196(sp)
    1e60:	40800115 	stw	r2,4(r8)
    1e64:	84000044 	addi	r16,r16,1
    1e68:	43000015 	stw	r12,0(r8)
    1e6c:	d8c02015 	stw	r3,128(sp)
    1e70:	dc001f15 	stw	r16,124(sp)
    1e74:	008001c4 	movi	r2,7
    1e78:	14000e16 	blt	r2,r16,1eb4 <___vfprintf_internal_r+0x1538>
    1e7c:	44800204 	addi	r18,r8,8
    1e80:	003ecb06 	br	19b0 <__alt_mem_onchip_memory2_0+0xfbfe19b0>
    1e84:	00800074 	movhi	r2,1
    1e88:	10bfae84 	addi	r2,r2,-326
    1e8c:	d8802c15 	stw	r2,176(sp)
    1e90:	dac02c17 	ldw	r11,176(sp)
    1e94:	1d47883a 	add	r3,r3,r21
    1e98:	84000044 	addi	r16,r16,1
    1e9c:	92c00015 	stw	r11,0(r18)
    1ea0:	95400115 	stw	r21,4(r18)
    1ea4:	d8c02015 	stw	r3,128(sp)
    1ea8:	dc001f15 	stw	r16,124(sp)
    1eac:	008001c4 	movi	r2,7
    1eb0:	143ebe0e 	bge	r2,r16,19ac <__alt_mem_onchip_memory2_0+0xfbfe19ac>
    1eb4:	b009883a 	mov	r4,r22
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	d9801e04 	addi	r6,sp,120
    1ec0:	0007b540 	call	7b54 <__sprint_r>
    1ec4:	103ba11e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1ec8:	d8c02017 	ldw	r3,128(sp)
    1ecc:	dc001f17 	ldw	r16,124(sp)
    1ed0:	dc800404 	addi	r18,sp,16
    1ed4:	003eb606 	br	19b0 <__alt_mem_onchip_memory2_0+0xfbfe19b0>
    1ed8:	b009883a 	mov	r4,r22
    1edc:	b80b883a 	mov	r5,r23
    1ee0:	d9801e04 	addi	r6,sp,120
    1ee4:	0007b540 	call	7b54 <__sprint_r>
    1ee8:	103b981e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1eec:	d8c02017 	ldw	r3,128(sp)
    1ef0:	dc001f17 	ldw	r16,124(sp)
    1ef4:	da000404 	addi	r8,sp,16
    1ef8:	003e8d06 	br	1930 <__alt_mem_onchip_memory2_0+0xfbfe1930>
    1efc:	b009883a 	mov	r4,r22
    1f00:	b80b883a 	mov	r5,r23
    1f04:	d9801e04 	addi	r6,sp,120
    1f08:	0007b540 	call	7b54 <__sprint_r>
    1f0c:	103b8f1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1f10:	d8c02017 	ldw	r3,128(sp)
    1f14:	dc001f17 	ldw	r16,124(sp)
    1f18:	dc800404 	addi	r18,sp,16
    1f1c:	003e8f06 	br	195c <__alt_mem_onchip_memory2_0+0xfbfe195c>
    1f20:	db001e04 	addi	r12,sp,120
    1f24:	0025883a 	mov	r18,zero
    1f28:	db003115 	stw	r12,196(sp)
    1f2c:	003be106 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    1f30:	b009883a 	mov	r4,r22
    1f34:	b80b883a 	mov	r5,r23
    1f38:	d9801e04 	addi	r6,sp,120
    1f3c:	0007b540 	call	7b54 <__sprint_r>
    1f40:	103b821e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    1f44:	d8c02017 	ldw	r3,128(sp)
    1f48:	da000404 	addi	r8,sp,16
    1f4c:	003c3b06 	br	103c <__alt_mem_onchip_memory2_0+0xfbfe103c>
    1f50:	04e7c83a 	sub	r19,zero,r19
    1f54:	9804c03a 	cmpne	r2,r19,zero
    1f58:	0739c83a 	sub	fp,zero,fp
    1f5c:	e0b9c83a 	sub	fp,fp,r2
    1f60:	05400b44 	movi	r21,45
    1f64:	dd402785 	stb	r21,158(sp)
    1f68:	da403215 	stw	r9,200(sp)
    1f6c:	00800044 	movi	r2,1
    1f70:	9f06b03a 	or	r3,r19,fp
    1f74:	003bb506 	br	e4c <__alt_mem_onchip_memory2_0+0xfbfe0e4c>
    1f78:	da003f15 	stw	r8,252(sp)
    1f7c:	da403e15 	stw	r9,248(sp)
    1f80:	00077b00 	call	77b0 <__fpclassifyd>
    1f84:	da003f17 	ldw	r8,252(sp)
    1f88:	da403e17 	ldw	r9,248(sp)
    1f8c:	1000ce26 	beq	r2,zero,22c8 <___vfprintf_internal_r+0x194c>
    1f90:	057ff7c4 	movi	r21,-33
    1f94:	00bfffc4 	movi	r2,-1
    1f98:	856a703a 	and	r21,r16,r21
    1f9c:	4881e826 	beq	r9,r2,2740 <___vfprintf_internal_r+0x1dc4>
    1fa0:	008011c4 	movi	r2,71
    1fa4:	a881e326 	beq	r21,r2,2734 <___vfprintf_internal_r+0x1db8>
    1fa8:	db003917 	ldw	r12,228(sp)
    1fac:	8ac04014 	ori	r11,r17,256
    1fb0:	dac02d15 	stw	r11,180(sp)
    1fb4:	6001ed16 	blt	r12,zero,276c <___vfprintf_internal_r+0x1df0>
    1fb8:	dc803917 	ldw	r18,228(sp)
    1fbc:	d8002b05 	stb	zero,172(sp)
    1fc0:	00801984 	movi	r2,102
    1fc4:	80811826 	beq	r16,r2,2428 <___vfprintf_internal_r+0x1aac>
    1fc8:	00801184 	movi	r2,70
    1fcc:	80811626 	beq	r16,r2,2428 <___vfprintf_internal_r+0x1aac>
    1fd0:	00801144 	movi	r2,69
    1fd4:	a881e926 	beq	r21,r2,277c <___vfprintf_internal_r+0x1e00>
    1fd8:	4839883a 	mov	fp,r9
    1fdc:	d8802604 	addi	r2,sp,152
    1fe0:	d8800115 	stw	r2,4(sp)
    1fe4:	d9403717 	ldw	r5,220(sp)
    1fe8:	d8802504 	addi	r2,sp,148
    1fec:	d8800215 	stw	r2,8(sp)
    1ff0:	d8802104 	addi	r2,sp,132
    1ff4:	df000015 	stw	fp,0(sp)
    1ff8:	d8800315 	stw	r2,12(sp)
    1ffc:	b009883a 	mov	r4,r22
    2000:	900d883a 	mov	r6,r18
    2004:	01c00084 	movi	r7,2
    2008:	da003f15 	stw	r8,252(sp)
    200c:	da403e15 	stw	r9,248(sp)
    2010:	0002d000 	call	2d00 <_dtoa_r>
    2014:	d8803115 	stw	r2,196(sp)
    2018:	008019c4 	movi	r2,103
    201c:	da003f17 	ldw	r8,252(sp)
    2020:	da403e17 	ldw	r9,248(sp)
    2024:	80800226 	beq	r16,r2,2030 <___vfprintf_internal_r+0x16b4>
    2028:	008011c4 	movi	r2,71
    202c:	8081101e 	bne	r16,r2,2470 <___vfprintf_internal_r+0x1af4>
    2030:	8880004c 	andi	r2,r17,1
    2034:	1001dd26 	beq	r2,zero,27ac <___vfprintf_internal_r+0x1e30>
    2038:	db003117 	ldw	r12,196(sp)
    203c:	6715883a 	add	r10,r12,fp
    2040:	d9003717 	ldw	r4,220(sp)
    2044:	900b883a 	mov	r5,r18
    2048:	000d883a 	mov	r6,zero
    204c:	000f883a 	mov	r7,zero
    2050:	da003f15 	stw	r8,252(sp)
    2054:	da403e15 	stw	r9,248(sp)
    2058:	da803d15 	stw	r10,244(sp)
    205c:	000b5f80 	call	b5f8 <__eqdf2>
    2060:	da003f17 	ldw	r8,252(sp)
    2064:	da403e17 	ldw	r9,248(sp)
    2068:	da803d17 	ldw	r10,244(sp)
    206c:	10016526 	beq	r2,zero,2604 <___vfprintf_internal_r+0x1c88>
    2070:	d8802117 	ldw	r2,132(sp)
    2074:	1280062e 	bgeu	r2,r10,2090 <___vfprintf_internal_r+0x1714>
    2078:	01000c04 	movi	r4,48
    207c:	10c00044 	addi	r3,r2,1
    2080:	d8c02115 	stw	r3,132(sp)
    2084:	11000005 	stb	r4,0(r2)
    2088:	d8802117 	ldw	r2,132(sp)
    208c:	12bffb36 	bltu	r2,r10,207c <__alt_mem_onchip_memory2_0+0xfbfe207c>
    2090:	db003117 	ldw	r12,196(sp)
    2094:	1305c83a 	sub	r2,r2,r12
    2098:	d8803315 	stw	r2,204(sp)
    209c:	008011c4 	movi	r2,71
    20a0:	a8814d26 	beq	r21,r2,25d8 <___vfprintf_internal_r+0x1c5c>
    20a4:	00801944 	movi	r2,101
    20a8:	1402060e 	bge	r2,r16,28c4 <___vfprintf_internal_r+0x1f48>
    20ac:	00801984 	movi	r2,102
    20b0:	8081b426 	beq	r16,r2,2784 <___vfprintf_internal_r+0x1e08>
    20b4:	db002617 	ldw	r12,152(sp)
    20b8:	db003415 	stw	r12,208(sp)
    20bc:	db003417 	ldw	r12,208(sp)
    20c0:	dac03317 	ldw	r11,204(sp)
    20c4:	62c1a016 	blt	r12,r11,2748 <___vfprintf_internal_r+0x1dcc>
    20c8:	8c40004c 	andi	r17,r17,1
    20cc:	8801bf1e 	bne	r17,zero,27cc <___vfprintf_internal_r+0x1e50>
    20d0:	6005883a 	mov	r2,r12
    20d4:	6001b316 	blt	r12,zero,27a4 <___vfprintf_internal_r+0x1e28>
    20d8:	dc803417 	ldw	r18,208(sp)
    20dc:	df002b07 	ldb	fp,172(sp)
    20e0:	e0012e1e 	bne	fp,zero,259c <___vfprintf_internal_r+0x1c20>
    20e4:	dc402d17 	ldw	r17,180(sp)
    20e8:	dd402783 	ldbu	r21,158(sp)
    20ec:	d8802b15 	stw	r2,172(sp)
    20f0:	dcc02d15 	stw	r19,180(sp)
    20f4:	d8003215 	stw	zero,200(sp)
    20f8:	003b7306 	br	ec8 <__alt_mem_onchip_memory2_0+0xfbfe0ec8>
    20fc:	00800084 	movi	r2,2
    2100:	003c4d06 	br	1238 <__alt_mem_onchip_memory2_0+0xfbfe1238>
    2104:	8880040c 	andi	r2,r17,16
    2108:	1000091e 	bne	r2,zero,2130 <___vfprintf_internal_r+0x17b4>
    210c:	8c40100c 	andi	r17,r17,64
    2110:	88000726 	beq	r17,zero,2130 <___vfprintf_internal_r+0x17b4>
    2114:	db002d17 	ldw	r12,180(sp)
    2118:	dac02f17 	ldw	r11,188(sp)
    211c:	60800017 	ldw	r2,0(r12)
    2120:	63000104 	addi	r12,r12,4
    2124:	db002d15 	stw	r12,180(sp)
    2128:	12c0000d 	sth	r11,0(r2)
    212c:	003a4e06 	br	a68 <__alt_mem_onchip_memory2_0+0xfbfe0a68>
    2130:	db002d17 	ldw	r12,180(sp)
    2134:	dac02f17 	ldw	r11,188(sp)
    2138:	60800017 	ldw	r2,0(r12)
    213c:	63000104 	addi	r12,r12,4
    2140:	db002d15 	stw	r12,180(sp)
    2144:	12c00015 	stw	r11,0(r2)
    2148:	003a4706 	br	a68 <__alt_mem_onchip_memory2_0+0xfbfe0a68>
    214c:	1c000007 	ldb	r16,0(r3)
    2150:	1805883a 	mov	r2,r3
    2154:	003a6e06 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    2158:	88c0100c 	andi	r3,r17,64
    215c:	18006b26 	beq	r3,zero,230c <___vfprintf_internal_r+0x1990>
    2160:	dac02d17 	ldw	r11,180(sp)
    2164:	14c0000b 	ldhu	r19,0(r2)
    2168:	0039883a 	mov	fp,zero
    216c:	5ac00104 	addi	r11,r11,4
    2170:	dac02d15 	stw	r11,180(sp)
    2174:	003cb206 	br	1440 <__alt_mem_onchip_memory2_0+0xfbfe1440>
    2178:	01000074 	movhi	r4,1
    217c:	213fae84 	addi	r4,r4,-326
    2180:	d9002c15 	stw	r4,176(sp)
    2184:	dac02c17 	ldw	r11,176(sp)
    2188:	1c87883a 	add	r3,r3,r18
    218c:	10800044 	addi	r2,r2,1
    2190:	42c00015 	stw	r11,0(r8)
    2194:	44800115 	stw	r18,4(r8)
    2198:	d8c02015 	stw	r3,128(sp)
    219c:	d8801f15 	stw	r2,124(sp)
    21a0:	010001c4 	movi	r4,7
    21a4:	20bee016 	blt	r4,r2,1d28 <__alt_mem_onchip_memory2_0+0xfbfe1d28>
    21a8:	42000204 	addi	r8,r8,8
    21ac:	003ee506 	br	1d44 <__alt_mem_onchip_memory2_0+0xfbfe1d44>
    21b0:	01000074 	movhi	r4,1
    21b4:	213fae84 	addi	r4,r4,-326
    21b8:	d9002c15 	stw	r4,176(sp)
    21bc:	003bbe06 	br	10b8 <__alt_mem_onchip_memory2_0+0xfbfe10b8>
    21c0:	b009883a 	mov	r4,r22
    21c4:	b80b883a 	mov	r5,r23
    21c8:	d9801e04 	addi	r6,sp,120
    21cc:	0007b540 	call	7b54 <__sprint_r>
    21d0:	103ade1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    21d4:	d8c02017 	ldw	r3,128(sp)
    21d8:	da000404 	addi	r8,sp,16
    21dc:	003d6b06 	br	178c <__alt_mem_onchip_memory2_0+0xfbfe178c>
    21e0:	d8801f17 	ldw	r2,124(sp)
    21e4:	03000074 	movhi	r12,1
    21e8:	01000044 	movi	r4,1
    21ec:	18c00044 	addi	r3,r3,1
    21f0:	10800044 	addi	r2,r2,1
    21f4:	633fae04 	addi	r12,r12,-328
    21f8:	41000115 	stw	r4,4(r8)
    21fc:	43000015 	stw	r12,0(r8)
    2200:	d8c02015 	stw	r3,128(sp)
    2204:	d8801f15 	stw	r2,124(sp)
    2208:	010001c4 	movi	r4,7
    220c:	20804916 	blt	r4,r2,2334 <___vfprintf_internal_r+0x19b8>
    2210:	42000204 	addi	r8,r8,8
    2214:	8000041e 	bne	r16,zero,2228 <___vfprintf_internal_r+0x18ac>
    2218:	dac03317 	ldw	r11,204(sp)
    221c:	5800021e 	bne	r11,zero,2228 <___vfprintf_internal_r+0x18ac>
    2220:	8880004c 	andi	r2,r17,1
    2224:	103bbb26 	beq	r2,zero,1114 <__alt_mem_onchip_memory2_0+0xfbfe1114>
    2228:	db003817 	ldw	r12,224(sp)
    222c:	d8801f17 	ldw	r2,124(sp)
    2230:	dac03517 	ldw	r11,212(sp)
    2234:	1b07883a 	add	r3,r3,r12
    2238:	10800044 	addi	r2,r2,1
    223c:	42c00015 	stw	r11,0(r8)
    2240:	43000115 	stw	r12,4(r8)
    2244:	d8c02015 	stw	r3,128(sp)
    2248:	d8801f15 	stw	r2,124(sp)
    224c:	010001c4 	movi	r4,7
    2250:	20812e16 	blt	r4,r2,270c <___vfprintf_internal_r+0x1d90>
    2254:	42000204 	addi	r8,r8,8
    2258:	0421c83a 	sub	r16,zero,r16
    225c:	04005c0e 	bge	zero,r16,23d0 <___vfprintf_internal_r+0x1a54>
    2260:	04800404 	movi	r18,16
    2264:	94009f0e 	bge	r18,r16,24e4 <___vfprintf_internal_r+0x1b68>
    2268:	01000074 	movhi	r4,1
    226c:	213fae84 	addi	r4,r4,-326
    2270:	d9002c15 	stw	r4,176(sp)
    2274:	054001c4 	movi	r21,7
    2278:	00000306 	br	2288 <___vfprintf_internal_r+0x190c>
    227c:	42000204 	addi	r8,r8,8
    2280:	843ffc04 	addi	r16,r16,-16
    2284:	94009a0e 	bge	r18,r16,24f0 <___vfprintf_internal_r+0x1b74>
    2288:	18c00404 	addi	r3,r3,16
    228c:	10800044 	addi	r2,r2,1
    2290:	45000015 	stw	r20,0(r8)
    2294:	44800115 	stw	r18,4(r8)
    2298:	d8c02015 	stw	r3,128(sp)
    229c:	d8801f15 	stw	r2,124(sp)
    22a0:	a8bff60e 	bge	r21,r2,227c <__alt_mem_onchip_memory2_0+0xfbfe227c>
    22a4:	b009883a 	mov	r4,r22
    22a8:	b80b883a 	mov	r5,r23
    22ac:	d9801e04 	addi	r6,sp,120
    22b0:	0007b540 	call	7b54 <__sprint_r>
    22b4:	103aa51e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    22b8:	d8c02017 	ldw	r3,128(sp)
    22bc:	d8801f17 	ldw	r2,124(sp)
    22c0:	da000404 	addi	r8,sp,16
    22c4:	003fee06 	br	2280 <__alt_mem_onchip_memory2_0+0xfbfe2280>
    22c8:	008011c4 	movi	r2,71
    22cc:	1400be16 	blt	r2,r16,25c8 <___vfprintf_internal_r+0x1c4c>
    22d0:	03000074 	movhi	r12,1
    22d4:	633fa004 	addi	r12,r12,-384
    22d8:	db003115 	stw	r12,196(sp)
    22dc:	00c000c4 	movi	r3,3
    22e0:	00bfdfc4 	movi	r2,-129
    22e4:	d8c02b15 	stw	r3,172(sp)
    22e8:	88a2703a 	and	r17,r17,r2
    22ec:	dd402783 	ldbu	r21,158(sp)
    22f0:	dcc02d15 	stw	r19,180(sp)
    22f4:	1825883a 	mov	r18,r3
    22f8:	d8003215 	stw	zero,200(sp)
    22fc:	d8003415 	stw	zero,208(sp)
    2300:	003af106 	br	ec8 <__alt_mem_onchip_memory2_0+0xfbfe0ec8>
    2304:	4825883a 	mov	r18,r9
    2308:	003c9306 	br	1558 <__alt_mem_onchip_memory2_0+0xfbfe1558>
    230c:	db002d17 	ldw	r12,180(sp)
    2310:	14c00017 	ldw	r19,0(r2)
    2314:	0039883a 	mov	fp,zero
    2318:	63000104 	addi	r12,r12,4
    231c:	db002d15 	stw	r12,180(sp)
    2320:	003c4706 	br	1440 <__alt_mem_onchip_memory2_0+0xfbfe1440>
    2324:	00800074 	movhi	r2,1
    2328:	10bf9e04 	addi	r2,r2,-392
    232c:	d8803115 	stw	r2,196(sp)
    2330:	003bf106 	br	12f8 <__alt_mem_onchip_memory2_0+0xfbfe12f8>
    2334:	b009883a 	mov	r4,r22
    2338:	b80b883a 	mov	r5,r23
    233c:	d9801e04 	addi	r6,sp,120
    2340:	0007b540 	call	7b54 <__sprint_r>
    2344:	103a811e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    2348:	dc002617 	ldw	r16,152(sp)
    234c:	d8c02017 	ldw	r3,128(sp)
    2350:	da000404 	addi	r8,sp,16
    2354:	003faf06 	br	2214 <__alt_mem_onchip_memory2_0+0xfbfe2214>
    2358:	db002e17 	ldw	r12,184(sp)
    235c:	1805883a 	mov	r2,r3
    2360:	dac02d15 	stw	r11,180(sp)
    2364:	0319c83a 	sub	r12,zero,r12
    2368:	db002e15 	stw	r12,184(sp)
    236c:	003a8206 	br	d78 <__alt_mem_onchip_memory2_0+0xfbfe0d78>
    2370:	18800044 	addi	r2,r3,1
    2374:	8c400814 	ori	r17,r17,32
    2378:	1c000047 	ldb	r16,1(r3)
    237c:	0039e406 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    2380:	b009883a 	mov	r4,r22
    2384:	b80b883a 	mov	r5,r23
    2388:	d9801e04 	addi	r6,sp,120
    238c:	0007b540 	call	7b54 <__sprint_r>
    2390:	103a6e1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    2394:	d8c02017 	ldw	r3,128(sp)
    2398:	da000404 	addi	r8,sp,16
    239c:	003d0c06 	br	17d0 <__alt_mem_onchip_memory2_0+0xfbfe17d0>
    23a0:	db002817 	ldw	r12,160(sp)
    23a4:	d8c03117 	ldw	r3,196(sp)
    23a8:	60e5c83a 	sub	r18,r12,r3
    23ac:	003ac106 	br	eb4 <__alt_mem_onchip_memory2_0+0xfbfe0eb4>
    23b0:	b009883a 	mov	r4,r22
    23b4:	b80b883a 	mov	r5,r23
    23b8:	d9801e04 	addi	r6,sp,120
    23bc:	0007b540 	call	7b54 <__sprint_r>
    23c0:	103a621e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    23c4:	d8c02017 	ldw	r3,128(sp)
    23c8:	d8801f17 	ldw	r2,124(sp)
    23cc:	da000404 	addi	r8,sp,16
    23d0:	db003317 	ldw	r12,204(sp)
    23d4:	dac03117 	ldw	r11,196(sp)
    23d8:	10800044 	addi	r2,r2,1
    23dc:	1b07883a 	add	r3,r3,r12
    23e0:	42c00015 	stw	r11,0(r8)
    23e4:	43000115 	stw	r12,4(r8)
    23e8:	d8c02015 	stw	r3,128(sp)
    23ec:	d8801f15 	stw	r2,124(sp)
    23f0:	010001c4 	movi	r4,7
    23f4:	20bb460e 	bge	r4,r2,1110 <__alt_mem_onchip_memory2_0+0xfbfe1110>
    23f8:	003d8506 	br	1a10 <__alt_mem_onchip_memory2_0+0xfbfe1a10>
    23fc:	da003f15 	stw	r8,252(sp)
    2400:	00008e40 	call	8e4 <strlen>
    2404:	1025883a 	mov	r18,r2
    2408:	da003f17 	ldw	r8,252(sp)
    240c:	903c540e 	bge	r18,zero,1560 <__alt_mem_onchip_memory2_0+0xfbfe1560>
    2410:	0005883a 	mov	r2,zero
    2414:	003c5206 	br	1560 <__alt_mem_onchip_memory2_0+0xfbfe1560>
    2418:	01000074 	movhi	r4,1
    241c:	213fb284 	addi	r4,r4,-310
    2420:	d9003615 	stw	r4,216(sp)
    2424:	003adc06 	br	f98 <__alt_mem_onchip_memory2_0+0xfbfe0f98>
    2428:	d8802604 	addi	r2,sp,152
    242c:	d8800115 	stw	r2,4(sp)
    2430:	d9403717 	ldw	r5,220(sp)
    2434:	d8802504 	addi	r2,sp,148
    2438:	d8800215 	stw	r2,8(sp)
    243c:	d8802104 	addi	r2,sp,132
    2440:	da400015 	stw	r9,0(sp)
    2444:	d8800315 	stw	r2,12(sp)
    2448:	b009883a 	mov	r4,r22
    244c:	900d883a 	mov	r6,r18
    2450:	01c000c4 	movi	r7,3
    2454:	da003f15 	stw	r8,252(sp)
    2458:	da403e15 	stw	r9,248(sp)
    245c:	0002d000 	call	2d00 <_dtoa_r>
    2460:	da403e17 	ldw	r9,248(sp)
    2464:	da003f17 	ldw	r8,252(sp)
    2468:	d8803115 	stw	r2,196(sp)
    246c:	4839883a 	mov	fp,r9
    2470:	dac03117 	ldw	r11,196(sp)
    2474:	00801184 	movi	r2,70
    2478:	5f15883a 	add	r10,r11,fp
    247c:	a8bef01e 	bne	r21,r2,2040 <__alt_mem_onchip_memory2_0+0xfbfe2040>
    2480:	59000007 	ldb	r4,0(r11)
    2484:	00800c04 	movi	r2,48
    2488:	2080d526 	beq	r4,r2,27e0 <___vfprintf_internal_r+0x1e64>
    248c:	d8c02617 	ldw	r3,152(sp)
    2490:	50d5883a 	add	r10,r10,r3
    2494:	003eea06 	br	2040 <__alt_mem_onchip_memory2_0+0xfbfe2040>
    2498:	0025883a 	mov	r18,zero
    249c:	003db306 	br	1b6c <__alt_mem_onchip_memory2_0+0xfbfe1b6c>
    24a0:	b009883a 	mov	r4,r22
    24a4:	b80b883a 	mov	r5,r23
    24a8:	d9801e04 	addi	r6,sp,120
    24ac:	0007b540 	call	7b54 <__sprint_r>
    24b0:	103a261e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    24b4:	d8c02017 	ldw	r3,128(sp)
    24b8:	da000404 	addi	r8,sp,16
    24bc:	003daa06 	br	1b68 <__alt_mem_onchip_memory2_0+0xfbfe1b68>
    24c0:	b009883a 	mov	r4,r22
    24c4:	b80b883a 	mov	r5,r23
    24c8:	d9801e04 	addi	r6,sp,120
    24cc:	0007b540 	call	7b54 <__sprint_r>
    24d0:	103a1e1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    24d4:	d8802617 	ldw	r2,152(sp)
    24d8:	d8c02017 	ldw	r3,128(sp)
    24dc:	da000404 	addi	r8,sp,16
    24e0:	003e2c06 	br	1d94 <__alt_mem_onchip_memory2_0+0xfbfe1d94>
    24e4:	03000074 	movhi	r12,1
    24e8:	633fae84 	addi	r12,r12,-326
    24ec:	db002c15 	stw	r12,176(sp)
    24f0:	dac02c17 	ldw	r11,176(sp)
    24f4:	1c07883a 	add	r3,r3,r16
    24f8:	10800044 	addi	r2,r2,1
    24fc:	42c00015 	stw	r11,0(r8)
    2500:	44000115 	stw	r16,4(r8)
    2504:	d8c02015 	stw	r3,128(sp)
    2508:	d8801f15 	stw	r2,124(sp)
    250c:	010001c4 	movi	r4,7
    2510:	20bfa716 	blt	r4,r2,23b0 <__alt_mem_onchip_memory2_0+0xfbfe23b0>
    2514:	42000204 	addi	r8,r8,8
    2518:	003fad06 	br	23d0 <__alt_mem_onchip_memory2_0+0xfbfe23d0>
    251c:	00800184 	movi	r2,6
    2520:	1240012e 	bgeu	r2,r9,2528 <___vfprintf_internal_r+0x1bac>
    2524:	1013883a 	mov	r9,r2
    2528:	4825883a 	mov	r18,r9
    252c:	4805883a 	mov	r2,r9
    2530:	4800c216 	blt	r9,zero,283c <___vfprintf_internal_r+0x1ec0>
    2534:	d8802b15 	stw	r2,172(sp)
    2538:	00800074 	movhi	r2,1
    253c:	10bfac04 	addi	r2,r2,-336
    2540:	d8803115 	stw	r2,196(sp)
    2544:	dcc02d15 	stw	r19,180(sp)
    2548:	d8003215 	stw	zero,200(sp)
    254c:	d8003415 	stw	zero,208(sp)
    2550:	0005883a 	mov	r2,zero
    2554:	003a6306 	br	ee4 <__alt_mem_onchip_memory2_0+0xfbfe0ee4>
    2558:	0021883a 	mov	r16,zero
    255c:	003e1f06 	br	1ddc <__alt_mem_onchip_memory2_0+0xfbfe1ddc>
    2560:	b009883a 	mov	r4,r22
    2564:	b80b883a 	mov	r5,r23
    2568:	d9801e04 	addi	r6,sp,120
    256c:	0007b540 	call	7b54 <__sprint_r>
    2570:	1039f61e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    2574:	d8802617 	ldw	r2,152(sp)
    2578:	db003317 	ldw	r12,204(sp)
    257c:	d8c02017 	ldw	r3,128(sp)
    2580:	da000404 	addi	r8,sp,16
    2584:	6085c83a 	sub	r2,r12,r2
    2588:	003e1306 	br	1dd8 <__alt_mem_onchip_memory2_0+0xfbfe1dd8>
    258c:	03000074 	movhi	r12,1
    2590:	633fb284 	addi	r12,r12,-310
    2594:	db003615 	stw	r12,216(sp)
    2598:	003b0206 	br	11a4 <__alt_mem_onchip_memory2_0+0xfbfe11a4>
    259c:	00c00b44 	movi	r3,45
    25a0:	d8802b15 	stw	r2,172(sp)
    25a4:	dc402d17 	ldw	r17,180(sp)
    25a8:	d8c02785 	stb	r3,158(sp)
    25ac:	dcc02d15 	stw	r19,180(sp)
    25b0:	d8003215 	stw	zero,200(sp)
    25b4:	00800b44 	movi	r2,45
    25b8:	003a4706 	br	ed8 <__alt_mem_onchip_memory2_0+0xfbfe0ed8>
    25bc:	05400b44 	movi	r21,45
    25c0:	dd402785 	stb	r21,158(sp)
    25c4:	003b4706 	br	12e4 <__alt_mem_onchip_memory2_0+0xfbfe12e4>
    25c8:	00800074 	movhi	r2,1
    25cc:	10bfa104 	addi	r2,r2,-380
    25d0:	d8803115 	stw	r2,196(sp)
    25d4:	003f4106 	br	22dc <__alt_mem_onchip_memory2_0+0xfbfe22dc>
    25d8:	d8c02617 	ldw	r3,152(sp)
    25dc:	00bfff44 	movi	r2,-3
    25e0:	18801116 	blt	r3,r2,2628 <___vfprintf_internal_r+0x1cac>
    25e4:	48c01016 	blt	r9,r3,2628 <___vfprintf_internal_r+0x1cac>
    25e8:	d8c03415 	stw	r3,208(sp)
    25ec:	040019c4 	movi	r16,103
    25f0:	003eb206 	br	20bc <__alt_mem_onchip_memory2_0+0xfbfe20bc>
    25f4:	01000074 	movhi	r4,1
    25f8:	213fae84 	addi	r4,r4,-326
    25fc:	d9002c15 	stw	r4,176(sp)
    2600:	003cb106 	br	18c8 <__alt_mem_onchip_memory2_0+0xfbfe18c8>
    2604:	5005883a 	mov	r2,r10
    2608:	003ea106 	br	2090 <__alt_mem_onchip_memory2_0+0xfbfe2090>
    260c:	da402b15 	stw	r9,172(sp)
    2610:	dd402783 	ldbu	r21,158(sp)
    2614:	4825883a 	mov	r18,r9
    2618:	dcc02d15 	stw	r19,180(sp)
    261c:	d8003215 	stw	zero,200(sp)
    2620:	d8003415 	stw	zero,208(sp)
    2624:	003a2806 	br	ec8 <__alt_mem_onchip_memory2_0+0xfbfe0ec8>
    2628:	843fff84 	addi	r16,r16,-2
    262c:	1f3fffc4 	addi	fp,r3,-1
    2630:	df002615 	stw	fp,152(sp)
    2634:	dc0022c5 	stb	r16,139(sp)
    2638:	e0009816 	blt	fp,zero,289c <___vfprintf_internal_r+0x1f20>
    263c:	00800ac4 	movi	r2,43
    2640:	d8802305 	stb	r2,140(sp)
    2644:	00800244 	movi	r2,9
    2648:	1700750e 	bge	r2,fp,2820 <___vfprintf_internal_r+0x1ea4>
    264c:	dd4022c4 	addi	r21,sp,139
    2650:	dc002c15 	stw	r16,176(sp)
    2654:	4025883a 	mov	r18,r8
    2658:	a821883a 	mov	r16,r21
    265c:	e009883a 	mov	r4,fp
    2660:	01400284 	movi	r5,10
    2664:	000a4240 	call	a424 <__modsi3>
    2668:	10800c04 	addi	r2,r2,48
    266c:	843fffc4 	addi	r16,r16,-1
    2670:	e009883a 	mov	r4,fp
    2674:	01400284 	movi	r5,10
    2678:	80800005 	stb	r2,0(r16)
    267c:	000a3d00 	call	a3d0 <__divsi3>
    2680:	1039883a 	mov	fp,r2
    2684:	00800244 	movi	r2,9
    2688:	173ff416 	blt	r2,fp,265c <__alt_mem_onchip_memory2_0+0xfbfe265c>
    268c:	9011883a 	mov	r8,r18
    2690:	e0800c04 	addi	r2,fp,48
    2694:	8025883a 	mov	r18,r16
    2698:	913fffc4 	addi	r4,r18,-1
    269c:	90bfffc5 	stb	r2,-1(r18)
    26a0:	dc002c17 	ldw	r16,176(sp)
    26a4:	2540852e 	bgeu	r4,r21,28bc <___vfprintf_internal_r+0x1f40>
    26a8:	d9402384 	addi	r5,sp,142
    26ac:	2c8bc83a 	sub	r5,r5,r18
    26b0:	d8c02344 	addi	r3,sp,141
    26b4:	a94b883a 	add	r5,r21,r5
    26b8:	00000106 	br	26c0 <___vfprintf_internal_r+0x1d44>
    26bc:	20800003 	ldbu	r2,0(r4)
    26c0:	18800005 	stb	r2,0(r3)
    26c4:	18c00044 	addi	r3,r3,1
    26c8:	21000044 	addi	r4,r4,1
    26cc:	197ffb1e 	bne	r3,r5,26bc <__alt_mem_onchip_memory2_0+0xfbfe26bc>
    26d0:	d8802304 	addi	r2,sp,140
    26d4:	1485c83a 	sub	r2,r2,r18
    26d8:	d8c02344 	addi	r3,sp,141
    26dc:	1885883a 	add	r2,r3,r2
    26e0:	dac03317 	ldw	r11,204(sp)
    26e4:	156bc83a 	sub	r21,r2,r21
    26e8:	dd403a15 	stw	r21,232(sp)
    26ec:	00800044 	movi	r2,1
    26f0:	5d65883a 	add	r18,r11,r21
    26f4:	12c0660e 	bge	r2,r11,2890 <___vfprintf_internal_r+0x1f14>
    26f8:	94800044 	addi	r18,r18,1
    26fc:	9005883a 	mov	r2,r18
    2700:	90006116 	blt	r18,zero,2888 <___vfprintf_internal_r+0x1f0c>
    2704:	d8003415 	stw	zero,208(sp)
    2708:	003e7406 	br	20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    270c:	b009883a 	mov	r4,r22
    2710:	b80b883a 	mov	r5,r23
    2714:	d9801e04 	addi	r6,sp,120
    2718:	0007b540 	call	7b54 <__sprint_r>
    271c:	10398b1e 	bne	r2,zero,d4c <__alt_mem_onchip_memory2_0+0xfbfe0d4c>
    2720:	dc002617 	ldw	r16,152(sp)
    2724:	d8c02017 	ldw	r3,128(sp)
    2728:	d8801f17 	ldw	r2,124(sp)
    272c:	da000404 	addi	r8,sp,16
    2730:	003ec906 	br	2258 <__alt_mem_onchip_memory2_0+0xfbfe2258>
    2734:	483e1c1e 	bne	r9,zero,1fa8 <__alt_mem_onchip_memory2_0+0xfbfe1fa8>
    2738:	9013883a 	mov	r9,r18
    273c:	003e1a06 	br	1fa8 <__alt_mem_onchip_memory2_0+0xfbfe1fa8>
    2740:	02400184 	movi	r9,6
    2744:	003e1806 	br	1fa8 <__alt_mem_onchip_memory2_0+0xfbfe1fa8>
    2748:	d8c03417 	ldw	r3,208(sp)
    274c:	00c04b0e 	bge	zero,r3,287c <___vfprintf_internal_r+0x1f00>
    2750:	04800044 	movi	r18,1
    2754:	dac03317 	ldw	r11,204(sp)
    2758:	92e5883a 	add	r18,r18,r11
    275c:	9005883a 	mov	r2,r18
    2760:	903e5e0e 	bge	r18,zero,20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    2764:	0005883a 	mov	r2,zero
    2768:	003e5c06 	br	20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    276c:	00c00b44 	movi	r3,45
    2770:	64a0003c 	xorhi	r18,r12,32768
    2774:	d8c02b05 	stb	r3,172(sp)
    2778:	003e1106 	br	1fc0 <__alt_mem_onchip_memory2_0+0xfbfe1fc0>
    277c:	4f000044 	addi	fp,r9,1
    2780:	003e1606 	br	1fdc <__alt_mem_onchip_memory2_0+0xfbfe1fdc>
    2784:	d8c02617 	ldw	r3,152(sp)
    2788:	d8c03415 	stw	r3,208(sp)
    278c:	00c0350e 	bge	zero,r3,2864 <___vfprintf_internal_r+0x1ee8>
    2790:	4800081e 	bne	r9,zero,27b4 <___vfprintf_internal_r+0x1e38>
    2794:	8c40004c 	andi	r17,r17,1
    2798:	8800061e 	bne	r17,zero,27b4 <___vfprintf_internal_r+0x1e38>
    279c:	1805883a 	mov	r2,r3
    27a0:	183e4d0e 	bge	r3,zero,20d8 <__alt_mem_onchip_memory2_0+0xfbfe20d8>
    27a4:	0005883a 	mov	r2,zero
    27a8:	003e4b06 	br	20d8 <__alt_mem_onchip_memory2_0+0xfbfe20d8>
    27ac:	d8802117 	ldw	r2,132(sp)
    27b0:	003e3706 	br	2090 <__alt_mem_onchip_memory2_0+0xfbfe2090>
    27b4:	dac03417 	ldw	r11,208(sp)
    27b8:	4a400044 	addi	r9,r9,1
    27bc:	5a65883a 	add	r18,r11,r9
    27c0:	9005883a 	mov	r2,r18
    27c4:	903e450e 	bge	r18,zero,20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    27c8:	003fe606 	br	2764 <__alt_mem_onchip_memory2_0+0xfbfe2764>
    27cc:	db003417 	ldw	r12,208(sp)
    27d0:	64800044 	addi	r18,r12,1
    27d4:	9005883a 	mov	r2,r18
    27d8:	903e400e 	bge	r18,zero,20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    27dc:	003fe106 	br	2764 <__alt_mem_onchip_memory2_0+0xfbfe2764>
    27e0:	d9003717 	ldw	r4,220(sp)
    27e4:	900b883a 	mov	r5,r18
    27e8:	000d883a 	mov	r6,zero
    27ec:	000f883a 	mov	r7,zero
    27f0:	da003f15 	stw	r8,252(sp)
    27f4:	da403e15 	stw	r9,248(sp)
    27f8:	da803d15 	stw	r10,244(sp)
    27fc:	000b5f80 	call	b5f8 <__eqdf2>
    2800:	da003f17 	ldw	r8,252(sp)
    2804:	da403e17 	ldw	r9,248(sp)
    2808:	da803d17 	ldw	r10,244(sp)
    280c:	103f1f26 	beq	r2,zero,248c <__alt_mem_onchip_memory2_0+0xfbfe248c>
    2810:	00800044 	movi	r2,1
    2814:	1707c83a 	sub	r3,r2,fp
    2818:	d8c02615 	stw	r3,152(sp)
    281c:	003f1c06 	br	2490 <__alt_mem_onchip_memory2_0+0xfbfe2490>
    2820:	00800c04 	movi	r2,48
    2824:	e0c00c04 	addi	r3,fp,48
    2828:	d8802345 	stb	r2,141(sp)
    282c:	d8c02385 	stb	r3,142(sp)
    2830:	d88023c4 	addi	r2,sp,143
    2834:	dd4022c4 	addi	r21,sp,139
    2838:	003fa906 	br	26e0 <__alt_mem_onchip_memory2_0+0xfbfe26e0>
    283c:	0005883a 	mov	r2,zero
    2840:	003f3c06 	br	2534 <__alt_mem_onchip_memory2_0+0xfbfe2534>
    2844:	dac02d17 	ldw	r11,180(sp)
    2848:	5a400017 	ldw	r9,0(r11)
    284c:	5ac00104 	addi	r11,r11,4
    2850:	dac02d15 	stw	r11,180(sp)
    2854:	483ec80e 	bge	r9,zero,2378 <__alt_mem_onchip_memory2_0+0xfbfe2378>
    2858:	027fffc4 	movi	r9,-1
    285c:	1c000047 	ldb	r16,1(r3)
    2860:	0038ab06 	br	b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>
    2864:	4800111e 	bne	r9,zero,28ac <___vfprintf_internal_r+0x1f30>
    2868:	8c40004c 	andi	r17,r17,1
    286c:	88000f1e 	bne	r17,zero,28ac <___vfprintf_internal_r+0x1f30>
    2870:	00800044 	movi	r2,1
    2874:	1025883a 	mov	r18,r2
    2878:	003e1806 	br	20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    287c:	04800084 	movi	r18,2
    2880:	90e5c83a 	sub	r18,r18,r3
    2884:	003fb306 	br	2754 <__alt_mem_onchip_memory2_0+0xfbfe2754>
    2888:	0005883a 	mov	r2,zero
    288c:	003f9d06 	br	2704 <__alt_mem_onchip_memory2_0+0xfbfe2704>
    2890:	88a2703a 	and	r17,r17,r2
    2894:	883f9926 	beq	r17,zero,26fc <__alt_mem_onchip_memory2_0+0xfbfe26fc>
    2898:	003f9706 	br	26f8 <__alt_mem_onchip_memory2_0+0xfbfe26f8>
    289c:	00800b44 	movi	r2,45
    28a0:	0739c83a 	sub	fp,zero,fp
    28a4:	d8802305 	stb	r2,140(sp)
    28a8:	003f6606 	br	2644 <__alt_mem_onchip_memory2_0+0xfbfe2644>
    28ac:	4c800084 	addi	r18,r9,2
    28b0:	9005883a 	mov	r2,r18
    28b4:	903e090e 	bge	r18,zero,20dc <__alt_mem_onchip_memory2_0+0xfbfe20dc>
    28b8:	003faa06 	br	2764 <__alt_mem_onchip_memory2_0+0xfbfe2764>
    28bc:	d8802344 	addi	r2,sp,141
    28c0:	003f8706 	br	26e0 <__alt_mem_onchip_memory2_0+0xfbfe26e0>
    28c4:	d8c02617 	ldw	r3,152(sp)
    28c8:	003f5806 	br	262c <__alt_mem_onchip_memory2_0+0xfbfe262c>

000028cc <__vfprintf_internal>:
    28cc:	2007883a 	mov	r3,r4
    28d0:	01000074 	movhi	r4,1
    28d4:	21074e04 	addi	r4,r4,7480
    28d8:	21000017 	ldw	r4,0(r4)
    28dc:	2805883a 	mov	r2,r5
    28e0:	300f883a 	mov	r7,r6
    28e4:	180b883a 	mov	r5,r3
    28e8:	100d883a 	mov	r6,r2
    28ec:	000097c1 	jmpi	97c <___vfprintf_internal_r>

000028f0 <__sbprintf>:
    28f0:	2880030b 	ldhu	r2,12(r5)
    28f4:	2ac01917 	ldw	r11,100(r5)
    28f8:	2a80038b 	ldhu	r10,14(r5)
    28fc:	2a400717 	ldw	r9,28(r5)
    2900:	2a000917 	ldw	r8,36(r5)
    2904:	defee204 	addi	sp,sp,-1144
    2908:	00c10004 	movi	r3,1024
    290c:	dc011a15 	stw	r16,1128(sp)
    2910:	10bfff4c 	andi	r2,r2,65533
    2914:	2821883a 	mov	r16,r5
    2918:	d8cb883a 	add	r5,sp,r3
    291c:	dc811c15 	stw	r18,1136(sp)
    2920:	dc411b15 	stw	r17,1132(sp)
    2924:	dfc11d15 	stw	ra,1140(sp)
    2928:	2025883a 	mov	r18,r4
    292c:	d881030d 	sth	r2,1036(sp)
    2930:	dac11915 	stw	r11,1124(sp)
    2934:	da81038d 	sth	r10,1038(sp)
    2938:	da410715 	stw	r9,1052(sp)
    293c:	da010915 	stw	r8,1060(sp)
    2940:	dec10015 	stw	sp,1024(sp)
    2944:	dec10415 	stw	sp,1040(sp)
    2948:	d8c10215 	stw	r3,1032(sp)
    294c:	d8c10515 	stw	r3,1044(sp)
    2950:	d8010615 	stw	zero,1048(sp)
    2954:	000097c0 	call	97c <___vfprintf_internal_r>
    2958:	1023883a 	mov	r17,r2
    295c:	10000416 	blt	r2,zero,2970 <__sbprintf+0x80>
    2960:	9009883a 	mov	r4,r18
    2964:	d9410004 	addi	r5,sp,1024
    2968:	00046300 	call	4630 <_fflush_r>
    296c:	10000d1e 	bne	r2,zero,29a4 <__sbprintf+0xb4>
    2970:	d8c1030b 	ldhu	r3,1036(sp)
    2974:	18c0100c 	andi	r3,r3,64
    2978:	18000326 	beq	r3,zero,2988 <__sbprintf+0x98>
    297c:	8080030b 	ldhu	r2,12(r16)
    2980:	10801014 	ori	r2,r2,64
    2984:	8080030d 	sth	r2,12(r16)
    2988:	8805883a 	mov	r2,r17
    298c:	dfc11d17 	ldw	ra,1140(sp)
    2990:	dc811c17 	ldw	r18,1136(sp)
    2994:	dc411b17 	ldw	r17,1132(sp)
    2998:	dc011a17 	ldw	r16,1128(sp)
    299c:	dec11e04 	addi	sp,sp,1144
    29a0:	f800283a 	ret
    29a4:	047fffc4 	movi	r17,-1
    29a8:	003ff106 	br	2970 <__alt_mem_onchip_memory2_0+0xfbfe2970>

000029ac <__swsetup_r>:
    29ac:	00800074 	movhi	r2,1
    29b0:	defffd04 	addi	sp,sp,-12
    29b4:	10874e04 	addi	r2,r2,7480
    29b8:	dc400115 	stw	r17,4(sp)
    29bc:	2023883a 	mov	r17,r4
    29c0:	11000017 	ldw	r4,0(r2)
    29c4:	dc000015 	stw	r16,0(sp)
    29c8:	dfc00215 	stw	ra,8(sp)
    29cc:	2821883a 	mov	r16,r5
    29d0:	20000226 	beq	r4,zero,29dc <__swsetup_r+0x30>
    29d4:	20c00e17 	ldw	r3,56(r4)
    29d8:	18003126 	beq	r3,zero,2aa0 <__swsetup_r+0xf4>
    29dc:	8080030b 	ldhu	r2,12(r16)
    29e0:	10c0020c 	andi	r3,r2,8
    29e4:	100d883a 	mov	r6,r2
    29e8:	18000f26 	beq	r3,zero,2a28 <__swsetup_r+0x7c>
    29ec:	80c00417 	ldw	r3,16(r16)
    29f0:	18001526 	beq	r3,zero,2a48 <__swsetup_r+0x9c>
    29f4:	1100004c 	andi	r4,r2,1
    29f8:	20001c1e 	bne	r4,zero,2a6c <__swsetup_r+0xc0>
    29fc:	1080008c 	andi	r2,r2,2
    2a00:	1000291e 	bne	r2,zero,2aa8 <__swsetup_r+0xfc>
    2a04:	80800517 	ldw	r2,20(r16)
    2a08:	80800215 	stw	r2,8(r16)
    2a0c:	18001c26 	beq	r3,zero,2a80 <__swsetup_r+0xd4>
    2a10:	0005883a 	mov	r2,zero
    2a14:	dfc00217 	ldw	ra,8(sp)
    2a18:	dc400117 	ldw	r17,4(sp)
    2a1c:	dc000017 	ldw	r16,0(sp)
    2a20:	dec00304 	addi	sp,sp,12
    2a24:	f800283a 	ret
    2a28:	3080040c 	andi	r2,r6,16
    2a2c:	10002e26 	beq	r2,zero,2ae8 <__swsetup_r+0x13c>
    2a30:	3080010c 	andi	r2,r6,4
    2a34:	10001e1e 	bne	r2,zero,2ab0 <__swsetup_r+0x104>
    2a38:	80c00417 	ldw	r3,16(r16)
    2a3c:	30800214 	ori	r2,r6,8
    2a40:	8080030d 	sth	r2,12(r16)
    2a44:	183feb1e 	bne	r3,zero,29f4 <__alt_mem_onchip_memory2_0+0xfbfe29f4>
    2a48:	1140a00c 	andi	r5,r2,640
    2a4c:	01008004 	movi	r4,512
    2a50:	293fe826 	beq	r5,r4,29f4 <__alt_mem_onchip_memory2_0+0xfbfe29f4>
    2a54:	8809883a 	mov	r4,r17
    2a58:	800b883a 	mov	r5,r16
    2a5c:	00055980 	call	5598 <__smakebuf_r>
    2a60:	8080030b 	ldhu	r2,12(r16)
    2a64:	80c00417 	ldw	r3,16(r16)
    2a68:	003fe206 	br	29f4 <__alt_mem_onchip_memory2_0+0xfbfe29f4>
    2a6c:	80800517 	ldw	r2,20(r16)
    2a70:	80000215 	stw	zero,8(r16)
    2a74:	0085c83a 	sub	r2,zero,r2
    2a78:	80800615 	stw	r2,24(r16)
    2a7c:	183fe41e 	bne	r3,zero,2a10 <__alt_mem_onchip_memory2_0+0xfbfe2a10>
    2a80:	80c0030b 	ldhu	r3,12(r16)
    2a84:	0005883a 	mov	r2,zero
    2a88:	1900200c 	andi	r4,r3,128
    2a8c:	203fe126 	beq	r4,zero,2a14 <__alt_mem_onchip_memory2_0+0xfbfe2a14>
    2a90:	18c01014 	ori	r3,r3,64
    2a94:	80c0030d 	sth	r3,12(r16)
    2a98:	00bfffc4 	movi	r2,-1
    2a9c:	003fdd06 	br	2a14 <__alt_mem_onchip_memory2_0+0xfbfe2a14>
    2aa0:	0004a0c0 	call	4a0c <__sinit>
    2aa4:	003fcd06 	br	29dc <__alt_mem_onchip_memory2_0+0xfbfe29dc>
    2aa8:	0005883a 	mov	r2,zero
    2aac:	003fd606 	br	2a08 <__alt_mem_onchip_memory2_0+0xfbfe2a08>
    2ab0:	81400c17 	ldw	r5,48(r16)
    2ab4:	28000626 	beq	r5,zero,2ad0 <__swsetup_r+0x124>
    2ab8:	80801004 	addi	r2,r16,64
    2abc:	28800326 	beq	r5,r2,2acc <__swsetup_r+0x120>
    2ac0:	8809883a 	mov	r4,r17
    2ac4:	0004b800 	call	4b80 <_free_r>
    2ac8:	8180030b 	ldhu	r6,12(r16)
    2acc:	80000c15 	stw	zero,48(r16)
    2ad0:	80c00417 	ldw	r3,16(r16)
    2ad4:	00bff6c4 	movi	r2,-37
    2ad8:	118c703a 	and	r6,r2,r6
    2adc:	80000115 	stw	zero,4(r16)
    2ae0:	80c00015 	stw	r3,0(r16)
    2ae4:	003fd506 	br	2a3c <__alt_mem_onchip_memory2_0+0xfbfe2a3c>
    2ae8:	00800244 	movi	r2,9
    2aec:	88800015 	stw	r2,0(r17)
    2af0:	30801014 	ori	r2,r6,64
    2af4:	8080030d 	sth	r2,12(r16)
    2af8:	00bfffc4 	movi	r2,-1
    2afc:	003fc506 	br	2a14 <__alt_mem_onchip_memory2_0+0xfbfe2a14>

00002b00 <quorem>:
    2b00:	defff704 	addi	sp,sp,-36
    2b04:	dc800215 	stw	r18,8(sp)
    2b08:	20800417 	ldw	r2,16(r4)
    2b0c:	2c800417 	ldw	r18,16(r5)
    2b10:	dfc00815 	stw	ra,32(sp)
    2b14:	ddc00715 	stw	r23,28(sp)
    2b18:	dd800615 	stw	r22,24(sp)
    2b1c:	dd400515 	stw	r21,20(sp)
    2b20:	dd000415 	stw	r20,16(sp)
    2b24:	dcc00315 	stw	r19,12(sp)
    2b28:	dc400115 	stw	r17,4(sp)
    2b2c:	dc000015 	stw	r16,0(sp)
    2b30:	14807116 	blt	r2,r18,2cf8 <quorem+0x1f8>
    2b34:	94bfffc4 	addi	r18,r18,-1
    2b38:	94ad883a 	add	r22,r18,r18
    2b3c:	b5ad883a 	add	r22,r22,r22
    2b40:	2c400504 	addi	r17,r5,20
    2b44:	8da9883a 	add	r20,r17,r22
    2b48:	25400504 	addi	r21,r4,20
    2b4c:	282f883a 	mov	r23,r5
    2b50:	adad883a 	add	r22,r21,r22
    2b54:	a1400017 	ldw	r5,0(r20)
    2b58:	2021883a 	mov	r16,r4
    2b5c:	b1000017 	ldw	r4,0(r22)
    2b60:	29400044 	addi	r5,r5,1
    2b64:	000a4800 	call	a480 <__udivsi3>
    2b68:	1027883a 	mov	r19,r2
    2b6c:	10002c26 	beq	r2,zero,2c20 <quorem+0x120>
    2b70:	a813883a 	mov	r9,r21
    2b74:	8811883a 	mov	r8,r17
    2b78:	0009883a 	mov	r4,zero
    2b7c:	000d883a 	mov	r6,zero
    2b80:	41c00017 	ldw	r7,0(r8)
    2b84:	49400017 	ldw	r5,0(r9)
    2b88:	42000104 	addi	r8,r8,4
    2b8c:	38bfffcc 	andi	r2,r7,65535
    2b90:	14c5383a 	mul	r2,r2,r19
    2b94:	380ed43a 	srli	r7,r7,16
    2b98:	28ffffcc 	andi	r3,r5,65535
    2b9c:	2085883a 	add	r2,r4,r2
    2ba0:	1008d43a 	srli	r4,r2,16
    2ba4:	3ccf383a 	mul	r7,r7,r19
    2ba8:	198d883a 	add	r6,r3,r6
    2bac:	10ffffcc 	andi	r3,r2,65535
    2bb0:	30c7c83a 	sub	r3,r6,r3
    2bb4:	280ad43a 	srli	r5,r5,16
    2bb8:	21c9883a 	add	r4,r4,r7
    2bbc:	180dd43a 	srai	r6,r3,16
    2bc0:	20bfffcc 	andi	r2,r4,65535
    2bc4:	288bc83a 	sub	r5,r5,r2
    2bc8:	298b883a 	add	r5,r5,r6
    2bcc:	280e943a 	slli	r7,r5,16
    2bd0:	18ffffcc 	andi	r3,r3,65535
    2bd4:	2008d43a 	srli	r4,r4,16
    2bd8:	38ceb03a 	or	r7,r7,r3
    2bdc:	49c00015 	stw	r7,0(r9)
    2be0:	280dd43a 	srai	r6,r5,16
    2be4:	4a400104 	addi	r9,r9,4
    2be8:	a23fe52e 	bgeu	r20,r8,2b80 <__alt_mem_onchip_memory2_0+0xfbfe2b80>
    2bec:	b0800017 	ldw	r2,0(r22)
    2bf0:	10000b1e 	bne	r2,zero,2c20 <quorem+0x120>
    2bf4:	b0bfff04 	addi	r2,r22,-4
    2bf8:	a880082e 	bgeu	r21,r2,2c1c <quorem+0x11c>
    2bfc:	b0ffff17 	ldw	r3,-4(r22)
    2c00:	18000326 	beq	r3,zero,2c10 <quorem+0x110>
    2c04:	00000506 	br	2c1c <quorem+0x11c>
    2c08:	10c00017 	ldw	r3,0(r2)
    2c0c:	1800031e 	bne	r3,zero,2c1c <quorem+0x11c>
    2c10:	10bfff04 	addi	r2,r2,-4
    2c14:	94bfffc4 	addi	r18,r18,-1
    2c18:	a8bffb36 	bltu	r21,r2,2c08 <__alt_mem_onchip_memory2_0+0xfbfe2c08>
    2c1c:	84800415 	stw	r18,16(r16)
    2c20:	8009883a 	mov	r4,r16
    2c24:	b80b883a 	mov	r5,r23
    2c28:	0006a100 	call	6a10 <__mcmp>
    2c2c:	10002616 	blt	r2,zero,2cc8 <quorem+0x1c8>
    2c30:	9cc00044 	addi	r19,r19,1
    2c34:	a80d883a 	mov	r6,r21
    2c38:	000b883a 	mov	r5,zero
    2c3c:	31000017 	ldw	r4,0(r6)
    2c40:	88800017 	ldw	r2,0(r17)
    2c44:	31800104 	addi	r6,r6,4
    2c48:	20ffffcc 	andi	r3,r4,65535
    2c4c:	194b883a 	add	r5,r3,r5
    2c50:	10ffffcc 	andi	r3,r2,65535
    2c54:	28c7c83a 	sub	r3,r5,r3
    2c58:	1004d43a 	srli	r2,r2,16
    2c5c:	2008d43a 	srli	r4,r4,16
    2c60:	180bd43a 	srai	r5,r3,16
    2c64:	18ffffcc 	andi	r3,r3,65535
    2c68:	2089c83a 	sub	r4,r4,r2
    2c6c:	2149883a 	add	r4,r4,r5
    2c70:	2004943a 	slli	r2,r4,16
    2c74:	8c400104 	addi	r17,r17,4
    2c78:	200bd43a 	srai	r5,r4,16
    2c7c:	10c6b03a 	or	r3,r2,r3
    2c80:	30ffff15 	stw	r3,-4(r6)
    2c84:	a47fed2e 	bgeu	r20,r17,2c3c <__alt_mem_onchip_memory2_0+0xfbfe2c3c>
    2c88:	9485883a 	add	r2,r18,r18
    2c8c:	1085883a 	add	r2,r2,r2
    2c90:	a887883a 	add	r3,r21,r2
    2c94:	18800017 	ldw	r2,0(r3)
    2c98:	10000b1e 	bne	r2,zero,2cc8 <quorem+0x1c8>
    2c9c:	18bfff04 	addi	r2,r3,-4
    2ca0:	a880082e 	bgeu	r21,r2,2cc4 <quorem+0x1c4>
    2ca4:	18ffff17 	ldw	r3,-4(r3)
    2ca8:	18000326 	beq	r3,zero,2cb8 <quorem+0x1b8>
    2cac:	00000506 	br	2cc4 <quorem+0x1c4>
    2cb0:	10c00017 	ldw	r3,0(r2)
    2cb4:	1800031e 	bne	r3,zero,2cc4 <quorem+0x1c4>
    2cb8:	10bfff04 	addi	r2,r2,-4
    2cbc:	94bfffc4 	addi	r18,r18,-1
    2cc0:	a8bffb36 	bltu	r21,r2,2cb0 <__alt_mem_onchip_memory2_0+0xfbfe2cb0>
    2cc4:	84800415 	stw	r18,16(r16)
    2cc8:	9805883a 	mov	r2,r19
    2ccc:	dfc00817 	ldw	ra,32(sp)
    2cd0:	ddc00717 	ldw	r23,28(sp)
    2cd4:	dd800617 	ldw	r22,24(sp)
    2cd8:	dd400517 	ldw	r21,20(sp)
    2cdc:	dd000417 	ldw	r20,16(sp)
    2ce0:	dcc00317 	ldw	r19,12(sp)
    2ce4:	dc800217 	ldw	r18,8(sp)
    2ce8:	dc400117 	ldw	r17,4(sp)
    2cec:	dc000017 	ldw	r16,0(sp)
    2cf0:	dec00904 	addi	sp,sp,36
    2cf4:	f800283a 	ret
    2cf8:	0005883a 	mov	r2,zero
    2cfc:	003ff306 	br	2ccc <__alt_mem_onchip_memory2_0+0xfbfe2ccc>

00002d00 <_dtoa_r>:
    2d00:	20801017 	ldw	r2,64(r4)
    2d04:	deffde04 	addi	sp,sp,-136
    2d08:	dd401d15 	stw	r21,116(sp)
    2d0c:	dcc01b15 	stw	r19,108(sp)
    2d10:	dc801a15 	stw	r18,104(sp)
    2d14:	dc401915 	stw	r17,100(sp)
    2d18:	dc001815 	stw	r16,96(sp)
    2d1c:	dfc02115 	stw	ra,132(sp)
    2d20:	df002015 	stw	fp,128(sp)
    2d24:	ddc01f15 	stw	r23,124(sp)
    2d28:	dd801e15 	stw	r22,120(sp)
    2d2c:	dd001c15 	stw	r20,112(sp)
    2d30:	d9c00315 	stw	r7,12(sp)
    2d34:	2021883a 	mov	r16,r4
    2d38:	302b883a 	mov	r21,r6
    2d3c:	2825883a 	mov	r18,r5
    2d40:	dc402417 	ldw	r17,144(sp)
    2d44:	3027883a 	mov	r19,r6
    2d48:	10000826 	beq	r2,zero,2d6c <_dtoa_r+0x6c>
    2d4c:	21801117 	ldw	r6,68(r4)
    2d50:	00c00044 	movi	r3,1
    2d54:	100b883a 	mov	r5,r2
    2d58:	1986983a 	sll	r3,r3,r6
    2d5c:	11800115 	stw	r6,4(r2)
    2d60:	10c00215 	stw	r3,8(r2)
    2d64:	00061e40 	call	61e4 <_Bfree>
    2d68:	80001015 	stw	zero,64(r16)
    2d6c:	a8002d16 	blt	r21,zero,2e24 <_dtoa_r+0x124>
    2d70:	88000015 	stw	zero,0(r17)
    2d74:	a8dffc2c 	andhi	r3,r21,32752
    2d78:	009ffc34 	movhi	r2,32752
    2d7c:	18801b26 	beq	r3,r2,2dec <_dtoa_r+0xec>
    2d80:	9009883a 	mov	r4,r18
    2d84:	980b883a 	mov	r5,r19
    2d88:	000d883a 	mov	r6,zero
    2d8c:	000f883a 	mov	r7,zero
    2d90:	000b5f80 	call	b5f8 <__eqdf2>
    2d94:	10002a1e 	bne	r2,zero,2e40 <_dtoa_r+0x140>
    2d98:	d8c02317 	ldw	r3,140(sp)
    2d9c:	d9002517 	ldw	r4,148(sp)
    2da0:	00800044 	movi	r2,1
    2da4:	18800015 	stw	r2,0(r3)
    2da8:	2001a226 	beq	r4,zero,3434 <_dtoa_r+0x734>
    2dac:	00800074 	movhi	r2,1
    2db0:	10bfae44 	addi	r2,r2,-327
    2db4:	20800015 	stw	r2,0(r4)
    2db8:	10bfffc4 	addi	r2,r2,-1
    2dbc:	dfc02117 	ldw	ra,132(sp)
    2dc0:	df002017 	ldw	fp,128(sp)
    2dc4:	ddc01f17 	ldw	r23,124(sp)
    2dc8:	dd801e17 	ldw	r22,120(sp)
    2dcc:	dd401d17 	ldw	r21,116(sp)
    2dd0:	dd001c17 	ldw	r20,112(sp)
    2dd4:	dcc01b17 	ldw	r19,108(sp)
    2dd8:	dc801a17 	ldw	r18,104(sp)
    2ddc:	dc401917 	ldw	r17,100(sp)
    2de0:	dc001817 	ldw	r16,96(sp)
    2de4:	dec02204 	addi	sp,sp,136
    2de8:	f800283a 	ret
    2dec:	d8c02317 	ldw	r3,140(sp)
    2df0:	0089c3c4 	movi	r2,9999
    2df4:	18800015 	stw	r2,0(r3)
    2df8:	90017c26 	beq	r18,zero,33ec <_dtoa_r+0x6ec>
    2dfc:	00800074 	movhi	r2,1
    2e00:	10bfba04 	addi	r2,r2,-280
    2e04:	d9002517 	ldw	r4,148(sp)
    2e08:	203fec26 	beq	r4,zero,2dbc <__alt_mem_onchip_memory2_0+0xfbfe2dbc>
    2e0c:	10c000c7 	ldb	r3,3(r2)
    2e10:	18017d1e 	bne	r3,zero,3408 <_dtoa_r+0x708>
    2e14:	10c000c4 	addi	r3,r2,3
    2e18:	d9802517 	ldw	r6,148(sp)
    2e1c:	30c00015 	stw	r3,0(r6)
    2e20:	003fe606 	br	2dbc <__alt_mem_onchip_memory2_0+0xfbfe2dbc>
    2e24:	04e00034 	movhi	r19,32768
    2e28:	9cffffc4 	addi	r19,r19,-1
    2e2c:	00800044 	movi	r2,1
    2e30:	ace6703a 	and	r19,r21,r19
    2e34:	88800015 	stw	r2,0(r17)
    2e38:	982b883a 	mov	r21,r19
    2e3c:	003fcd06 	br	2d74 <__alt_mem_onchip_memory2_0+0xfbfe2d74>
    2e40:	d8800204 	addi	r2,sp,8
    2e44:	a822d53a 	srli	r17,r21,20
    2e48:	d8800015 	stw	r2,0(sp)
    2e4c:	8009883a 	mov	r4,r16
    2e50:	900b883a 	mov	r5,r18
    2e54:	980d883a 	mov	r6,r19
    2e58:	d9c00104 	addi	r7,sp,4
    2e5c:	0006d840 	call	6d84 <__d2b>
    2e60:	1039883a 	mov	fp,r2
    2e64:	88016a1e 	bne	r17,zero,3410 <_dtoa_r+0x710>
    2e68:	dd000217 	ldw	r20,8(sp)
    2e6c:	dc400117 	ldw	r17,4(sp)
    2e70:	00befbc4 	movi	r2,-1041
    2e74:	a463883a 	add	r17,r20,r17
    2e78:	8882ea16 	blt	r17,r2,3a24 <_dtoa_r+0xd24>
    2e7c:	00bf0384 	movi	r2,-1010
    2e80:	1445c83a 	sub	r2,r2,r17
    2e84:	89010484 	addi	r4,r17,1042
    2e88:	a8aa983a 	sll	r21,r21,r2
    2e8c:	9108d83a 	srl	r4,r18,r4
    2e90:	a908b03a 	or	r4,r21,r4
    2e94:	000c9880 	call	c988 <__floatunsidf>
    2e98:	017f8434 	movhi	r5,65040
    2e9c:	01800044 	movi	r6,1
    2ea0:	1009883a 	mov	r4,r2
    2ea4:	194b883a 	add	r5,r3,r5
    2ea8:	8c7fffc4 	addi	r17,r17,-1
    2eac:	d9800f15 	stw	r6,60(sp)
    2eb0:	000d883a 	mov	r6,zero
    2eb4:	01cffe34 	movhi	r7,16376
    2eb8:	000bf600 	call	bf60 <__subdf3>
    2ebc:	0198dbf4 	movhi	r6,25455
    2ec0:	01cff4f4 	movhi	r7,16339
    2ec4:	1009883a 	mov	r4,r2
    2ec8:	180b883a 	mov	r5,r3
    2ecc:	3190d844 	addi	r6,r6,17249
    2ed0:	39e1e9c4 	addi	r7,r7,-30809
    2ed4:	000b83c0 	call	b83c <__muldf3>
    2ed8:	01a2d874 	movhi	r6,35681
    2edc:	01cff1f4 	movhi	r7,16327
    2ee0:	180b883a 	mov	r5,r3
    2ee4:	31b22cc4 	addi	r6,r6,-14157
    2ee8:	39e28a04 	addi	r7,r7,-30168
    2eec:	1009883a 	mov	r4,r2
    2ef0:	000a4900 	call	a490 <__adddf3>
    2ef4:	8809883a 	mov	r4,r17
    2ef8:	102d883a 	mov	r22,r2
    2efc:	182b883a 	mov	r21,r3
    2f00:	000c8b80 	call	c8b8 <__floatsidf>
    2f04:	019427f4 	movhi	r6,20639
    2f08:	01cff4f4 	movhi	r7,16339
    2f0c:	1009883a 	mov	r4,r2
    2f10:	180b883a 	mov	r5,r3
    2f14:	319e7ec4 	addi	r6,r6,31227
    2f18:	39d104c4 	addi	r7,r7,17427
    2f1c:	000b83c0 	call	b83c <__muldf3>
    2f20:	b009883a 	mov	r4,r22
    2f24:	a80b883a 	mov	r5,r21
    2f28:	100d883a 	mov	r6,r2
    2f2c:	180f883a 	mov	r7,r3
    2f30:	000a4900 	call	a490 <__adddf3>
    2f34:	1009883a 	mov	r4,r2
    2f38:	180b883a 	mov	r5,r3
    2f3c:	102d883a 	mov	r22,r2
    2f40:	182b883a 	mov	r21,r3
    2f44:	000c8300 	call	c830 <__fixdfsi>
    2f48:	b009883a 	mov	r4,r22
    2f4c:	a80b883a 	mov	r5,r21
    2f50:	000d883a 	mov	r6,zero
    2f54:	000f883a 	mov	r7,zero
    2f58:	d8800515 	stw	r2,20(sp)
    2f5c:	000b75c0 	call	b75c <__ledf2>
    2f60:	10023116 	blt	r2,zero,3828 <_dtoa_r+0xb28>
    2f64:	d8c00517 	ldw	r3,20(sp)
    2f68:	00800584 	movi	r2,22
    2f6c:	10c21f36 	bltu	r2,r3,37ec <_dtoa_r+0xaec>
    2f70:	180490fa 	slli	r2,r3,3
    2f74:	00c00074 	movhi	r3,1
    2f78:	18ffd604 	addi	r3,r3,-168
    2f7c:	1885883a 	add	r2,r3,r2
    2f80:	11000017 	ldw	r4,0(r2)
    2f84:	11400117 	ldw	r5,4(r2)
    2f88:	900d883a 	mov	r6,r18
    2f8c:	980f883a 	mov	r7,r19
    2f90:	000b67c0 	call	b67c <__gedf2>
    2f94:	0082a70e 	bge	zero,r2,3a34 <_dtoa_r+0xd34>
    2f98:	d9000517 	ldw	r4,20(sp)
    2f9c:	d8000d15 	stw	zero,52(sp)
    2fa0:	213fffc4 	addi	r4,r4,-1
    2fa4:	d9000515 	stw	r4,20(sp)
    2fa8:	a463c83a 	sub	r17,r20,r17
    2fac:	8dbfffc4 	addi	r22,r17,-1
    2fb0:	b0021916 	blt	r22,zero,3818 <_dtoa_r+0xb18>
    2fb4:	d8000815 	stw	zero,32(sp)
    2fb8:	d8800517 	ldw	r2,20(sp)
    2fbc:	10020e16 	blt	r2,zero,37f8 <_dtoa_r+0xaf8>
    2fc0:	b0ad883a 	add	r22,r22,r2
    2fc4:	d8800a15 	stw	r2,40(sp)
    2fc8:	d8000915 	stw	zero,36(sp)
    2fcc:	d8c00317 	ldw	r3,12(sp)
    2fd0:	00800244 	movi	r2,9
    2fd4:	10c11a36 	bltu	r2,r3,3440 <_dtoa_r+0x740>
    2fd8:	00800144 	movi	r2,5
    2fdc:	10c4fc0e 	bge	r2,r3,43d0 <_dtoa_r+0x16d0>
    2fe0:	18ffff04 	addi	r3,r3,-4
    2fe4:	d8c00315 	stw	r3,12(sp)
    2fe8:	0029883a 	mov	r20,zero
    2fec:	d9800317 	ldw	r6,12(sp)
    2ff0:	008000c4 	movi	r2,3
    2ff4:	3083bd26 	beq	r6,r2,3eec <_dtoa_r+0x11ec>
    2ff8:	1183670e 	bge	r2,r6,3d98 <_dtoa_r+0x1098>
    2ffc:	d8c00317 	ldw	r3,12(sp)
    3000:	00800104 	movi	r2,4
    3004:	1882e726 	beq	r3,r2,3ba4 <_dtoa_r+0xea4>
    3008:	00800144 	movi	r2,5
    300c:	1884f21e 	bne	r3,r2,43d8 <_dtoa_r+0x16d8>
    3010:	00800044 	movi	r2,1
    3014:	d8800b15 	stw	r2,44(sp)
    3018:	d8c02217 	ldw	r3,136(sp)
    301c:	d9000517 	ldw	r4,20(sp)
    3020:	1907883a 	add	r3,r3,r4
    3024:	19800044 	addi	r6,r3,1
    3028:	d8c00c15 	stw	r3,48(sp)
    302c:	d9800615 	stw	r6,24(sp)
    3030:	0183c30e 	bge	zero,r6,3f40 <_dtoa_r+0x1240>
    3034:	d9800617 	ldw	r6,24(sp)
    3038:	3023883a 	mov	r17,r6
    303c:	80001115 	stw	zero,68(r16)
    3040:	008005c4 	movi	r2,23
    3044:	1184f62e 	bgeu	r2,r6,4420 <_dtoa_r+0x1720>
    3048:	00c00044 	movi	r3,1
    304c:	00800104 	movi	r2,4
    3050:	1085883a 	add	r2,r2,r2
    3054:	11000504 	addi	r4,r2,20
    3058:	180b883a 	mov	r5,r3
    305c:	18c00044 	addi	r3,r3,1
    3060:	313ffb2e 	bgeu	r6,r4,3050 <__alt_mem_onchip_memory2_0+0xfbfe3050>
    3064:	81401115 	stw	r5,68(r16)
    3068:	8009883a 	mov	r4,r16
    306c:	000613c0 	call	613c <_Balloc>
    3070:	d8800715 	stw	r2,28(sp)
    3074:	80801015 	stw	r2,64(r16)
    3078:	00800384 	movi	r2,14
    307c:	1440fd36 	bltu	r2,r17,3474 <_dtoa_r+0x774>
    3080:	a000fc26 	beq	r20,zero,3474 <_dtoa_r+0x774>
    3084:	d8800517 	ldw	r2,20(sp)
    3088:	0083b90e 	bge	zero,r2,3f70 <_dtoa_r+0x1270>
    308c:	d8c00517 	ldw	r3,20(sp)
    3090:	108003cc 	andi	r2,r2,15
    3094:	100490fa 	slli	r2,r2,3
    3098:	182fd13a 	srai	r23,r3,4
    309c:	00c00074 	movhi	r3,1
    30a0:	18ffd604 	addi	r3,r3,-168
    30a4:	1885883a 	add	r2,r3,r2
    30a8:	b8c0040c 	andi	r3,r23,16
    30ac:	12c00017 	ldw	r11,0(r2)
    30b0:	12800117 	ldw	r10,4(r2)
    30b4:	18039726 	beq	r3,zero,3f14 <_dtoa_r+0x1214>
    30b8:	00800074 	movhi	r2,1
    30bc:	10bfcc04 	addi	r2,r2,-208
    30c0:	11800817 	ldw	r6,32(r2)
    30c4:	11c00917 	ldw	r7,36(r2)
    30c8:	9009883a 	mov	r4,r18
    30cc:	980b883a 	mov	r5,r19
    30d0:	da801615 	stw	r10,88(sp)
    30d4:	dac01515 	stw	r11,84(sp)
    30d8:	000ad2c0 	call	ad2c <__divdf3>
    30dc:	da801617 	ldw	r10,88(sp)
    30e0:	dac01517 	ldw	r11,84(sp)
    30e4:	bdc003cc 	andi	r23,r23,15
    30e8:	044000c4 	movi	r17,3
    30ec:	d8800e15 	stw	r2,56(sp)
    30f0:	182b883a 	mov	r21,r3
    30f4:	b8001126 	beq	r23,zero,313c <_dtoa_r+0x43c>
    30f8:	05000074 	movhi	r20,1
    30fc:	a53fcc04 	addi	r20,r20,-208
    3100:	5805883a 	mov	r2,r11
    3104:	5007883a 	mov	r3,r10
    3108:	b980004c 	andi	r6,r23,1
    310c:	1009883a 	mov	r4,r2
    3110:	b82fd07a 	srai	r23,r23,1
    3114:	180b883a 	mov	r5,r3
    3118:	30000426 	beq	r6,zero,312c <_dtoa_r+0x42c>
    311c:	a1800017 	ldw	r6,0(r20)
    3120:	a1c00117 	ldw	r7,4(r20)
    3124:	8c400044 	addi	r17,r17,1
    3128:	000b83c0 	call	b83c <__muldf3>
    312c:	a5000204 	addi	r20,r20,8
    3130:	b83ff51e 	bne	r23,zero,3108 <__alt_mem_onchip_memory2_0+0xfbfe3108>
    3134:	1017883a 	mov	r11,r2
    3138:	1815883a 	mov	r10,r3
    313c:	d9000e17 	ldw	r4,56(sp)
    3140:	a80b883a 	mov	r5,r21
    3144:	580d883a 	mov	r6,r11
    3148:	500f883a 	mov	r7,r10
    314c:	000ad2c0 	call	ad2c <__divdf3>
    3150:	1029883a 	mov	r20,r2
    3154:	182b883a 	mov	r21,r3
    3158:	d9800d17 	ldw	r6,52(sp)
    315c:	30000626 	beq	r6,zero,3178 <_dtoa_r+0x478>
    3160:	a009883a 	mov	r4,r20
    3164:	a80b883a 	mov	r5,r21
    3168:	000d883a 	mov	r6,zero
    316c:	01cffc34 	movhi	r7,16368
    3170:	000b75c0 	call	b75c <__ledf2>
    3174:	10043216 	blt	r2,zero,4240 <_dtoa_r+0x1540>
    3178:	8809883a 	mov	r4,r17
    317c:	000c8b80 	call	c8b8 <__floatsidf>
    3180:	1009883a 	mov	r4,r2
    3184:	180b883a 	mov	r5,r3
    3188:	a00d883a 	mov	r6,r20
    318c:	a80f883a 	mov	r7,r21
    3190:	000b83c0 	call	b83c <__muldf3>
    3194:	000d883a 	mov	r6,zero
    3198:	1009883a 	mov	r4,r2
    319c:	180b883a 	mov	r5,r3
    31a0:	01d00734 	movhi	r7,16412
    31a4:	000a4900 	call	a490 <__adddf3>
    31a8:	1023883a 	mov	r17,r2
    31ac:	d9800617 	ldw	r6,24(sp)
    31b0:	00bf3034 	movhi	r2,64704
    31b4:	1885883a 	add	r2,r3,r2
    31b8:	d8800e15 	stw	r2,56(sp)
    31bc:	30032e26 	beq	r6,zero,3e78 <_dtoa_r+0x1178>
    31c0:	d8c00517 	ldw	r3,20(sp)
    31c4:	da800617 	ldw	r10,24(sp)
    31c8:	d8c01215 	stw	r3,72(sp)
    31cc:	d9000b17 	ldw	r4,44(sp)
    31d0:	2003b026 	beq	r4,zero,4094 <_dtoa_r+0x1394>
    31d4:	50bfffc4 	addi	r2,r10,-1
    31d8:	100490fa 	slli	r2,r2,3
    31dc:	00c00074 	movhi	r3,1
    31e0:	18ffd604 	addi	r3,r3,-168
    31e4:	1885883a 	add	r2,r3,r2
    31e8:	11800017 	ldw	r6,0(r2)
    31ec:	11c00117 	ldw	r7,4(r2)
    31f0:	d8800717 	ldw	r2,28(sp)
    31f4:	0009883a 	mov	r4,zero
    31f8:	014ff834 	movhi	r5,16352
    31fc:	da801615 	stw	r10,88(sp)
    3200:	15c00044 	addi	r23,r2,1
    3204:	000ad2c0 	call	ad2c <__divdf3>
    3208:	d9c00e17 	ldw	r7,56(sp)
    320c:	880d883a 	mov	r6,r17
    3210:	1009883a 	mov	r4,r2
    3214:	180b883a 	mov	r5,r3
    3218:	000bf600 	call	bf60 <__subdf3>
    321c:	a80b883a 	mov	r5,r21
    3220:	a009883a 	mov	r4,r20
    3224:	d8c01015 	stw	r3,64(sp)
    3228:	d8800e15 	stw	r2,56(sp)
    322c:	000c8300 	call	c830 <__fixdfsi>
    3230:	1009883a 	mov	r4,r2
    3234:	d8801715 	stw	r2,92(sp)
    3238:	000c8b80 	call	c8b8 <__floatsidf>
    323c:	a009883a 	mov	r4,r20
    3240:	a80b883a 	mov	r5,r21
    3244:	100d883a 	mov	r6,r2
    3248:	180f883a 	mov	r7,r3
    324c:	000bf600 	call	bf60 <__subdf3>
    3250:	da001717 	ldw	r8,92(sp)
    3254:	1829883a 	mov	r20,r3
    3258:	d8c00717 	ldw	r3,28(sp)
    325c:	d9000e17 	ldw	r4,56(sp)
    3260:	d9401017 	ldw	r5,64(sp)
    3264:	42000c04 	addi	r8,r8,48
    3268:	1023883a 	mov	r17,r2
    326c:	1a000005 	stb	r8,0(r3)
    3270:	880d883a 	mov	r6,r17
    3274:	a00f883a 	mov	r7,r20
    3278:	402b883a 	mov	r21,r8
    327c:	000b67c0 	call	b67c <__gedf2>
    3280:	00844516 	blt	zero,r2,4398 <_dtoa_r+0x1698>
    3284:	0009883a 	mov	r4,zero
    3288:	014ffc34 	movhi	r5,16368
    328c:	880d883a 	mov	r6,r17
    3290:	a00f883a 	mov	r7,r20
    3294:	000bf600 	call	bf60 <__subdf3>
    3298:	d9000e17 	ldw	r4,56(sp)
    329c:	d9401017 	ldw	r5,64(sp)
    32a0:	100d883a 	mov	r6,r2
    32a4:	180f883a 	mov	r7,r3
    32a8:	000b67c0 	call	b67c <__gedf2>
    32ac:	da801617 	ldw	r10,88(sp)
    32b0:	00843616 	blt	zero,r2,438c <_dtoa_r+0x168c>
    32b4:	00800044 	movi	r2,1
    32b8:	12806e0e 	bge	r2,r10,3474 <_dtoa_r+0x774>
    32bc:	d9000717 	ldw	r4,28(sp)
    32c0:	dd801315 	stw	r22,76(sp)
    32c4:	dc001115 	stw	r16,68(sp)
    32c8:	2295883a 	add	r10,r4,r10
    32cc:	dcc01415 	stw	r19,80(sp)
    32d0:	502d883a 	mov	r22,r10
    32d4:	dcc01017 	ldw	r19,64(sp)
    32d8:	b821883a 	mov	r16,r23
    32dc:	dc801015 	stw	r18,64(sp)
    32e0:	dc800e17 	ldw	r18,56(sp)
    32e4:	00000906 	br	330c <_dtoa_r+0x60c>
    32e8:	000bf600 	call	bf60 <__subdf3>
    32ec:	1009883a 	mov	r4,r2
    32f0:	180b883a 	mov	r5,r3
    32f4:	900d883a 	mov	r6,r18
    32f8:	980f883a 	mov	r7,r19
    32fc:	000b75c0 	call	b75c <__ledf2>
    3300:	10040e16 	blt	r2,zero,433c <_dtoa_r+0x163c>
    3304:	b821883a 	mov	r16,r23
    3308:	bd841026 	beq	r23,r22,434c <_dtoa_r+0x164c>
    330c:	9009883a 	mov	r4,r18
    3310:	980b883a 	mov	r5,r19
    3314:	000d883a 	mov	r6,zero
    3318:	01d00934 	movhi	r7,16420
    331c:	000b83c0 	call	b83c <__muldf3>
    3320:	000d883a 	mov	r6,zero
    3324:	01d00934 	movhi	r7,16420
    3328:	8809883a 	mov	r4,r17
    332c:	a00b883a 	mov	r5,r20
    3330:	1025883a 	mov	r18,r2
    3334:	1827883a 	mov	r19,r3
    3338:	000b83c0 	call	b83c <__muldf3>
    333c:	180b883a 	mov	r5,r3
    3340:	1009883a 	mov	r4,r2
    3344:	1823883a 	mov	r17,r3
    3348:	1029883a 	mov	r20,r2
    334c:	000c8300 	call	c830 <__fixdfsi>
    3350:	1009883a 	mov	r4,r2
    3354:	102b883a 	mov	r21,r2
    3358:	000c8b80 	call	c8b8 <__floatsidf>
    335c:	a009883a 	mov	r4,r20
    3360:	880b883a 	mov	r5,r17
    3364:	100d883a 	mov	r6,r2
    3368:	180f883a 	mov	r7,r3
    336c:	000bf600 	call	bf60 <__subdf3>
    3370:	ad400c04 	addi	r21,r21,48
    3374:	1009883a 	mov	r4,r2
    3378:	180b883a 	mov	r5,r3
    337c:	900d883a 	mov	r6,r18
    3380:	980f883a 	mov	r7,r19
    3384:	85400005 	stb	r21,0(r16)
    3388:	1023883a 	mov	r17,r2
    338c:	1829883a 	mov	r20,r3
    3390:	000b75c0 	call	b75c <__ledf2>
    3394:	bdc00044 	addi	r23,r23,1
    3398:	0009883a 	mov	r4,zero
    339c:	014ffc34 	movhi	r5,16368
    33a0:	880d883a 	mov	r6,r17
    33a4:	a00f883a 	mov	r7,r20
    33a8:	103fcf0e 	bge	r2,zero,32e8 <__alt_mem_onchip_memory2_0+0xfbfe32e8>
    33ac:	d9801217 	ldw	r6,72(sp)
    33b0:	dc001117 	ldw	r16,68(sp)
    33b4:	d9800515 	stw	r6,20(sp)
    33b8:	8009883a 	mov	r4,r16
    33bc:	e00b883a 	mov	r5,fp
    33c0:	00061e40 	call	61e4 <_Bfree>
    33c4:	d8c00517 	ldw	r3,20(sp)
    33c8:	d9002317 	ldw	r4,140(sp)
    33cc:	d9802517 	ldw	r6,148(sp)
    33d0:	b8000005 	stb	zero,0(r23)
    33d4:	18800044 	addi	r2,r3,1
    33d8:	20800015 	stw	r2,0(r4)
    33dc:	30027226 	beq	r6,zero,3da8 <_dtoa_r+0x10a8>
    33e0:	35c00015 	stw	r23,0(r6)
    33e4:	d8800717 	ldw	r2,28(sp)
    33e8:	003e7406 	br	2dbc <__alt_mem_onchip_memory2_0+0xfbfe2dbc>
    33ec:	00800434 	movhi	r2,16
    33f0:	10bfffc4 	addi	r2,r2,-1
    33f4:	a8aa703a 	and	r21,r21,r2
    33f8:	a83e801e 	bne	r21,zero,2dfc <__alt_mem_onchip_memory2_0+0xfbfe2dfc>
    33fc:	00800074 	movhi	r2,1
    3400:	10bfb704 	addi	r2,r2,-292
    3404:	003e7f06 	br	2e04 <__alt_mem_onchip_memory2_0+0xfbfe2e04>
    3408:	10c00204 	addi	r3,r2,8
    340c:	003e8206 	br	2e18 <__alt_mem_onchip_memory2_0+0xfbfe2e18>
    3410:	01400434 	movhi	r5,16
    3414:	297fffc4 	addi	r5,r5,-1
    3418:	994a703a 	and	r5,r19,r5
    341c:	9009883a 	mov	r4,r18
    3420:	8c7f0044 	addi	r17,r17,-1023
    3424:	294ffc34 	orhi	r5,r5,16368
    3428:	dd000217 	ldw	r20,8(sp)
    342c:	d8000f15 	stw	zero,60(sp)
    3430:	003e9f06 	br	2eb0 <__alt_mem_onchip_memory2_0+0xfbfe2eb0>
    3434:	00800074 	movhi	r2,1
    3438:	10bfae04 	addi	r2,r2,-328
    343c:	003e5f06 	br	2dbc <__alt_mem_onchip_memory2_0+0xfbfe2dbc>
    3440:	80001115 	stw	zero,68(r16)
    3444:	8009883a 	mov	r4,r16
    3448:	000b883a 	mov	r5,zero
    344c:	000613c0 	call	613c <_Balloc>
    3450:	01bfffc4 	movi	r6,-1
    3454:	d8800715 	stw	r2,28(sp)
    3458:	80801015 	stw	r2,64(r16)
    345c:	00800044 	movi	r2,1
    3460:	d9800c15 	stw	r6,48(sp)
    3464:	d8800b15 	stw	r2,44(sp)
    3468:	d9800615 	stw	r6,24(sp)
    346c:	d8002215 	stw	zero,136(sp)
    3470:	d8000315 	stw	zero,12(sp)
    3474:	d8800117 	ldw	r2,4(sp)
    3478:	10008e16 	blt	r2,zero,36b4 <_dtoa_r+0x9b4>
    347c:	d9000517 	ldw	r4,20(sp)
    3480:	00c00384 	movi	r3,14
    3484:	19008b16 	blt	r3,r4,36b4 <_dtoa_r+0x9b4>
    3488:	200490fa 	slli	r2,r4,3
    348c:	00c00074 	movhi	r3,1
    3490:	d9802217 	ldw	r6,136(sp)
    3494:	18ffd604 	addi	r3,r3,-168
    3498:	1885883a 	add	r2,r3,r2
    349c:	14400017 	ldw	r17,0(r2)
    34a0:	15000117 	ldw	r20,4(r2)
    34a4:	3001c716 	blt	r6,zero,3bc4 <_dtoa_r+0xec4>
    34a8:	880d883a 	mov	r6,r17
    34ac:	a00f883a 	mov	r7,r20
    34b0:	9009883a 	mov	r4,r18
    34b4:	980b883a 	mov	r5,r19
    34b8:	000ad2c0 	call	ad2c <__divdf3>
    34bc:	180b883a 	mov	r5,r3
    34c0:	1009883a 	mov	r4,r2
    34c4:	000c8300 	call	c830 <__fixdfsi>
    34c8:	1009883a 	mov	r4,r2
    34cc:	102d883a 	mov	r22,r2
    34d0:	000c8b80 	call	c8b8 <__floatsidf>
    34d4:	1009883a 	mov	r4,r2
    34d8:	180b883a 	mov	r5,r3
    34dc:	880d883a 	mov	r6,r17
    34e0:	a00f883a 	mov	r7,r20
    34e4:	000b83c0 	call	b83c <__muldf3>
    34e8:	9009883a 	mov	r4,r18
    34ec:	980b883a 	mov	r5,r19
    34f0:	100d883a 	mov	r6,r2
    34f4:	180f883a 	mov	r7,r3
    34f8:	000bf600 	call	bf60 <__subdf3>
    34fc:	d9000717 	ldw	r4,28(sp)
    3500:	d9800617 	ldw	r6,24(sp)
    3504:	180b883a 	mov	r5,r3
    3508:	b0c00c04 	addi	r3,r22,48
    350c:	20c00005 	stb	r3,0(r4)
    3510:	25c00044 	addi	r23,r4,1
    3514:	01000044 	movi	r4,1
    3518:	1011883a 	mov	r8,r2
    351c:	2807883a 	mov	r3,r5
    3520:	31003d26 	beq	r6,r4,3618 <_dtoa_r+0x918>
    3524:	000d883a 	mov	r6,zero
    3528:	01d00934 	movhi	r7,16420
    352c:	1009883a 	mov	r4,r2
    3530:	000b83c0 	call	b83c <__muldf3>
    3534:	1009883a 	mov	r4,r2
    3538:	180b883a 	mov	r5,r3
    353c:	000d883a 	mov	r6,zero
    3540:	000f883a 	mov	r7,zero
    3544:	1027883a 	mov	r19,r2
    3548:	182b883a 	mov	r21,r3
    354c:	000b5f80 	call	b5f8 <__eqdf2>
    3550:	103f9926 	beq	r2,zero,33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    3554:	d8c00617 	ldw	r3,24(sp)
    3558:	d9000717 	ldw	r4,28(sp)
    355c:	b825883a 	mov	r18,r23
    3560:	18bfffc4 	addi	r2,r3,-1
    3564:	20ad883a 	add	r22,r4,r2
    3568:	dc000315 	stw	r16,12(sp)
    356c:	00000a06 	br	3598 <_dtoa_r+0x898>
    3570:	000b83c0 	call	b83c <__muldf3>
    3574:	1009883a 	mov	r4,r2
    3578:	180b883a 	mov	r5,r3
    357c:	000d883a 	mov	r6,zero
    3580:	000f883a 	mov	r7,zero
    3584:	1027883a 	mov	r19,r2
    3588:	182b883a 	mov	r21,r3
    358c:	b825883a 	mov	r18,r23
    3590:	000b5f80 	call	b5f8 <__eqdf2>
    3594:	10022626 	beq	r2,zero,3e30 <_dtoa_r+0x1130>
    3598:	880d883a 	mov	r6,r17
    359c:	a00f883a 	mov	r7,r20
    35a0:	9809883a 	mov	r4,r19
    35a4:	a80b883a 	mov	r5,r21
    35a8:	000ad2c0 	call	ad2c <__divdf3>
    35ac:	180b883a 	mov	r5,r3
    35b0:	1009883a 	mov	r4,r2
    35b4:	000c8300 	call	c830 <__fixdfsi>
    35b8:	1009883a 	mov	r4,r2
    35bc:	1021883a 	mov	r16,r2
    35c0:	000c8b80 	call	c8b8 <__floatsidf>
    35c4:	1009883a 	mov	r4,r2
    35c8:	180b883a 	mov	r5,r3
    35cc:	880d883a 	mov	r6,r17
    35d0:	a00f883a 	mov	r7,r20
    35d4:	000b83c0 	call	b83c <__muldf3>
    35d8:	9809883a 	mov	r4,r19
    35dc:	a80b883a 	mov	r5,r21
    35e0:	100d883a 	mov	r6,r2
    35e4:	180f883a 	mov	r7,r3
    35e8:	000bf600 	call	bf60 <__subdf3>
    35ec:	82000c04 	addi	r8,r16,48
    35f0:	92000005 	stb	r8,0(r18)
    35f4:	1009883a 	mov	r4,r2
    35f8:	180b883a 	mov	r5,r3
    35fc:	000d883a 	mov	r6,zero
    3600:	01d00934 	movhi	r7,16420
    3604:	1011883a 	mov	r8,r2
    3608:	bdc00044 	addi	r23,r23,1
    360c:	95bfd81e 	bne	r18,r22,3570 <__alt_mem_onchip_memory2_0+0xfbfe3570>
    3610:	802d883a 	mov	r22,r16
    3614:	dc000317 	ldw	r16,12(sp)
    3618:	4009883a 	mov	r4,r8
    361c:	180b883a 	mov	r5,r3
    3620:	400d883a 	mov	r6,r8
    3624:	180f883a 	mov	r7,r3
    3628:	000a4900 	call	a490 <__adddf3>
    362c:	8809883a 	mov	r4,r17
    3630:	a00b883a 	mov	r5,r20
    3634:	100d883a 	mov	r6,r2
    3638:	180f883a 	mov	r7,r3
    363c:	1027883a 	mov	r19,r2
    3640:	1825883a 	mov	r18,r3
    3644:	000b75c0 	call	b75c <__ledf2>
    3648:	10000816 	blt	r2,zero,366c <_dtoa_r+0x96c>
    364c:	8809883a 	mov	r4,r17
    3650:	a00b883a 	mov	r5,r20
    3654:	980d883a 	mov	r6,r19
    3658:	900f883a 	mov	r7,r18
    365c:	000b5f80 	call	b5f8 <__eqdf2>
    3660:	103f551e 	bne	r2,zero,33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    3664:	b580004c 	andi	r22,r22,1
    3668:	b03f5326 	beq	r22,zero,33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    366c:	bd7fffc3 	ldbu	r21,-1(r23)
    3670:	b8bfffc4 	addi	r2,r23,-1
    3674:	1007883a 	mov	r3,r2
    3678:	01400e44 	movi	r5,57
    367c:	d9800717 	ldw	r6,28(sp)
    3680:	00000506 	br	3698 <_dtoa_r+0x998>
    3684:	18ffffc4 	addi	r3,r3,-1
    3688:	30825e26 	beq	r6,r2,4004 <_dtoa_r+0x1304>
    368c:	1d400003 	ldbu	r21,0(r3)
    3690:	102f883a 	mov	r23,r2
    3694:	10bfffc4 	addi	r2,r2,-1
    3698:	a9003fcc 	andi	r4,r21,255
    369c:	2100201c 	xori	r4,r4,128
    36a0:	213fe004 	addi	r4,r4,-128
    36a4:	217ff726 	beq	r4,r5,3684 <__alt_mem_onchip_memory2_0+0xfbfe3684>
    36a8:	aa000044 	addi	r8,r21,1
    36ac:	12000005 	stb	r8,0(r2)
    36b0:	003f4106 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    36b4:	d8c00b17 	ldw	r3,44(sp)
    36b8:	18006726 	beq	r3,zero,3858 <_dtoa_r+0xb58>
    36bc:	d9000317 	ldw	r4,12(sp)
    36c0:	00c00044 	movi	r3,1
    36c4:	19016a0e 	bge	r3,r4,3c70 <_dtoa_r+0xf70>
    36c8:	d8800617 	ldw	r2,24(sp)
    36cc:	d8c00917 	ldw	r3,36(sp)
    36d0:	157fffc4 	addi	r21,r2,-1
    36d4:	1d420716 	blt	r3,r21,3ef4 <_dtoa_r+0x11f4>
    36d8:	1d6bc83a 	sub	r21,r3,r21
    36dc:	d8800617 	ldw	r2,24(sp)
    36e0:	1002c716 	blt	r2,zero,4200 <_dtoa_r+0x1500>
    36e4:	dd000817 	ldw	r20,32(sp)
    36e8:	d8800617 	ldw	r2,24(sp)
    36ec:	d9800817 	ldw	r6,32(sp)
    36f0:	8009883a 	mov	r4,r16
    36f4:	01400044 	movi	r5,1
    36f8:	308d883a 	add	r6,r6,r2
    36fc:	d9800815 	stw	r6,32(sp)
    3700:	b0ad883a 	add	r22,r22,r2
    3704:	00065480 	call	6548 <__i2b>
    3708:	1023883a 	mov	r17,r2
    370c:	a0000826 	beq	r20,zero,3730 <_dtoa_r+0xa30>
    3710:	0580070e 	bge	zero,r22,3730 <_dtoa_r+0xa30>
    3714:	b005883a 	mov	r2,r22
    3718:	a5812016 	blt	r20,r22,3b9c <_dtoa_r+0xe9c>
    371c:	d8c00817 	ldw	r3,32(sp)
    3720:	a0a9c83a 	sub	r20,r20,r2
    3724:	b0adc83a 	sub	r22,r22,r2
    3728:	1887c83a 	sub	r3,r3,r2
    372c:	d8c00815 	stw	r3,32(sp)
    3730:	d9000917 	ldw	r4,36(sp)
    3734:	0100140e 	bge	zero,r4,3788 <_dtoa_r+0xa88>
    3738:	d9800b17 	ldw	r6,44(sp)
    373c:	3001e526 	beq	r6,zero,3ed4 <_dtoa_r+0x11d4>
    3740:	05400e0e 	bge	zero,r21,377c <_dtoa_r+0xa7c>
    3744:	880b883a 	mov	r5,r17
    3748:	8009883a 	mov	r4,r16
    374c:	a80d883a 	mov	r6,r21
    3750:	00067800 	call	6780 <__pow5mult>
    3754:	e00d883a 	mov	r6,fp
    3758:	8009883a 	mov	r4,r16
    375c:	100b883a 	mov	r5,r2
    3760:	1023883a 	mov	r17,r2
    3764:	00065840 	call	6584 <__multiply>
    3768:	102f883a 	mov	r23,r2
    376c:	e00b883a 	mov	r5,fp
    3770:	8009883a 	mov	r4,r16
    3774:	00061e40 	call	61e4 <_Bfree>
    3778:	b839883a 	mov	fp,r23
    377c:	d8800917 	ldw	r2,36(sp)
    3780:	154dc83a 	sub	r6,r2,r21
    3784:	3001281e 	bne	r6,zero,3c28 <_dtoa_r+0xf28>
    3788:	05c00044 	movi	r23,1
    378c:	8009883a 	mov	r4,r16
    3790:	b80b883a 	mov	r5,r23
    3794:	00065480 	call	6548 <__i2b>
    3798:	d8c00a17 	ldw	r3,40(sp)
    379c:	102b883a 	mov	r21,r2
    37a0:	00c0310e 	bge	zero,r3,3868 <_dtoa_r+0xb68>
    37a4:	8009883a 	mov	r4,r16
    37a8:	100b883a 	mov	r5,r2
    37ac:	180d883a 	mov	r6,r3
    37b0:	00067800 	call	6780 <__pow5mult>
    37b4:	d9000317 	ldw	r4,12(sp)
    37b8:	102b883a 	mov	r21,r2
    37bc:	b9011f0e 	bge	r23,r4,3c3c <_dtoa_r+0xf3c>
    37c0:	0027883a 	mov	r19,zero
    37c4:	a8800417 	ldw	r2,16(r21)
    37c8:	10800104 	addi	r2,r2,4
    37cc:	1085883a 	add	r2,r2,r2
    37d0:	1085883a 	add	r2,r2,r2
    37d4:	a885883a 	add	r2,r21,r2
    37d8:	11000017 	ldw	r4,0(r2)
    37dc:	00064300 	call	6430 <__hi0bits>
    37e0:	00c00804 	movi	r3,32
    37e4:	1885c83a 	sub	r2,r3,r2
    37e8:	00002506 	br	3880 <_dtoa_r+0xb80>
    37ec:	01800044 	movi	r6,1
    37f0:	d9800d15 	stw	r6,52(sp)
    37f4:	003dec06 	br	2fa8 <__alt_mem_onchip_memory2_0+0xfbfe2fa8>
    37f8:	d8c00817 	ldw	r3,32(sp)
    37fc:	d9000517 	ldw	r4,20(sp)
    3800:	d8000a15 	stw	zero,40(sp)
    3804:	1907c83a 	sub	r3,r3,r4
    3808:	010dc83a 	sub	r6,zero,r4
    380c:	d8c00815 	stw	r3,32(sp)
    3810:	d9800915 	stw	r6,36(sp)
    3814:	003ded06 	br	2fcc <__alt_mem_onchip_memory2_0+0xfbfe2fcc>
    3818:	05adc83a 	sub	r22,zero,r22
    381c:	dd800815 	stw	r22,32(sp)
    3820:	002d883a 	mov	r22,zero
    3824:	003de406 	br	2fb8 <__alt_mem_onchip_memory2_0+0xfbfe2fb8>
    3828:	d9000517 	ldw	r4,20(sp)
    382c:	000c8b80 	call	c8b8 <__floatsidf>
    3830:	1009883a 	mov	r4,r2
    3834:	180b883a 	mov	r5,r3
    3838:	b00d883a 	mov	r6,r22
    383c:	a80f883a 	mov	r7,r21
    3840:	000b5f80 	call	b5f8 <__eqdf2>
    3844:	103dc726 	beq	r2,zero,2f64 <__alt_mem_onchip_memory2_0+0xfbfe2f64>
    3848:	d8800517 	ldw	r2,20(sp)
    384c:	10bfffc4 	addi	r2,r2,-1
    3850:	d8800515 	stw	r2,20(sp)
    3854:	003dc306 	br	2f64 <__alt_mem_onchip_memory2_0+0xfbfe2f64>
    3858:	dd400917 	ldw	r21,36(sp)
    385c:	dd000817 	ldw	r20,32(sp)
    3860:	0023883a 	mov	r17,zero
    3864:	003fa906 	br	370c <__alt_mem_onchip_memory2_0+0xfbfe370c>
    3868:	d9800317 	ldw	r6,12(sp)
    386c:	b981670e 	bge	r23,r6,3e0c <_dtoa_r+0x110c>
    3870:	0027883a 	mov	r19,zero
    3874:	d8c00a17 	ldw	r3,40(sp)
    3878:	183fd21e 	bne	r3,zero,37c4 <__alt_mem_onchip_memory2_0+0xfbfe37c4>
    387c:	00800044 	movi	r2,1
    3880:	1585883a 	add	r2,r2,r22
    3884:	108007cc 	andi	r2,r2,31
    3888:	10005f26 	beq	r2,zero,3a08 <_dtoa_r+0xd08>
    388c:	00c00804 	movi	r3,32
    3890:	1887c83a 	sub	r3,r3,r2
    3894:	01000104 	movi	r4,4
    3898:	20c2dd0e 	bge	r4,r3,4410 <_dtoa_r+0x1710>
    389c:	d9000817 	ldw	r4,32(sp)
    38a0:	00c00704 	movi	r3,28
    38a4:	1885c83a 	sub	r2,r3,r2
    38a8:	2089883a 	add	r4,r4,r2
    38ac:	d9000815 	stw	r4,32(sp)
    38b0:	a0a9883a 	add	r20,r20,r2
    38b4:	b0ad883a 	add	r22,r22,r2
    38b8:	d8800817 	ldw	r2,32(sp)
    38bc:	0080050e 	bge	zero,r2,38d4 <_dtoa_r+0xbd4>
    38c0:	e00b883a 	mov	r5,fp
    38c4:	8009883a 	mov	r4,r16
    38c8:	100d883a 	mov	r6,r2
    38cc:	00068c00 	call	68c0 <__lshift>
    38d0:	1039883a 	mov	fp,r2
    38d4:	0580050e 	bge	zero,r22,38ec <_dtoa_r+0xbec>
    38d8:	a80b883a 	mov	r5,r21
    38dc:	8009883a 	mov	r4,r16
    38e0:	b00d883a 	mov	r6,r22
    38e4:	00068c00 	call	68c0 <__lshift>
    38e8:	102b883a 	mov	r21,r2
    38ec:	d8c00d17 	ldw	r3,52(sp)
    38f0:	1801161e 	bne	r3,zero,3d4c <_dtoa_r+0x104c>
    38f4:	d8c00617 	ldw	r3,24(sp)
    38f8:	00c12d0e 	bge	zero,r3,3db0 <_dtoa_r+0x10b0>
    38fc:	d8c00b17 	ldw	r3,44(sp)
    3900:	1800571e 	bne	r3,zero,3a60 <_dtoa_r+0xd60>
    3904:	dc800717 	ldw	r18,28(sp)
    3908:	dcc00617 	ldw	r19,24(sp)
    390c:	9029883a 	mov	r20,r18
    3910:	00000206 	br	391c <_dtoa_r+0xc1c>
    3914:	000620c0 	call	620c <__multadd>
    3918:	1039883a 	mov	fp,r2
    391c:	e009883a 	mov	r4,fp
    3920:	a80b883a 	mov	r5,r21
    3924:	0002b000 	call	2b00 <quorem>
    3928:	10800c04 	addi	r2,r2,48
    392c:	90800005 	stb	r2,0(r18)
    3930:	94800044 	addi	r18,r18,1
    3934:	9507c83a 	sub	r3,r18,r20
    3938:	8009883a 	mov	r4,r16
    393c:	e00b883a 	mov	r5,fp
    3940:	01800284 	movi	r6,10
    3944:	000f883a 	mov	r7,zero
    3948:	1cfff216 	blt	r3,r19,3914 <__alt_mem_onchip_memory2_0+0xfbfe3914>
    394c:	1011883a 	mov	r8,r2
    3950:	d8800617 	ldw	r2,24(sp)
    3954:	00822e0e 	bge	zero,r2,4210 <_dtoa_r+0x1510>
    3958:	d9000717 	ldw	r4,28(sp)
    395c:	0025883a 	mov	r18,zero
    3960:	20af883a 	add	r23,r4,r2
    3964:	e00b883a 	mov	r5,fp
    3968:	01800044 	movi	r6,1
    396c:	8009883a 	mov	r4,r16
    3970:	da001715 	stw	r8,92(sp)
    3974:	00068c00 	call	68c0 <__lshift>
    3978:	1009883a 	mov	r4,r2
    397c:	a80b883a 	mov	r5,r21
    3980:	1039883a 	mov	fp,r2
    3984:	0006a100 	call	6a10 <__mcmp>
    3988:	da001717 	ldw	r8,92(sp)
    398c:	00816e0e 	bge	zero,r2,3f48 <_dtoa_r+0x1248>
    3990:	b93fffc3 	ldbu	r4,-1(r23)
    3994:	b8bfffc4 	addi	r2,r23,-1
    3998:	1007883a 	mov	r3,r2
    399c:	01800e44 	movi	r6,57
    39a0:	d9c00717 	ldw	r7,28(sp)
    39a4:	00000506 	br	39bc <_dtoa_r+0xcbc>
    39a8:	18ffffc4 	addi	r3,r3,-1
    39ac:	38811926 	beq	r7,r2,3e14 <_dtoa_r+0x1114>
    39b0:	19000003 	ldbu	r4,0(r3)
    39b4:	102f883a 	mov	r23,r2
    39b8:	10bfffc4 	addi	r2,r2,-1
    39bc:	21403fcc 	andi	r5,r4,255
    39c0:	2940201c 	xori	r5,r5,128
    39c4:	297fe004 	addi	r5,r5,-128
    39c8:	29bff726 	beq	r5,r6,39a8 <__alt_mem_onchip_memory2_0+0xfbfe39a8>
    39cc:	21000044 	addi	r4,r4,1
    39d0:	11000005 	stb	r4,0(r2)
    39d4:	8009883a 	mov	r4,r16
    39d8:	a80b883a 	mov	r5,r21
    39dc:	00061e40 	call	61e4 <_Bfree>
    39e0:	883e7526 	beq	r17,zero,33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    39e4:	90000426 	beq	r18,zero,39f8 <_dtoa_r+0xcf8>
    39e8:	94400326 	beq	r18,r17,39f8 <_dtoa_r+0xcf8>
    39ec:	8009883a 	mov	r4,r16
    39f0:	900b883a 	mov	r5,r18
    39f4:	00061e40 	call	61e4 <_Bfree>
    39f8:	8009883a 	mov	r4,r16
    39fc:	880b883a 	mov	r5,r17
    3a00:	00061e40 	call	61e4 <_Bfree>
    3a04:	003e6c06 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    3a08:	00800704 	movi	r2,28
    3a0c:	d9800817 	ldw	r6,32(sp)
    3a10:	a0a9883a 	add	r20,r20,r2
    3a14:	b0ad883a 	add	r22,r22,r2
    3a18:	308d883a 	add	r6,r6,r2
    3a1c:	d9800815 	stw	r6,32(sp)
    3a20:	003fa506 	br	38b8 <__alt_mem_onchip_memory2_0+0xfbfe38b8>
    3a24:	013efb84 	movi	r4,-1042
    3a28:	246bc83a 	sub	r21,r4,r17
    3a2c:	9548983a 	sll	r4,r18,r21
    3a30:	003d1806 	br	2e94 <__alt_mem_onchip_memory2_0+0xfbfe2e94>
    3a34:	d8000d15 	stw	zero,52(sp)
    3a38:	003d5b06 	br	2fa8 <__alt_mem_onchip_memory2_0+0xfbfe2fa8>
    3a3c:	880b883a 	mov	r5,r17
    3a40:	8009883a 	mov	r4,r16
    3a44:	01800284 	movi	r6,10
    3a48:	000f883a 	mov	r7,zero
    3a4c:	000620c0 	call	620c <__multadd>
    3a50:	1023883a 	mov	r17,r2
    3a54:	d8800c17 	ldw	r2,48(sp)
    3a58:	0082550e 	bge	zero,r2,43b0 <_dtoa_r+0x16b0>
    3a5c:	d8800615 	stw	r2,24(sp)
    3a60:	0500050e 	bge	zero,r20,3a78 <_dtoa_r+0xd78>
    3a64:	880b883a 	mov	r5,r17
    3a68:	8009883a 	mov	r4,r16
    3a6c:	a00d883a 	mov	r6,r20
    3a70:	00068c00 	call	68c0 <__lshift>
    3a74:	1023883a 	mov	r17,r2
    3a78:	98016a1e 	bne	r19,zero,4024 <_dtoa_r+0x1324>
    3a7c:	8829883a 	mov	r20,r17
    3a80:	d9000617 	ldw	r4,24(sp)
    3a84:	dcc00717 	ldw	r19,28(sp)
    3a88:	9480004c 	andi	r18,r18,1
    3a8c:	20bfffc4 	addi	r2,r4,-1
    3a90:	9885883a 	add	r2,r19,r2
    3a94:	d8800415 	stw	r2,16(sp)
    3a98:	dc800615 	stw	r18,24(sp)
    3a9c:	e009883a 	mov	r4,fp
    3aa0:	a80b883a 	mov	r5,r21
    3aa4:	0002b000 	call	2b00 <quorem>
    3aa8:	e009883a 	mov	r4,fp
    3aac:	880b883a 	mov	r5,r17
    3ab0:	102f883a 	mov	r23,r2
    3ab4:	0006a100 	call	6a10 <__mcmp>
    3ab8:	8009883a 	mov	r4,r16
    3abc:	a80b883a 	mov	r5,r21
    3ac0:	a00d883a 	mov	r6,r20
    3ac4:	102d883a 	mov	r22,r2
    3ac8:	0006a700 	call	6a70 <__mdiff>
    3acc:	1007883a 	mov	r3,r2
    3ad0:	10800317 	ldw	r2,12(r2)
    3ad4:	bc800c04 	addi	r18,r23,48
    3ad8:	1000971e 	bne	r2,zero,3d38 <_dtoa_r+0x1038>
    3adc:	180b883a 	mov	r5,r3
    3ae0:	e009883a 	mov	r4,fp
    3ae4:	d8c01515 	stw	r3,84(sp)
    3ae8:	0006a100 	call	6a10 <__mcmp>
    3aec:	d8c01517 	ldw	r3,84(sp)
    3af0:	8009883a 	mov	r4,r16
    3af4:	d8801515 	stw	r2,84(sp)
    3af8:	180b883a 	mov	r5,r3
    3afc:	00061e40 	call	61e4 <_Bfree>
    3b00:	d8801517 	ldw	r2,84(sp)
    3b04:	1000041e 	bne	r2,zero,3b18 <_dtoa_r+0xe18>
    3b08:	d9800317 	ldw	r6,12(sp)
    3b0c:	3000021e 	bne	r6,zero,3b18 <_dtoa_r+0xe18>
    3b10:	d8c00617 	ldw	r3,24(sp)
    3b14:	18007626 	beq	r3,zero,3cf0 <_dtoa_r+0xff0>
    3b18:	b0005b16 	blt	r22,zero,3c88 <_dtoa_r+0xf88>
    3b1c:	b000041e 	bne	r22,zero,3b30 <_dtoa_r+0xe30>
    3b20:	d9000317 	ldw	r4,12(sp)
    3b24:	2000021e 	bne	r4,zero,3b30 <_dtoa_r+0xe30>
    3b28:	d8c00617 	ldw	r3,24(sp)
    3b2c:	18005626 	beq	r3,zero,3c88 <_dtoa_r+0xf88>
    3b30:	00814d16 	blt	zero,r2,4068 <_dtoa_r+0x1368>
    3b34:	d8c00417 	ldw	r3,16(sp)
    3b38:	9d800044 	addi	r22,r19,1
    3b3c:	9c800005 	stb	r18,0(r19)
    3b40:	b02f883a 	mov	r23,r22
    3b44:	98c14c26 	beq	r19,r3,4078 <_dtoa_r+0x1378>
    3b48:	e00b883a 	mov	r5,fp
    3b4c:	8009883a 	mov	r4,r16
    3b50:	01800284 	movi	r6,10
    3b54:	000f883a 	mov	r7,zero
    3b58:	000620c0 	call	620c <__multadd>
    3b5c:	1039883a 	mov	fp,r2
    3b60:	8d006d26 	beq	r17,r20,3d18 <_dtoa_r+0x1018>
    3b64:	880b883a 	mov	r5,r17
    3b68:	01800284 	movi	r6,10
    3b6c:	000f883a 	mov	r7,zero
    3b70:	8009883a 	mov	r4,r16
    3b74:	000620c0 	call	620c <__multadd>
    3b78:	a00b883a 	mov	r5,r20
    3b7c:	8009883a 	mov	r4,r16
    3b80:	01800284 	movi	r6,10
    3b84:	000f883a 	mov	r7,zero
    3b88:	1023883a 	mov	r17,r2
    3b8c:	000620c0 	call	620c <__multadd>
    3b90:	1029883a 	mov	r20,r2
    3b94:	b027883a 	mov	r19,r22
    3b98:	003fc006 	br	3a9c <__alt_mem_onchip_memory2_0+0xfbfe3a9c>
    3b9c:	a005883a 	mov	r2,r20
    3ba0:	003ede06 	br	371c <__alt_mem_onchip_memory2_0+0xfbfe371c>
    3ba4:	01000044 	movi	r4,1
    3ba8:	d9000b15 	stw	r4,44(sp)
    3bac:	d9802217 	ldw	r6,136(sp)
    3bb0:	0180dc0e 	bge	zero,r6,3f24 <_dtoa_r+0x1224>
    3bb4:	3023883a 	mov	r17,r6
    3bb8:	d9800c15 	stw	r6,48(sp)
    3bbc:	d9800615 	stw	r6,24(sp)
    3bc0:	003d1e06 	br	303c <__alt_mem_onchip_memory2_0+0xfbfe303c>
    3bc4:	d8800617 	ldw	r2,24(sp)
    3bc8:	00be3716 	blt	zero,r2,34a8 <__alt_mem_onchip_memory2_0+0xfbfe34a8>
    3bcc:	1000be1e 	bne	r2,zero,3ec8 <_dtoa_r+0x11c8>
    3bd0:	8809883a 	mov	r4,r17
    3bd4:	a00b883a 	mov	r5,r20
    3bd8:	000d883a 	mov	r6,zero
    3bdc:	01d00534 	movhi	r7,16404
    3be0:	000b83c0 	call	b83c <__muldf3>
    3be4:	1009883a 	mov	r4,r2
    3be8:	180b883a 	mov	r5,r3
    3bec:	900d883a 	mov	r6,r18
    3bf0:	980f883a 	mov	r7,r19
    3bf4:	000b67c0 	call	b67c <__gedf2>
    3bf8:	002b883a 	mov	r21,zero
    3bfc:	0023883a 	mov	r17,zero
    3c00:	10007a16 	blt	r2,zero,3dec <_dtoa_r+0x10ec>
    3c04:	d9002217 	ldw	r4,136(sp)
    3c08:	ddc00717 	ldw	r23,28(sp)
    3c0c:	0108303a 	nor	r4,zero,r4
    3c10:	d9000515 	stw	r4,20(sp)
    3c14:	8009883a 	mov	r4,r16
    3c18:	a80b883a 	mov	r5,r21
    3c1c:	00061e40 	call	61e4 <_Bfree>
    3c20:	883f751e 	bne	r17,zero,39f8 <__alt_mem_onchip_memory2_0+0xfbfe39f8>
    3c24:	003de406 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    3c28:	e00b883a 	mov	r5,fp
    3c2c:	8009883a 	mov	r4,r16
    3c30:	00067800 	call	6780 <__pow5mult>
    3c34:	1039883a 	mov	fp,r2
    3c38:	003ed306 	br	3788 <__alt_mem_onchip_memory2_0+0xfbfe3788>
    3c3c:	903ee01e 	bne	r18,zero,37c0 <__alt_mem_onchip_memory2_0+0xfbfe37c0>
    3c40:	00800434 	movhi	r2,16
    3c44:	10bfffc4 	addi	r2,r2,-1
    3c48:	9884703a 	and	r2,r19,r2
    3c4c:	103f081e 	bne	r2,zero,3870 <__alt_mem_onchip_memory2_0+0xfbfe3870>
    3c50:	9cdffc2c 	andhi	r19,r19,32752
    3c54:	983f0626 	beq	r19,zero,3870 <__alt_mem_onchip_memory2_0+0xfbfe3870>
    3c58:	d8800817 	ldw	r2,32(sp)
    3c5c:	b5800044 	addi	r22,r22,1
    3c60:	04c00044 	movi	r19,1
    3c64:	10800044 	addi	r2,r2,1
    3c68:	d8800815 	stw	r2,32(sp)
    3c6c:	003f0106 	br	3874 <__alt_mem_onchip_memory2_0+0xfbfe3874>
    3c70:	d9800f17 	ldw	r6,60(sp)
    3c74:	30016826 	beq	r6,zero,4218 <_dtoa_r+0x1518>
    3c78:	10810cc4 	addi	r2,r2,1075
    3c7c:	dd400917 	ldw	r21,36(sp)
    3c80:	dd000817 	ldw	r20,32(sp)
    3c84:	003e9906 	br	36ec <__alt_mem_onchip_memory2_0+0xfbfe36ec>
    3c88:	9011883a 	mov	r8,r18
    3c8c:	4007883a 	mov	r3,r8
    3c90:	e02d883a 	mov	r22,fp
    3c94:	0080100e 	bge	zero,r2,3cd8 <_dtoa_r+0xfd8>
    3c98:	01800044 	movi	r6,1
    3c9c:	8009883a 	mov	r4,r16
    3ca0:	e00b883a 	mov	r5,fp
    3ca4:	da001515 	stw	r8,84(sp)
    3ca8:	da001715 	stw	r8,92(sp)
    3cac:	00068c00 	call	68c0 <__lshift>
    3cb0:	1009883a 	mov	r4,r2
    3cb4:	a80b883a 	mov	r5,r21
    3cb8:	102d883a 	mov	r22,r2
    3cbc:	0006a100 	call	6a10 <__mcmp>
    3cc0:	d8c01517 	ldw	r3,84(sp)
    3cc4:	da001717 	ldw	r8,92(sp)
    3cc8:	0081a50e 	bge	zero,r2,4360 <_dtoa_r+0x1660>
    3ccc:	00800e44 	movi	r2,57
    3cd0:	40817b26 	beq	r8,r2,42c0 <_dtoa_r+0x15c0>
    3cd4:	40c00044 	addi	r3,r8,1
    3cd8:	8825883a 	mov	r18,r17
    3cdc:	9dc00044 	addi	r23,r19,1
    3ce0:	98c00005 	stb	r3,0(r19)
    3ce4:	a023883a 	mov	r17,r20
    3ce8:	b039883a 	mov	fp,r22
    3cec:	003f3906 	br	39d4 <__alt_mem_onchip_memory2_0+0xfbfe39d4>
    3cf0:	00800e44 	movi	r2,57
    3cf4:	9011883a 	mov	r8,r18
    3cf8:	90817226 	beq	r18,r2,42c4 <_dtoa_r+0x15c4>
    3cfc:	0580010e 	bge	zero,r22,3d04 <_dtoa_r+0x1004>
    3d00:	ba000c44 	addi	r8,r23,49
    3d04:	8825883a 	mov	r18,r17
    3d08:	9dc00044 	addi	r23,r19,1
    3d0c:	9a000005 	stb	r8,0(r19)
    3d10:	a023883a 	mov	r17,r20
    3d14:	003f2f06 	br	39d4 <__alt_mem_onchip_memory2_0+0xfbfe39d4>
    3d18:	880b883a 	mov	r5,r17
    3d1c:	8009883a 	mov	r4,r16
    3d20:	01800284 	movi	r6,10
    3d24:	000f883a 	mov	r7,zero
    3d28:	000620c0 	call	620c <__multadd>
    3d2c:	1023883a 	mov	r17,r2
    3d30:	1029883a 	mov	r20,r2
    3d34:	003f9706 	br	3b94 <__alt_mem_onchip_memory2_0+0xfbfe3b94>
    3d38:	8009883a 	mov	r4,r16
    3d3c:	180b883a 	mov	r5,r3
    3d40:	00061e40 	call	61e4 <_Bfree>
    3d44:	00800044 	movi	r2,1
    3d48:	003f7306 	br	3b18 <__alt_mem_onchip_memory2_0+0xfbfe3b18>
    3d4c:	e009883a 	mov	r4,fp
    3d50:	a80b883a 	mov	r5,r21
    3d54:	0006a100 	call	6a10 <__mcmp>
    3d58:	103ee60e 	bge	r2,zero,38f4 <__alt_mem_onchip_memory2_0+0xfbfe38f4>
    3d5c:	8009883a 	mov	r4,r16
    3d60:	e00b883a 	mov	r5,fp
    3d64:	01800284 	movi	r6,10
    3d68:	000f883a 	mov	r7,zero
    3d6c:	000620c0 	call	620c <__multadd>
    3d70:	d9000517 	ldw	r4,20(sp)
    3d74:	d9800b17 	ldw	r6,44(sp)
    3d78:	1039883a 	mov	fp,r2
    3d7c:	213fffc4 	addi	r4,r4,-1
    3d80:	d9000515 	stw	r4,20(sp)
    3d84:	303f2d1e 	bne	r6,zero,3a3c <__alt_mem_onchip_memory2_0+0xfbfe3a3c>
    3d88:	d9000c17 	ldw	r4,48(sp)
    3d8c:	0101780e 	bge	zero,r4,4370 <_dtoa_r+0x1670>
    3d90:	d9000615 	stw	r4,24(sp)
    3d94:	003edb06 	br	3904 <__alt_mem_onchip_memory2_0+0xfbfe3904>
    3d98:	00800084 	movi	r2,2
    3d9c:	30818e1e 	bne	r6,r2,43d8 <_dtoa_r+0x16d8>
    3da0:	d8000b15 	stw	zero,44(sp)
    3da4:	003f8106 	br	3bac <__alt_mem_onchip_memory2_0+0xfbfe3bac>
    3da8:	d8800717 	ldw	r2,28(sp)
    3dac:	003c0306 	br	2dbc <__alt_mem_onchip_memory2_0+0xfbfe2dbc>
    3db0:	d9000317 	ldw	r4,12(sp)
    3db4:	00800084 	movi	r2,2
    3db8:	113ed00e 	bge	r2,r4,38fc <__alt_mem_onchip_memory2_0+0xfbfe38fc>
    3dbc:	d8c00617 	ldw	r3,24(sp)
    3dc0:	183f901e 	bne	r3,zero,3c04 <__alt_mem_onchip_memory2_0+0xfbfe3c04>
    3dc4:	a80b883a 	mov	r5,r21
    3dc8:	8009883a 	mov	r4,r16
    3dcc:	01800144 	movi	r6,5
    3dd0:	000f883a 	mov	r7,zero
    3dd4:	000620c0 	call	620c <__multadd>
    3dd8:	e009883a 	mov	r4,fp
    3ddc:	100b883a 	mov	r5,r2
    3de0:	102b883a 	mov	r21,r2
    3de4:	0006a100 	call	6a10 <__mcmp>
    3de8:	00bf860e 	bge	zero,r2,3c04 <__alt_mem_onchip_memory2_0+0xfbfe3c04>
    3dec:	d9800717 	ldw	r6,28(sp)
    3df0:	00800c44 	movi	r2,49
    3df4:	30800005 	stb	r2,0(r6)
    3df8:	d8800517 	ldw	r2,20(sp)
    3dfc:	35c00044 	addi	r23,r6,1
    3e00:	10800044 	addi	r2,r2,1
    3e04:	d8800515 	stw	r2,20(sp)
    3e08:	003f8206 	br	3c14 <__alt_mem_onchip_memory2_0+0xfbfe3c14>
    3e0c:	903e981e 	bne	r18,zero,3870 <__alt_mem_onchip_memory2_0+0xfbfe3870>
    3e10:	003f8b06 	br	3c40 <__alt_mem_onchip_memory2_0+0xfbfe3c40>
    3e14:	d9800517 	ldw	r6,20(sp)
    3e18:	d8c00717 	ldw	r3,28(sp)
    3e1c:	00800c44 	movi	r2,49
    3e20:	31800044 	addi	r6,r6,1
    3e24:	d9800515 	stw	r6,20(sp)
    3e28:	18800005 	stb	r2,0(r3)
    3e2c:	003ee906 	br	39d4 <__alt_mem_onchip_memory2_0+0xfbfe39d4>
    3e30:	dc000317 	ldw	r16,12(sp)
    3e34:	003d6006 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    3e38:	8809883a 	mov	r4,r17
    3e3c:	000c8b80 	call	c8b8 <__floatsidf>
    3e40:	a009883a 	mov	r4,r20
    3e44:	a80b883a 	mov	r5,r21
    3e48:	100d883a 	mov	r6,r2
    3e4c:	180f883a 	mov	r7,r3
    3e50:	000b83c0 	call	b83c <__muldf3>
    3e54:	1009883a 	mov	r4,r2
    3e58:	180b883a 	mov	r5,r3
    3e5c:	000d883a 	mov	r6,zero
    3e60:	01d00734 	movhi	r7,16412
    3e64:	000a4900 	call	a490 <__adddf3>
    3e68:	1023883a 	mov	r17,r2
    3e6c:	00bf3034 	movhi	r2,64704
    3e70:	1885883a 	add	r2,r3,r2
    3e74:	d8800e15 	stw	r2,56(sp)
    3e78:	a009883a 	mov	r4,r20
    3e7c:	a80b883a 	mov	r5,r21
    3e80:	000d883a 	mov	r6,zero
    3e84:	01d00534 	movhi	r7,16404
    3e88:	000bf600 	call	bf60 <__subdf3>
    3e8c:	d9c00e17 	ldw	r7,56(sp)
    3e90:	1009883a 	mov	r4,r2
    3e94:	180b883a 	mov	r5,r3
    3e98:	880d883a 	mov	r6,r17
    3e9c:	102b883a 	mov	r21,r2
    3ea0:	1829883a 	mov	r20,r3
    3ea4:	000b67c0 	call	b67c <__gedf2>
    3ea8:	00807716 	blt	zero,r2,4088 <_dtoa_r+0x1388>
    3eac:	d8800e17 	ldw	r2,56(sp)
    3eb0:	a809883a 	mov	r4,r21
    3eb4:	a00b883a 	mov	r5,r20
    3eb8:	11e0003c 	xorhi	r7,r2,32768
    3ebc:	880d883a 	mov	r6,r17
    3ec0:	000b75c0 	call	b75c <__ledf2>
    3ec4:	103d6b0e 	bge	r2,zero,3474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
    3ec8:	002b883a 	mov	r21,zero
    3ecc:	0023883a 	mov	r17,zero
    3ed0:	003f4c06 	br	3c04 <__alt_mem_onchip_memory2_0+0xfbfe3c04>
    3ed4:	d9800917 	ldw	r6,36(sp)
    3ed8:	e00b883a 	mov	r5,fp
    3edc:	8009883a 	mov	r4,r16
    3ee0:	00067800 	call	6780 <__pow5mult>
    3ee4:	1039883a 	mov	fp,r2
    3ee8:	003e2706 	br	3788 <__alt_mem_onchip_memory2_0+0xfbfe3788>
    3eec:	d8000b15 	stw	zero,44(sp)
    3ef0:	003c4906 	br	3018 <__alt_mem_onchip_memory2_0+0xfbfe3018>
    3ef4:	d9000917 	ldw	r4,36(sp)
    3ef8:	d9800a17 	ldw	r6,40(sp)
    3efc:	dd400915 	stw	r21,36(sp)
    3f00:	a905c83a 	sub	r2,r21,r4
    3f04:	308d883a 	add	r6,r6,r2
    3f08:	d9800a15 	stw	r6,40(sp)
    3f0c:	002b883a 	mov	r21,zero
    3f10:	003df206 	br	36dc <__alt_mem_onchip_memory2_0+0xfbfe36dc>
    3f14:	dc800e15 	stw	r18,56(sp)
    3f18:	982b883a 	mov	r21,r19
    3f1c:	04400084 	movi	r17,2
    3f20:	003c7406 	br	30f4 <__alt_mem_onchip_memory2_0+0xfbfe30f4>
    3f24:	04400044 	movi	r17,1
    3f28:	dc400c15 	stw	r17,48(sp)
    3f2c:	dc400615 	stw	r17,24(sp)
    3f30:	dc402215 	stw	r17,136(sp)
    3f34:	80001115 	stw	zero,68(r16)
    3f38:	000b883a 	mov	r5,zero
    3f3c:	003c4a06 	br	3068 <__alt_mem_onchip_memory2_0+0xfbfe3068>
    3f40:	3023883a 	mov	r17,r6
    3f44:	003ffb06 	br	3f34 <__alt_mem_onchip_memory2_0+0xfbfe3f34>
    3f48:	1000021e 	bne	r2,zero,3f54 <_dtoa_r+0x1254>
    3f4c:	4200004c 	andi	r8,r8,1
    3f50:	403e8f1e 	bne	r8,zero,3990 <__alt_mem_onchip_memory2_0+0xfbfe3990>
    3f54:	01000c04 	movi	r4,48
    3f58:	00000106 	br	3f60 <_dtoa_r+0x1260>
    3f5c:	102f883a 	mov	r23,r2
    3f60:	b8bfffc4 	addi	r2,r23,-1
    3f64:	10c00007 	ldb	r3,0(r2)
    3f68:	193ffc26 	beq	r3,r4,3f5c <__alt_mem_onchip_memory2_0+0xfbfe3f5c>
    3f6c:	003e9906 	br	39d4 <__alt_mem_onchip_memory2_0+0xfbfe39d4>
    3f70:	d9000517 	ldw	r4,20(sp)
    3f74:	012fc83a 	sub	r23,zero,r4
    3f78:	b800ad26 	beq	r23,zero,4230 <_dtoa_r+0x1530>
    3f7c:	b88003cc 	andi	r2,r23,15
    3f80:	100490fa 	slli	r2,r2,3
    3f84:	00c00074 	movhi	r3,1
    3f88:	18ffd604 	addi	r3,r3,-168
    3f8c:	1885883a 	add	r2,r3,r2
    3f90:	11800017 	ldw	r6,0(r2)
    3f94:	11c00117 	ldw	r7,4(r2)
    3f98:	b82fd13a 	srai	r23,r23,4
    3f9c:	9009883a 	mov	r4,r18
    3fa0:	980b883a 	mov	r5,r19
    3fa4:	000b83c0 	call	b83c <__muldf3>
    3fa8:	1029883a 	mov	r20,r2
    3fac:	182b883a 	mov	r21,r3
    3fb0:	b800f426 	beq	r23,zero,4384 <_dtoa_r+0x1684>
    3fb4:	02000074 	movhi	r8,1
    3fb8:	423fcc04 	addi	r8,r8,-208
    3fbc:	8029883a 	mov	r20,r16
    3fc0:	04400084 	movi	r17,2
    3fc4:	4021883a 	mov	r16,r8
    3fc8:	b980004c 	andi	r6,r23,1
    3fcc:	1009883a 	mov	r4,r2
    3fd0:	b82fd07a 	srai	r23,r23,1
    3fd4:	180b883a 	mov	r5,r3
    3fd8:	30000426 	beq	r6,zero,3fec <_dtoa_r+0x12ec>
    3fdc:	81800017 	ldw	r6,0(r16)
    3fe0:	81c00117 	ldw	r7,4(r16)
    3fe4:	8c400044 	addi	r17,r17,1
    3fe8:	000b83c0 	call	b83c <__muldf3>
    3fec:	84000204 	addi	r16,r16,8
    3ff0:	b83ff51e 	bne	r23,zero,3fc8 <__alt_mem_onchip_memory2_0+0xfbfe3fc8>
    3ff4:	a021883a 	mov	r16,r20
    3ff8:	182b883a 	mov	r21,r3
    3ffc:	1029883a 	mov	r20,r2
    4000:	003c5506 	br	3158 <__alt_mem_onchip_memory2_0+0xfbfe3158>
    4004:	d9800517 	ldw	r6,20(sp)
    4008:	d9000717 	ldw	r4,28(sp)
    400c:	00c00c04 	movi	r3,48
    4010:	31800044 	addi	r6,r6,1
    4014:	d9800515 	stw	r6,20(sp)
    4018:	20c00005 	stb	r3,0(r4)
    401c:	02000c44 	movi	r8,49
    4020:	003da206 	br	36ac <__alt_mem_onchip_memory2_0+0xfbfe36ac>
    4024:	89400117 	ldw	r5,4(r17)
    4028:	8009883a 	mov	r4,r16
    402c:	000613c0 	call	613c <_Balloc>
    4030:	89800417 	ldw	r6,16(r17)
    4034:	11000304 	addi	r4,r2,12
    4038:	89400304 	addi	r5,r17,12
    403c:	31800084 	addi	r6,r6,2
    4040:	318d883a 	add	r6,r6,r6
    4044:	318d883a 	add	r6,r6,r6
    4048:	1027883a 	mov	r19,r2
    404c:	00005440 	call	544 <memcpy>
    4050:	8009883a 	mov	r4,r16
    4054:	980b883a 	mov	r5,r19
    4058:	01800044 	movi	r6,1
    405c:	00068c00 	call	68c0 <__lshift>
    4060:	1029883a 	mov	r20,r2
    4064:	003e8606 	br	3a80 <__alt_mem_onchip_memory2_0+0xfbfe3a80>
    4068:	00800e44 	movi	r2,57
    406c:	90809526 	beq	r18,r2,42c4 <_dtoa_r+0x15c4>
    4070:	92000044 	addi	r8,r18,1
    4074:	003f2306 	br	3d04 <__alt_mem_onchip_memory2_0+0xfbfe3d04>
    4078:	9011883a 	mov	r8,r18
    407c:	8825883a 	mov	r18,r17
    4080:	a023883a 	mov	r17,r20
    4084:	003e3706 	br	3964 <__alt_mem_onchip_memory2_0+0xfbfe3964>
    4088:	002b883a 	mov	r21,zero
    408c:	0023883a 	mov	r17,zero
    4090:	003f5606 	br	3dec <__alt_mem_onchip_memory2_0+0xfbfe3dec>
    4094:	51bfffc4 	addi	r6,r10,-1
    4098:	300490fa 	slli	r2,r6,3
    409c:	00c00074 	movhi	r3,1
    40a0:	18ffd604 	addi	r3,r3,-168
    40a4:	1885883a 	add	r2,r3,r2
    40a8:	d9c00e17 	ldw	r7,56(sp)
    40ac:	11000017 	ldw	r4,0(r2)
    40b0:	11400117 	ldw	r5,4(r2)
    40b4:	d8800717 	ldw	r2,28(sp)
    40b8:	d9801015 	stw	r6,64(sp)
    40bc:	880d883a 	mov	r6,r17
    40c0:	da801615 	stw	r10,88(sp)
    40c4:	15c00044 	addi	r23,r2,1
    40c8:	000b83c0 	call	b83c <__muldf3>
    40cc:	a80b883a 	mov	r5,r21
    40d0:	a009883a 	mov	r4,r20
    40d4:	d8c01115 	stw	r3,68(sp)
    40d8:	d8800e15 	stw	r2,56(sp)
    40dc:	000c8300 	call	c830 <__fixdfsi>
    40e0:	1009883a 	mov	r4,r2
    40e4:	1023883a 	mov	r17,r2
    40e8:	000c8b80 	call	c8b8 <__floatsidf>
    40ec:	a009883a 	mov	r4,r20
    40f0:	a80b883a 	mov	r5,r21
    40f4:	100d883a 	mov	r6,r2
    40f8:	180f883a 	mov	r7,r3
    40fc:	000bf600 	call	bf60 <__subdf3>
    4100:	1813883a 	mov	r9,r3
    4104:	d8c00717 	ldw	r3,28(sp)
    4108:	8c400c04 	addi	r17,r17,48
    410c:	1011883a 	mov	r8,r2
    4110:	1c400005 	stb	r17,0(r3)
    4114:	da801617 	ldw	r10,88(sp)
    4118:	00800044 	movi	r2,1
    411c:	50802326 	beq	r10,r2,41ac <_dtoa_r+0x14ac>
    4120:	d8800717 	ldw	r2,28(sp)
    4124:	b82b883a 	mov	r21,r23
    4128:	dc001315 	stw	r16,76(sp)
    412c:	12a9883a 	add	r20,r2,r10
    4130:	4807883a 	mov	r3,r9
    4134:	4005883a 	mov	r2,r8
    4138:	dc801415 	stw	r18,80(sp)
    413c:	000d883a 	mov	r6,zero
    4140:	01d00934 	movhi	r7,16420
    4144:	1009883a 	mov	r4,r2
    4148:	180b883a 	mov	r5,r3
    414c:	000b83c0 	call	b83c <__muldf3>
    4150:	180b883a 	mov	r5,r3
    4154:	1009883a 	mov	r4,r2
    4158:	1821883a 	mov	r16,r3
    415c:	1025883a 	mov	r18,r2
    4160:	000c8300 	call	c830 <__fixdfsi>
    4164:	1009883a 	mov	r4,r2
    4168:	1023883a 	mov	r17,r2
    416c:	000c8b80 	call	c8b8 <__floatsidf>
    4170:	9009883a 	mov	r4,r18
    4174:	800b883a 	mov	r5,r16
    4178:	100d883a 	mov	r6,r2
    417c:	180f883a 	mov	r7,r3
    4180:	8c400c04 	addi	r17,r17,48
    4184:	000bf600 	call	bf60 <__subdf3>
    4188:	ad400044 	addi	r21,r21,1
    418c:	ac7fffc5 	stb	r17,-1(r21)
    4190:	ad3fea1e 	bne	r21,r20,413c <__alt_mem_onchip_memory2_0+0xfbfe413c>
    4194:	1813883a 	mov	r9,r3
    4198:	d8c01017 	ldw	r3,64(sp)
    419c:	dc001317 	ldw	r16,76(sp)
    41a0:	dc801417 	ldw	r18,80(sp)
    41a4:	1011883a 	mov	r8,r2
    41a8:	b8ef883a 	add	r23,r23,r3
    41ac:	d9000e17 	ldw	r4,56(sp)
    41b0:	d9401117 	ldw	r5,68(sp)
    41b4:	000d883a 	mov	r6,zero
    41b8:	01cff834 	movhi	r7,16352
    41bc:	da001715 	stw	r8,92(sp)
    41c0:	da401515 	stw	r9,84(sp)
    41c4:	000a4900 	call	a490 <__adddf3>
    41c8:	da001717 	ldw	r8,92(sp)
    41cc:	da401517 	ldw	r9,84(sp)
    41d0:	1009883a 	mov	r4,r2
    41d4:	400d883a 	mov	r6,r8
    41d8:	480f883a 	mov	r7,r9
    41dc:	180b883a 	mov	r5,r3
    41e0:	000b75c0 	call	b75c <__ledf2>
    41e4:	da001717 	ldw	r8,92(sp)
    41e8:	da401517 	ldw	r9,84(sp)
    41ec:	10003b0e 	bge	r2,zero,42dc <_dtoa_r+0x15dc>
    41f0:	d9001217 	ldw	r4,72(sp)
    41f4:	bd7fffc3 	ldbu	r21,-1(r23)
    41f8:	d9000515 	stw	r4,20(sp)
    41fc:	003d1c06 	br	3670 <__alt_mem_onchip_memory2_0+0xfbfe3670>
    4200:	d8c00817 	ldw	r3,32(sp)
    4204:	18a9c83a 	sub	r20,r3,r2
    4208:	0005883a 	mov	r2,zero
    420c:	003d3706 	br	36ec <__alt_mem_onchip_memory2_0+0xfbfe36ec>
    4210:	00800044 	movi	r2,1
    4214:	003dd006 	br	3958 <__alt_mem_onchip_memory2_0+0xfbfe3958>
    4218:	d8c00217 	ldw	r3,8(sp)
    421c:	00800d84 	movi	r2,54
    4220:	dd400917 	ldw	r21,36(sp)
    4224:	10c5c83a 	sub	r2,r2,r3
    4228:	dd000817 	ldw	r20,32(sp)
    422c:	003d2f06 	br	36ec <__alt_mem_onchip_memory2_0+0xfbfe36ec>
    4230:	9029883a 	mov	r20,r18
    4234:	982b883a 	mov	r21,r19
    4238:	04400084 	movi	r17,2
    423c:	003bc606 	br	3158 <__alt_mem_onchip_memory2_0+0xfbfe3158>
    4240:	d8800617 	ldw	r2,24(sp)
    4244:	103efc26 	beq	r2,zero,3e38 <__alt_mem_onchip_memory2_0+0xfbfe3e38>
    4248:	d8c00c17 	ldw	r3,48(sp)
    424c:	00fc890e 	bge	zero,r3,3474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
    4250:	a80b883a 	mov	r5,r21
    4254:	a009883a 	mov	r4,r20
    4258:	000d883a 	mov	r6,zero
    425c:	01d00934 	movhi	r7,16420
    4260:	000b83c0 	call	b83c <__muldf3>
    4264:	89000044 	addi	r4,r17,1
    4268:	1029883a 	mov	r20,r2
    426c:	182b883a 	mov	r21,r3
    4270:	000c8b80 	call	c8b8 <__floatsidf>
    4274:	a009883a 	mov	r4,r20
    4278:	a80b883a 	mov	r5,r21
    427c:	100d883a 	mov	r6,r2
    4280:	180f883a 	mov	r7,r3
    4284:	000b83c0 	call	b83c <__muldf3>
    4288:	1009883a 	mov	r4,r2
    428c:	180b883a 	mov	r5,r3
    4290:	000d883a 	mov	r6,zero
    4294:	01d00734 	movhi	r7,16412
    4298:	000a4900 	call	a490 <__adddf3>
    429c:	d9000517 	ldw	r4,20(sp)
    42a0:	1023883a 	mov	r17,r2
    42a4:	00bf3034 	movhi	r2,64704
    42a8:	213fffc4 	addi	r4,r4,-1
    42ac:	1885883a 	add	r2,r3,r2
    42b0:	d9001215 	stw	r4,72(sp)
    42b4:	d8800e15 	stw	r2,56(sp)
    42b8:	da800c17 	ldw	r10,48(sp)
    42bc:	003bc306 	br	31cc <__alt_mem_onchip_memory2_0+0xfbfe31cc>
    42c0:	b039883a 	mov	fp,r22
    42c4:	01000e44 	movi	r4,57
    42c8:	8825883a 	mov	r18,r17
    42cc:	9dc00044 	addi	r23,r19,1
    42d0:	99000005 	stb	r4,0(r19)
    42d4:	a023883a 	mov	r17,r20
    42d8:	003dae06 	br	3994 <__alt_mem_onchip_memory2_0+0xfbfe3994>
    42dc:	d9800e17 	ldw	r6,56(sp)
    42e0:	d9c01117 	ldw	r7,68(sp)
    42e4:	0009883a 	mov	r4,zero
    42e8:	014ff834 	movhi	r5,16352
    42ec:	da001715 	stw	r8,92(sp)
    42f0:	da401515 	stw	r9,84(sp)
    42f4:	000bf600 	call	bf60 <__subdf3>
    42f8:	da001717 	ldw	r8,92(sp)
    42fc:	da401517 	ldw	r9,84(sp)
    4300:	1009883a 	mov	r4,r2
    4304:	180b883a 	mov	r5,r3
    4308:	400d883a 	mov	r6,r8
    430c:	480f883a 	mov	r7,r9
    4310:	000b67c0 	call	b67c <__gedf2>
    4314:	00bc570e 	bge	zero,r2,3474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
    4318:	01000c04 	movi	r4,48
    431c:	00000106 	br	4324 <_dtoa_r+0x1624>
    4320:	102f883a 	mov	r23,r2
    4324:	b8bfffc4 	addi	r2,r23,-1
    4328:	10c00007 	ldb	r3,0(r2)
    432c:	193ffc26 	beq	r3,r4,4320 <__alt_mem_onchip_memory2_0+0xfbfe4320>
    4330:	d9801217 	ldw	r6,72(sp)
    4334:	d9800515 	stw	r6,20(sp)
    4338:	003c1f06 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    433c:	d8801217 	ldw	r2,72(sp)
    4340:	dc001117 	ldw	r16,68(sp)
    4344:	d8800515 	stw	r2,20(sp)
    4348:	003cc906 	br	3670 <__alt_mem_onchip_memory2_0+0xfbfe3670>
    434c:	dd801317 	ldw	r22,76(sp)
    4350:	dc001117 	ldw	r16,68(sp)
    4354:	dcc01417 	ldw	r19,80(sp)
    4358:	dc801017 	ldw	r18,64(sp)
    435c:	003c4506 	br	3474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
    4360:	103e5d1e 	bne	r2,zero,3cd8 <__alt_mem_onchip_memory2_0+0xfbfe3cd8>
    4364:	4080004c 	andi	r2,r8,1
    4368:	103e5b26 	beq	r2,zero,3cd8 <__alt_mem_onchip_memory2_0+0xfbfe3cd8>
    436c:	003e5706 	br	3ccc <__alt_mem_onchip_memory2_0+0xfbfe3ccc>
    4370:	d8c00317 	ldw	r3,12(sp)
    4374:	00800084 	movi	r2,2
    4378:	10c00a16 	blt	r2,r3,43a4 <_dtoa_r+0x16a4>
    437c:	d9000c17 	ldw	r4,48(sp)
    4380:	003e8306 	br	3d90 <__alt_mem_onchip_memory2_0+0xfbfe3d90>
    4384:	04400084 	movi	r17,2
    4388:	003b7306 	br	3158 <__alt_mem_onchip_memory2_0+0xfbfe3158>
    438c:	d9801217 	ldw	r6,72(sp)
    4390:	d9800515 	stw	r6,20(sp)
    4394:	003cb606 	br	3670 <__alt_mem_onchip_memory2_0+0xfbfe3670>
    4398:	d9001217 	ldw	r4,72(sp)
    439c:	d9000515 	stw	r4,20(sp)
    43a0:	003c0506 	br	33b8 <__alt_mem_onchip_memory2_0+0xfbfe33b8>
    43a4:	d9800c17 	ldw	r6,48(sp)
    43a8:	d9800615 	stw	r6,24(sp)
    43ac:	003e8306 	br	3dbc <__alt_mem_onchip_memory2_0+0xfbfe3dbc>
    43b0:	d9800317 	ldw	r6,12(sp)
    43b4:	00800084 	movi	r2,2
    43b8:	11800216 	blt	r2,r6,43c4 <_dtoa_r+0x16c4>
    43bc:	d8800c17 	ldw	r2,48(sp)
    43c0:	003da606 	br	3a5c <__alt_mem_onchip_memory2_0+0xfbfe3a5c>
    43c4:	d8800c17 	ldw	r2,48(sp)
    43c8:	d8800615 	stw	r2,24(sp)
    43cc:	003e7b06 	br	3dbc <__alt_mem_onchip_memory2_0+0xfbfe3dbc>
    43d0:	05000044 	movi	r20,1
    43d4:	003b0506 	br	2fec <__alt_mem_onchip_memory2_0+0xfbfe2fec>
    43d8:	8009883a 	mov	r4,r16
    43dc:	80001115 	stw	zero,68(r16)
    43e0:	000b883a 	mov	r5,zero
    43e4:	000613c0 	call	613c <_Balloc>
    43e8:	d8800715 	stw	r2,28(sp)
    43ec:	d8c00717 	ldw	r3,28(sp)
    43f0:	00bfffc4 	movi	r2,-1
    43f4:	01000044 	movi	r4,1
    43f8:	d8800c15 	stw	r2,48(sp)
    43fc:	80c01015 	stw	r3,64(r16)
    4400:	d9000b15 	stw	r4,44(sp)
    4404:	d8800615 	stw	r2,24(sp)
    4408:	d8002215 	stw	zero,136(sp)
    440c:	003c1906 	br	3474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
    4410:	193d2926 	beq	r3,r4,38b8 <__alt_mem_onchip_memory2_0+0xfbfe38b8>
    4414:	00c00f04 	movi	r3,60
    4418:	1885c83a 	sub	r2,r3,r2
    441c:	003d7b06 	br	3a0c <__alt_mem_onchip_memory2_0+0xfbfe3a0c>
    4420:	000b883a 	mov	r5,zero
    4424:	003b1006 	br	3068 <__alt_mem_onchip_memory2_0+0xfbfe3068>

00004428 <__sflush_r>:
    4428:	2880030b 	ldhu	r2,12(r5)
    442c:	defffb04 	addi	sp,sp,-20
    4430:	dcc00315 	stw	r19,12(sp)
    4434:	dc400115 	stw	r17,4(sp)
    4438:	dfc00415 	stw	ra,16(sp)
    443c:	dc800215 	stw	r18,8(sp)
    4440:	dc000015 	stw	r16,0(sp)
    4444:	10c0020c 	andi	r3,r2,8
    4448:	2823883a 	mov	r17,r5
    444c:	2027883a 	mov	r19,r4
    4450:	1800311e 	bne	r3,zero,4518 <__sflush_r+0xf0>
    4454:	28c00117 	ldw	r3,4(r5)
    4458:	10820014 	ori	r2,r2,2048
    445c:	2880030d 	sth	r2,12(r5)
    4460:	00c04b0e 	bge	zero,r3,4590 <__sflush_r+0x168>
    4464:	8a000a17 	ldw	r8,40(r17)
    4468:	40002326 	beq	r8,zero,44f8 <__sflush_r+0xd0>
    446c:	9c000017 	ldw	r16,0(r19)
    4470:	10c4000c 	andi	r3,r2,4096
    4474:	98000015 	stw	zero,0(r19)
    4478:	18004826 	beq	r3,zero,459c <__sflush_r+0x174>
    447c:	89801417 	ldw	r6,80(r17)
    4480:	10c0010c 	andi	r3,r2,4
    4484:	18000626 	beq	r3,zero,44a0 <__sflush_r+0x78>
    4488:	88c00117 	ldw	r3,4(r17)
    448c:	88800c17 	ldw	r2,48(r17)
    4490:	30cdc83a 	sub	r6,r6,r3
    4494:	10000226 	beq	r2,zero,44a0 <__sflush_r+0x78>
    4498:	88800f17 	ldw	r2,60(r17)
    449c:	308dc83a 	sub	r6,r6,r2
    44a0:	89400717 	ldw	r5,28(r17)
    44a4:	9809883a 	mov	r4,r19
    44a8:	000f883a 	mov	r7,zero
    44ac:	403ee83a 	callr	r8
    44b0:	00ffffc4 	movi	r3,-1
    44b4:	10c04426 	beq	r2,r3,45c8 <__sflush_r+0x1a0>
    44b8:	88c0030b 	ldhu	r3,12(r17)
    44bc:	89000417 	ldw	r4,16(r17)
    44c0:	88000115 	stw	zero,4(r17)
    44c4:	197dffcc 	andi	r5,r3,63487
    44c8:	8940030d 	sth	r5,12(r17)
    44cc:	89000015 	stw	r4,0(r17)
    44d0:	18c4000c 	andi	r3,r3,4096
    44d4:	18002c1e 	bne	r3,zero,4588 <__sflush_r+0x160>
    44d8:	89400c17 	ldw	r5,48(r17)
    44dc:	9c000015 	stw	r16,0(r19)
    44e0:	28000526 	beq	r5,zero,44f8 <__sflush_r+0xd0>
    44e4:	88801004 	addi	r2,r17,64
    44e8:	28800226 	beq	r5,r2,44f4 <__sflush_r+0xcc>
    44ec:	9809883a 	mov	r4,r19
    44f0:	0004b800 	call	4b80 <_free_r>
    44f4:	88000c15 	stw	zero,48(r17)
    44f8:	0005883a 	mov	r2,zero
    44fc:	dfc00417 	ldw	ra,16(sp)
    4500:	dcc00317 	ldw	r19,12(sp)
    4504:	dc800217 	ldw	r18,8(sp)
    4508:	dc400117 	ldw	r17,4(sp)
    450c:	dc000017 	ldw	r16,0(sp)
    4510:	dec00504 	addi	sp,sp,20
    4514:	f800283a 	ret
    4518:	2c800417 	ldw	r18,16(r5)
    451c:	903ff626 	beq	r18,zero,44f8 <__alt_mem_onchip_memory2_0+0xfbfe44f8>
    4520:	2c000017 	ldw	r16,0(r5)
    4524:	108000cc 	andi	r2,r2,3
    4528:	2c800015 	stw	r18,0(r5)
    452c:	84a1c83a 	sub	r16,r16,r18
    4530:	1000131e 	bne	r2,zero,4580 <__sflush_r+0x158>
    4534:	28800517 	ldw	r2,20(r5)
    4538:	88800215 	stw	r2,8(r17)
    453c:	04000316 	blt	zero,r16,454c <__sflush_r+0x124>
    4540:	003fed06 	br	44f8 <__alt_mem_onchip_memory2_0+0xfbfe44f8>
    4544:	90a5883a 	add	r18,r18,r2
    4548:	043feb0e 	bge	zero,r16,44f8 <__alt_mem_onchip_memory2_0+0xfbfe44f8>
    454c:	88800917 	ldw	r2,36(r17)
    4550:	89400717 	ldw	r5,28(r17)
    4554:	800f883a 	mov	r7,r16
    4558:	900d883a 	mov	r6,r18
    455c:	9809883a 	mov	r4,r19
    4560:	103ee83a 	callr	r2
    4564:	80a1c83a 	sub	r16,r16,r2
    4568:	00bff616 	blt	zero,r2,4544 <__alt_mem_onchip_memory2_0+0xfbfe4544>
    456c:	88c0030b 	ldhu	r3,12(r17)
    4570:	00bfffc4 	movi	r2,-1
    4574:	18c01014 	ori	r3,r3,64
    4578:	88c0030d 	sth	r3,12(r17)
    457c:	003fdf06 	br	44fc <__alt_mem_onchip_memory2_0+0xfbfe44fc>
    4580:	0005883a 	mov	r2,zero
    4584:	003fec06 	br	4538 <__alt_mem_onchip_memory2_0+0xfbfe4538>
    4588:	88801415 	stw	r2,80(r17)
    458c:	003fd206 	br	44d8 <__alt_mem_onchip_memory2_0+0xfbfe44d8>
    4590:	28c00f17 	ldw	r3,60(r5)
    4594:	00ffb316 	blt	zero,r3,4464 <__alt_mem_onchip_memory2_0+0xfbfe4464>
    4598:	003fd706 	br	44f8 <__alt_mem_onchip_memory2_0+0xfbfe44f8>
    459c:	89400717 	ldw	r5,28(r17)
    45a0:	000d883a 	mov	r6,zero
    45a4:	9809883a 	mov	r4,r19
    45a8:	01c00044 	movi	r7,1
    45ac:	403ee83a 	callr	r8
    45b0:	100d883a 	mov	r6,r2
    45b4:	00bfffc4 	movi	r2,-1
    45b8:	30801426 	beq	r6,r2,460c <__sflush_r+0x1e4>
    45bc:	8880030b 	ldhu	r2,12(r17)
    45c0:	8a000a17 	ldw	r8,40(r17)
    45c4:	003fae06 	br	4480 <__alt_mem_onchip_memory2_0+0xfbfe4480>
    45c8:	98c00017 	ldw	r3,0(r19)
    45cc:	183fba26 	beq	r3,zero,44b8 <__alt_mem_onchip_memory2_0+0xfbfe44b8>
    45d0:	01000744 	movi	r4,29
    45d4:	19000626 	beq	r3,r4,45f0 <__sflush_r+0x1c8>
    45d8:	01000584 	movi	r4,22
    45dc:	19000426 	beq	r3,r4,45f0 <__sflush_r+0x1c8>
    45e0:	88c0030b 	ldhu	r3,12(r17)
    45e4:	18c01014 	ori	r3,r3,64
    45e8:	88c0030d 	sth	r3,12(r17)
    45ec:	003fc306 	br	44fc <__alt_mem_onchip_memory2_0+0xfbfe44fc>
    45f0:	8880030b 	ldhu	r2,12(r17)
    45f4:	88c00417 	ldw	r3,16(r17)
    45f8:	88000115 	stw	zero,4(r17)
    45fc:	10bdffcc 	andi	r2,r2,63487
    4600:	8880030d 	sth	r2,12(r17)
    4604:	88c00015 	stw	r3,0(r17)
    4608:	003fb306 	br	44d8 <__alt_mem_onchip_memory2_0+0xfbfe44d8>
    460c:	98800017 	ldw	r2,0(r19)
    4610:	103fea26 	beq	r2,zero,45bc <__alt_mem_onchip_memory2_0+0xfbfe45bc>
    4614:	00c00744 	movi	r3,29
    4618:	10c00226 	beq	r2,r3,4624 <__sflush_r+0x1fc>
    461c:	00c00584 	movi	r3,22
    4620:	10ffd21e 	bne	r2,r3,456c <__alt_mem_onchip_memory2_0+0xfbfe456c>
    4624:	9c000015 	stw	r16,0(r19)
    4628:	0005883a 	mov	r2,zero
    462c:	003fb306 	br	44fc <__alt_mem_onchip_memory2_0+0xfbfe44fc>

00004630 <_fflush_r>:
    4630:	defffd04 	addi	sp,sp,-12
    4634:	dc000115 	stw	r16,4(sp)
    4638:	dfc00215 	stw	ra,8(sp)
    463c:	2021883a 	mov	r16,r4
    4640:	20000226 	beq	r4,zero,464c <_fflush_r+0x1c>
    4644:	20800e17 	ldw	r2,56(r4)
    4648:	10000c26 	beq	r2,zero,467c <_fflush_r+0x4c>
    464c:	2880030f 	ldh	r2,12(r5)
    4650:	1000051e 	bne	r2,zero,4668 <_fflush_r+0x38>
    4654:	0005883a 	mov	r2,zero
    4658:	dfc00217 	ldw	ra,8(sp)
    465c:	dc000117 	ldw	r16,4(sp)
    4660:	dec00304 	addi	sp,sp,12
    4664:	f800283a 	ret
    4668:	8009883a 	mov	r4,r16
    466c:	dfc00217 	ldw	ra,8(sp)
    4670:	dc000117 	ldw	r16,4(sp)
    4674:	dec00304 	addi	sp,sp,12
    4678:	00044281 	jmpi	4428 <__sflush_r>
    467c:	d9400015 	stw	r5,0(sp)
    4680:	0004a0c0 	call	4a0c <__sinit>
    4684:	d9400017 	ldw	r5,0(sp)
    4688:	003ff006 	br	464c <__alt_mem_onchip_memory2_0+0xfbfe464c>

0000468c <fflush>:
    468c:	20000526 	beq	r4,zero,46a4 <fflush+0x18>
    4690:	00800074 	movhi	r2,1
    4694:	10874e04 	addi	r2,r2,7480
    4698:	200b883a 	mov	r5,r4
    469c:	11000017 	ldw	r4,0(r2)
    46a0:	00046301 	jmpi	4630 <_fflush_r>
    46a4:	00800074 	movhi	r2,1
    46a8:	10874d04 	addi	r2,r2,7476
    46ac:	11000017 	ldw	r4,0(r2)
    46b0:	01400034 	movhi	r5,0
    46b4:	29518c04 	addi	r5,r5,17968
    46b8:	00053f41 	jmpi	53f4 <_fwalk_reent>

000046bc <__fp_lock>:
    46bc:	0005883a 	mov	r2,zero
    46c0:	f800283a 	ret

000046c4 <__fp_unlock>:
    46c4:	0005883a 	mov	r2,zero
    46c8:	f800283a 	ret

000046cc <_cleanup_r>:
    46cc:	01400074 	movhi	r5,1
    46d0:	29647904 	addi	r5,r5,-28188
    46d4:	00053f41 	jmpi	53f4 <_fwalk_reent>

000046d8 <__sinit.part.1>:
    46d8:	defff704 	addi	sp,sp,-36
    46dc:	00c00034 	movhi	r3,0
    46e0:	dfc00815 	stw	ra,32(sp)
    46e4:	ddc00715 	stw	r23,28(sp)
    46e8:	dd800615 	stw	r22,24(sp)
    46ec:	dd400515 	stw	r21,20(sp)
    46f0:	dd000415 	stw	r20,16(sp)
    46f4:	dcc00315 	stw	r19,12(sp)
    46f8:	dc800215 	stw	r18,8(sp)
    46fc:	dc400115 	stw	r17,4(sp)
    4700:	dc000015 	stw	r16,0(sp)
    4704:	18d1b304 	addi	r3,r3,18124
    4708:	24000117 	ldw	r16,4(r4)
    470c:	20c00f15 	stw	r3,60(r4)
    4710:	2080bb04 	addi	r2,r4,748
    4714:	00c000c4 	movi	r3,3
    4718:	20c0b915 	stw	r3,740(r4)
    471c:	2080ba15 	stw	r2,744(r4)
    4720:	2000b815 	stw	zero,736(r4)
    4724:	05c00204 	movi	r23,8
    4728:	00800104 	movi	r2,4
    472c:	2025883a 	mov	r18,r4
    4730:	b80d883a 	mov	r6,r23
    4734:	81001704 	addi	r4,r16,92
    4738:	000b883a 	mov	r5,zero
    473c:	80000015 	stw	zero,0(r16)
    4740:	80000115 	stw	zero,4(r16)
    4744:	80000215 	stw	zero,8(r16)
    4748:	8080030d 	sth	r2,12(r16)
    474c:	80001915 	stw	zero,100(r16)
    4750:	8000038d 	sth	zero,14(r16)
    4754:	80000415 	stw	zero,16(r16)
    4758:	80000515 	stw	zero,20(r16)
    475c:	80000615 	stw	zero,24(r16)
    4760:	000067c0 	call	67c <memset>
    4764:	05800034 	movhi	r22,0
    4768:	94400217 	ldw	r17,8(r18)
    476c:	05400034 	movhi	r21,0
    4770:	05000034 	movhi	r20,0
    4774:	04c00034 	movhi	r19,0
    4778:	b59e1e04 	addi	r22,r22,30840
    477c:	ad5e3504 	addi	r21,r21,30932
    4780:	a51e5404 	addi	r20,r20,31056
    4784:	9cde6b04 	addi	r19,r19,31148
    4788:	85800815 	stw	r22,32(r16)
    478c:	85400915 	stw	r21,36(r16)
    4790:	85000a15 	stw	r20,40(r16)
    4794:	84c00b15 	stw	r19,44(r16)
    4798:	84000715 	stw	r16,28(r16)
    479c:	00800284 	movi	r2,10
    47a0:	8880030d 	sth	r2,12(r17)
    47a4:	00800044 	movi	r2,1
    47a8:	89001704 	addi	r4,r17,92
    47ac:	b80d883a 	mov	r6,r23
    47b0:	000b883a 	mov	r5,zero
    47b4:	88000015 	stw	zero,0(r17)
    47b8:	88000115 	stw	zero,4(r17)
    47bc:	88000215 	stw	zero,8(r17)
    47c0:	88001915 	stw	zero,100(r17)
    47c4:	8880038d 	sth	r2,14(r17)
    47c8:	88000415 	stw	zero,16(r17)
    47cc:	88000515 	stw	zero,20(r17)
    47d0:	88000615 	stw	zero,24(r17)
    47d4:	000067c0 	call	67c <memset>
    47d8:	94000317 	ldw	r16,12(r18)
    47dc:	00800484 	movi	r2,18
    47e0:	8c400715 	stw	r17,28(r17)
    47e4:	8d800815 	stw	r22,32(r17)
    47e8:	8d400915 	stw	r21,36(r17)
    47ec:	8d000a15 	stw	r20,40(r17)
    47f0:	8cc00b15 	stw	r19,44(r17)
    47f4:	8080030d 	sth	r2,12(r16)
    47f8:	00800084 	movi	r2,2
    47fc:	80000015 	stw	zero,0(r16)
    4800:	80000115 	stw	zero,4(r16)
    4804:	80000215 	stw	zero,8(r16)
    4808:	80001915 	stw	zero,100(r16)
    480c:	8080038d 	sth	r2,14(r16)
    4810:	80000415 	stw	zero,16(r16)
    4814:	80000515 	stw	zero,20(r16)
    4818:	80000615 	stw	zero,24(r16)
    481c:	81001704 	addi	r4,r16,92
    4820:	000b883a 	mov	r5,zero
    4824:	b80d883a 	mov	r6,r23
    4828:	000067c0 	call	67c <memset>
    482c:	00800044 	movi	r2,1
    4830:	84000715 	stw	r16,28(r16)
    4834:	85800815 	stw	r22,32(r16)
    4838:	85400915 	stw	r21,36(r16)
    483c:	85000a15 	stw	r20,40(r16)
    4840:	84c00b15 	stw	r19,44(r16)
    4844:	90800e15 	stw	r2,56(r18)
    4848:	dfc00817 	ldw	ra,32(sp)
    484c:	ddc00717 	ldw	r23,28(sp)
    4850:	dd800617 	ldw	r22,24(sp)
    4854:	dd400517 	ldw	r21,20(sp)
    4858:	dd000417 	ldw	r20,16(sp)
    485c:	dcc00317 	ldw	r19,12(sp)
    4860:	dc800217 	ldw	r18,8(sp)
    4864:	dc400117 	ldw	r17,4(sp)
    4868:	dc000017 	ldw	r16,0(sp)
    486c:	dec00904 	addi	sp,sp,36
    4870:	f800283a 	ret

00004874 <__sfmoreglue>:
    4874:	defffc04 	addi	sp,sp,-16
    4878:	dc400115 	stw	r17,4(sp)
    487c:	2c7fffc4 	addi	r17,r5,-1
    4880:	8c401a24 	muli	r17,r17,104
    4884:	dc800215 	stw	r18,8(sp)
    4888:	2825883a 	mov	r18,r5
    488c:	89401d04 	addi	r5,r17,116
    4890:	dc000015 	stw	r16,0(sp)
    4894:	dfc00315 	stw	ra,12(sp)
    4898:	00057500 	call	5750 <_malloc_r>
    489c:	1021883a 	mov	r16,r2
    48a0:	10000726 	beq	r2,zero,48c0 <__sfmoreglue+0x4c>
    48a4:	11000304 	addi	r4,r2,12
    48a8:	10000015 	stw	zero,0(r2)
    48ac:	14800115 	stw	r18,4(r2)
    48b0:	11000215 	stw	r4,8(r2)
    48b4:	000b883a 	mov	r5,zero
    48b8:	89801a04 	addi	r6,r17,104
    48bc:	000067c0 	call	67c <memset>
    48c0:	8005883a 	mov	r2,r16
    48c4:	dfc00317 	ldw	ra,12(sp)
    48c8:	dc800217 	ldw	r18,8(sp)
    48cc:	dc400117 	ldw	r17,4(sp)
    48d0:	dc000017 	ldw	r16,0(sp)
    48d4:	dec00404 	addi	sp,sp,16
    48d8:	f800283a 	ret

000048dc <__sfp>:
    48dc:	00800074 	movhi	r2,1
    48e0:	defffb04 	addi	sp,sp,-20
    48e4:	10874d04 	addi	r2,r2,7476
    48e8:	dc800215 	stw	r18,8(sp)
    48ec:	14800017 	ldw	r18,0(r2)
    48f0:	dcc00315 	stw	r19,12(sp)
    48f4:	dfc00415 	stw	ra,16(sp)
    48f8:	90800e17 	ldw	r2,56(r18)
    48fc:	dc400115 	stw	r17,4(sp)
    4900:	dc000015 	stw	r16,0(sp)
    4904:	2027883a 	mov	r19,r4
    4908:	1000021e 	bne	r2,zero,4914 <__sfp+0x38>
    490c:	9009883a 	mov	r4,r18
    4910:	00046d80 	call	46d8 <__sinit.part.1>
    4914:	9480b804 	addi	r18,r18,736
    4918:	047fffc4 	movi	r17,-1
    491c:	91400117 	ldw	r5,4(r18)
    4920:	94000217 	ldw	r16,8(r18)
    4924:	297fffc4 	addi	r5,r5,-1
    4928:	28000a16 	blt	r5,zero,4954 <__sfp+0x78>
    492c:	8080030f 	ldh	r2,12(r16)
    4930:	10000c26 	beq	r2,zero,4964 <__sfp+0x88>
    4934:	80c01d04 	addi	r3,r16,116
    4938:	00000206 	br	4944 <__sfp+0x68>
    493c:	18bfe60f 	ldh	r2,-104(r3)
    4940:	10000826 	beq	r2,zero,4964 <__sfp+0x88>
    4944:	297fffc4 	addi	r5,r5,-1
    4948:	1c3ffd04 	addi	r16,r3,-12
    494c:	18c01a04 	addi	r3,r3,104
    4950:	2c7ffa1e 	bne	r5,r17,493c <__alt_mem_onchip_memory2_0+0xfbfe493c>
    4954:	90800017 	ldw	r2,0(r18)
    4958:	10001d26 	beq	r2,zero,49d0 <__sfp+0xf4>
    495c:	1025883a 	mov	r18,r2
    4960:	003fee06 	br	491c <__alt_mem_onchip_memory2_0+0xfbfe491c>
    4964:	00bfffc4 	movi	r2,-1
    4968:	8080038d 	sth	r2,14(r16)
    496c:	00800044 	movi	r2,1
    4970:	8080030d 	sth	r2,12(r16)
    4974:	80001915 	stw	zero,100(r16)
    4978:	80000015 	stw	zero,0(r16)
    497c:	80000215 	stw	zero,8(r16)
    4980:	80000115 	stw	zero,4(r16)
    4984:	80000415 	stw	zero,16(r16)
    4988:	80000515 	stw	zero,20(r16)
    498c:	80000615 	stw	zero,24(r16)
    4990:	81001704 	addi	r4,r16,92
    4994:	000b883a 	mov	r5,zero
    4998:	01800204 	movi	r6,8
    499c:	000067c0 	call	67c <memset>
    49a0:	8005883a 	mov	r2,r16
    49a4:	80000c15 	stw	zero,48(r16)
    49a8:	80000d15 	stw	zero,52(r16)
    49ac:	80001115 	stw	zero,68(r16)
    49b0:	80001215 	stw	zero,72(r16)
    49b4:	dfc00417 	ldw	ra,16(sp)
    49b8:	dcc00317 	ldw	r19,12(sp)
    49bc:	dc800217 	ldw	r18,8(sp)
    49c0:	dc400117 	ldw	r17,4(sp)
    49c4:	dc000017 	ldw	r16,0(sp)
    49c8:	dec00504 	addi	sp,sp,20
    49cc:	f800283a 	ret
    49d0:	9809883a 	mov	r4,r19
    49d4:	01400104 	movi	r5,4
    49d8:	00048740 	call	4874 <__sfmoreglue>
    49dc:	90800015 	stw	r2,0(r18)
    49e0:	103fde1e 	bne	r2,zero,495c <__alt_mem_onchip_memory2_0+0xfbfe495c>
    49e4:	00800304 	movi	r2,12
    49e8:	98800015 	stw	r2,0(r19)
    49ec:	0005883a 	mov	r2,zero
    49f0:	003ff006 	br	49b4 <__alt_mem_onchip_memory2_0+0xfbfe49b4>

000049f4 <_cleanup>:
    49f4:	00800074 	movhi	r2,1
    49f8:	10874d04 	addi	r2,r2,7476
    49fc:	11000017 	ldw	r4,0(r2)
    4a00:	01400074 	movhi	r5,1
    4a04:	29647904 	addi	r5,r5,-28188
    4a08:	00053f41 	jmpi	53f4 <_fwalk_reent>

00004a0c <__sinit>:
    4a0c:	20800e17 	ldw	r2,56(r4)
    4a10:	10000126 	beq	r2,zero,4a18 <__sinit+0xc>
    4a14:	f800283a 	ret
    4a18:	00046d81 	jmpi	46d8 <__sinit.part.1>

00004a1c <__sfp_lock_acquire>:
    4a1c:	f800283a 	ret

00004a20 <__sfp_lock_release>:
    4a20:	f800283a 	ret

00004a24 <__sinit_lock_acquire>:
    4a24:	f800283a 	ret

00004a28 <__sinit_lock_release>:
    4a28:	f800283a 	ret

00004a2c <__fp_lock_all>:
    4a2c:	00800074 	movhi	r2,1
    4a30:	10874e04 	addi	r2,r2,7480
    4a34:	11000017 	ldw	r4,0(r2)
    4a38:	01400034 	movhi	r5,0
    4a3c:	2951af04 	addi	r5,r5,18108
    4a40:	00053301 	jmpi	5330 <_fwalk>

00004a44 <__fp_unlock_all>:
    4a44:	00800074 	movhi	r2,1
    4a48:	10874e04 	addi	r2,r2,7480
    4a4c:	11000017 	ldw	r4,0(r2)
    4a50:	01400034 	movhi	r5,0
    4a54:	2951b104 	addi	r5,r5,18116
    4a58:	00053301 	jmpi	5330 <_fwalk>

00004a5c <_malloc_trim_r>:
    4a5c:	defffb04 	addi	sp,sp,-20
    4a60:	dcc00315 	stw	r19,12(sp)
    4a64:	04c00074 	movhi	r19,1
    4a68:	dc800215 	stw	r18,8(sp)
    4a6c:	dc400115 	stw	r17,4(sp)
    4a70:	dc000015 	stw	r16,0(sp)
    4a74:	dfc00415 	stw	ra,16(sp)
    4a78:	2821883a 	mov	r16,r5
    4a7c:	9cc1c504 	addi	r19,r19,1812
    4a80:	2025883a 	mov	r18,r4
    4a84:	000d0500 	call	d050 <__malloc_lock>
    4a88:	98800217 	ldw	r2,8(r19)
    4a8c:	14400117 	ldw	r17,4(r2)
    4a90:	00bfff04 	movi	r2,-4
    4a94:	88a2703a 	and	r17,r17,r2
    4a98:	8c21c83a 	sub	r16,r17,r16
    4a9c:	8403fbc4 	addi	r16,r16,4079
    4aa0:	8020d33a 	srli	r16,r16,12
    4aa4:	0083ffc4 	movi	r2,4095
    4aa8:	843fffc4 	addi	r16,r16,-1
    4aac:	8020933a 	slli	r16,r16,12
    4ab0:	1400060e 	bge	r2,r16,4acc <_malloc_trim_r+0x70>
    4ab4:	9009883a 	mov	r4,r18
    4ab8:	000b883a 	mov	r5,zero
    4abc:	00078240 	call	7824 <_sbrk_r>
    4ac0:	98c00217 	ldw	r3,8(r19)
    4ac4:	1c47883a 	add	r3,r3,r17
    4ac8:	10c00a26 	beq	r2,r3,4af4 <_malloc_trim_r+0x98>
    4acc:	9009883a 	mov	r4,r18
    4ad0:	000d0700 	call	d070 <__malloc_unlock>
    4ad4:	0005883a 	mov	r2,zero
    4ad8:	dfc00417 	ldw	ra,16(sp)
    4adc:	dcc00317 	ldw	r19,12(sp)
    4ae0:	dc800217 	ldw	r18,8(sp)
    4ae4:	dc400117 	ldw	r17,4(sp)
    4ae8:	dc000017 	ldw	r16,0(sp)
    4aec:	dec00504 	addi	sp,sp,20
    4af0:	f800283a 	ret
    4af4:	9009883a 	mov	r4,r18
    4af8:	040bc83a 	sub	r5,zero,r16
    4afc:	00078240 	call	7824 <_sbrk_r>
    4b00:	00ffffc4 	movi	r3,-1
    4b04:	10c00d26 	beq	r2,r3,4b3c <_malloc_trim_r+0xe0>
    4b08:	00c00074 	movhi	r3,1
    4b0c:	18ce2e04 	addi	r3,r3,14520
    4b10:	18800017 	ldw	r2,0(r3)
    4b14:	99000217 	ldw	r4,8(r19)
    4b18:	8c23c83a 	sub	r17,r17,r16
    4b1c:	8c400054 	ori	r17,r17,1
    4b20:	1421c83a 	sub	r16,r2,r16
    4b24:	24400115 	stw	r17,4(r4)
    4b28:	9009883a 	mov	r4,r18
    4b2c:	1c000015 	stw	r16,0(r3)
    4b30:	000d0700 	call	d070 <__malloc_unlock>
    4b34:	00800044 	movi	r2,1
    4b38:	003fe706 	br	4ad8 <__alt_mem_onchip_memory2_0+0xfbfe4ad8>
    4b3c:	9009883a 	mov	r4,r18
    4b40:	000b883a 	mov	r5,zero
    4b44:	00078240 	call	7824 <_sbrk_r>
    4b48:	99000217 	ldw	r4,8(r19)
    4b4c:	014003c4 	movi	r5,15
    4b50:	1107c83a 	sub	r3,r2,r4
    4b54:	28ffdd0e 	bge	r5,r3,4acc <__alt_mem_onchip_memory2_0+0xfbfe4acc>
    4b58:	01400074 	movhi	r5,1
    4b5c:	29475004 	addi	r5,r5,7488
    4b60:	29400017 	ldw	r5,0(r5)
    4b64:	18c00054 	ori	r3,r3,1
    4b68:	20c00115 	stw	r3,4(r4)
    4b6c:	00c00074 	movhi	r3,1
    4b70:	1145c83a 	sub	r2,r2,r5
    4b74:	18ce2e04 	addi	r3,r3,14520
    4b78:	18800015 	stw	r2,0(r3)
    4b7c:	003fd306 	br	4acc <__alt_mem_onchip_memory2_0+0xfbfe4acc>

00004b80 <_free_r>:
    4b80:	28004c26 	beq	r5,zero,4cb4 <_free_r+0x134>
    4b84:	defffd04 	addi	sp,sp,-12
    4b88:	dc400115 	stw	r17,4(sp)
    4b8c:	dc000015 	stw	r16,0(sp)
    4b90:	2023883a 	mov	r17,r4
    4b94:	2821883a 	mov	r16,r5
    4b98:	dfc00215 	stw	ra,8(sp)
    4b9c:	000d0500 	call	d050 <__malloc_lock>
    4ba0:	813fff17 	ldw	r4,-4(r16)
    4ba4:	00bfff84 	movi	r2,-2
    4ba8:	02400074 	movhi	r9,1
    4bac:	81bffe04 	addi	r6,r16,-8
    4bb0:	2084703a 	and	r2,r4,r2
    4bb4:	4a41c504 	addi	r9,r9,1812
    4bb8:	308b883a 	add	r5,r6,r2
    4bbc:	2a000117 	ldw	r8,4(r5)
    4bc0:	49c00217 	ldw	r7,8(r9)
    4bc4:	00ffff04 	movi	r3,-4
    4bc8:	40c6703a 	and	r3,r8,r3
    4bcc:	39405326 	beq	r7,r5,4d1c <_free_r+0x19c>
    4bd0:	28c00115 	stw	r3,4(r5)
    4bd4:	2100004c 	andi	r4,r4,1
    4bd8:	2000091e 	bne	r4,zero,4c00 <_free_r+0x80>
    4bdc:	81fffe17 	ldw	r7,-8(r16)
    4be0:	4a000204 	addi	r8,r9,8
    4be4:	31cdc83a 	sub	r6,r6,r7
    4be8:	31000217 	ldw	r4,8(r6)
    4bec:	11c5883a 	add	r2,r2,r7
    4bf0:	22006126 	beq	r4,r8,4d78 <_free_r+0x1f8>
    4bf4:	31c00317 	ldw	r7,12(r6)
    4bf8:	21c00315 	stw	r7,12(r4)
    4bfc:	39000215 	stw	r4,8(r7)
    4c00:	28c9883a 	add	r4,r5,r3
    4c04:	21c00117 	ldw	r7,4(r4)
    4c08:	39c0004c 	andi	r7,r7,1
    4c0c:	38000d1e 	bne	r7,zero,4c44 <_free_r+0xc4>
    4c10:	29000217 	ldw	r4,8(r5)
    4c14:	10c5883a 	add	r2,r2,r3
    4c18:	00c00074 	movhi	r3,1
    4c1c:	18c1c704 	addi	r3,r3,1820
    4c20:	20c07526 	beq	r4,r3,4df8 <_free_r+0x278>
    4c24:	29c00317 	ldw	r7,12(r5)
    4c28:	11400054 	ori	r5,r2,1
    4c2c:	3087883a 	add	r3,r6,r2
    4c30:	21c00315 	stw	r7,12(r4)
    4c34:	39000215 	stw	r4,8(r7)
    4c38:	31400115 	stw	r5,4(r6)
    4c3c:	18800015 	stw	r2,0(r3)
    4c40:	00000406 	br	4c54 <_free_r+0xd4>
    4c44:	10c00054 	ori	r3,r2,1
    4c48:	30c00115 	stw	r3,4(r6)
    4c4c:	3087883a 	add	r3,r6,r2
    4c50:	18800015 	stw	r2,0(r3)
    4c54:	00c07fc4 	movi	r3,511
    4c58:	18801736 	bltu	r3,r2,4cb8 <_free_r+0x138>
    4c5c:	1004d0fa 	srli	r2,r2,3
    4c60:	01400044 	movi	r5,1
    4c64:	49000117 	ldw	r4,4(r9)
    4c68:	1087883a 	add	r3,r2,r2
    4c6c:	18c7883a 	add	r3,r3,r3
    4c70:	1005d0ba 	srai	r2,r2,2
    4c74:	18c7883a 	add	r3,r3,r3
    4c78:	1a47883a 	add	r3,r3,r9
    4c7c:	19c00217 	ldw	r7,8(r3)
    4c80:	2884983a 	sll	r2,r5,r2
    4c84:	30c00315 	stw	r3,12(r6)
    4c88:	31c00215 	stw	r7,8(r6)
    4c8c:	1104b03a 	or	r2,r2,r4
    4c90:	19800215 	stw	r6,8(r3)
    4c94:	48800115 	stw	r2,4(r9)
    4c98:	39800315 	stw	r6,12(r7)
    4c9c:	8809883a 	mov	r4,r17
    4ca0:	dfc00217 	ldw	ra,8(sp)
    4ca4:	dc400117 	ldw	r17,4(sp)
    4ca8:	dc000017 	ldw	r16,0(sp)
    4cac:	dec00304 	addi	sp,sp,12
    4cb0:	000d0701 	jmpi	d070 <__malloc_unlock>
    4cb4:	f800283a 	ret
    4cb8:	1006d27a 	srli	r3,r2,9
    4cbc:	01000104 	movi	r4,4
    4cc0:	20c04036 	bltu	r4,r3,4dc4 <_free_r+0x244>
    4cc4:	1006d1ba 	srli	r3,r2,6
    4cc8:	19400e04 	addi	r5,r3,56
    4ccc:	2947883a 	add	r3,r5,r5
    4cd0:	18c7883a 	add	r3,r3,r3
    4cd4:	18c7883a 	add	r3,r3,r3
    4cd8:	1a49883a 	add	r4,r3,r9
    4cdc:	20c00217 	ldw	r3,8(r4)
    4ce0:	01c00074 	movhi	r7,1
    4ce4:	39c1c504 	addi	r7,r7,1812
    4ce8:	19003b26 	beq	r3,r4,4dd8 <_free_r+0x258>
    4cec:	01ffff04 	movi	r7,-4
    4cf0:	19400117 	ldw	r5,4(r3)
    4cf4:	29ca703a 	and	r5,r5,r7
    4cf8:	1140022e 	bgeu	r2,r5,4d04 <_free_r+0x184>
    4cfc:	18c00217 	ldw	r3,8(r3)
    4d00:	20fffb1e 	bne	r4,r3,4cf0 <__alt_mem_onchip_memory2_0+0xfbfe4cf0>
    4d04:	18800317 	ldw	r2,12(r3)
    4d08:	30800315 	stw	r2,12(r6)
    4d0c:	30c00215 	stw	r3,8(r6)
    4d10:	11800215 	stw	r6,8(r2)
    4d14:	19800315 	stw	r6,12(r3)
    4d18:	003fe006 	br	4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4d1c:	2100004c 	andi	r4,r4,1
    4d20:	1885883a 	add	r2,r3,r2
    4d24:	2000071e 	bne	r4,zero,4d44 <_free_r+0x1c4>
    4d28:	817ffe17 	ldw	r5,-8(r16)
    4d2c:	314dc83a 	sub	r6,r6,r5
    4d30:	30c00317 	ldw	r3,12(r6)
    4d34:	31000217 	ldw	r4,8(r6)
    4d38:	1145883a 	add	r2,r2,r5
    4d3c:	20c00315 	stw	r3,12(r4)
    4d40:	19000215 	stw	r4,8(r3)
    4d44:	10c00054 	ori	r3,r2,1
    4d48:	30c00115 	stw	r3,4(r6)
    4d4c:	00c00074 	movhi	r3,1
    4d50:	18c75104 	addi	r3,r3,7492
    4d54:	18c00017 	ldw	r3,0(r3)
    4d58:	49800215 	stw	r6,8(r9)
    4d5c:	10ffcf36 	bltu	r2,r3,4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4d60:	00800074 	movhi	r2,1
    4d64:	108e2504 	addi	r2,r2,14484
    4d68:	11400017 	ldw	r5,0(r2)
    4d6c:	8809883a 	mov	r4,r17
    4d70:	0004a5c0 	call	4a5c <_malloc_trim_r>
    4d74:	003fc906 	br	4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4d78:	28c9883a 	add	r4,r5,r3
    4d7c:	21000117 	ldw	r4,4(r4)
    4d80:	2100004c 	andi	r4,r4,1
    4d84:	20000a1e 	bne	r4,zero,4db0 <_free_r+0x230>
    4d88:	29000317 	ldw	r4,12(r5)
    4d8c:	29400217 	ldw	r5,8(r5)
    4d90:	10c5883a 	add	r2,r2,r3
    4d94:	10c00054 	ori	r3,r2,1
    4d98:	29000315 	stw	r4,12(r5)
    4d9c:	21400215 	stw	r5,8(r4)
    4da0:	30c00115 	stw	r3,4(r6)
    4da4:	308d883a 	add	r6,r6,r2
    4da8:	30800015 	stw	r2,0(r6)
    4dac:	003fbb06 	br	4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4db0:	10c00054 	ori	r3,r2,1
    4db4:	30c00115 	stw	r3,4(r6)
    4db8:	308d883a 	add	r6,r6,r2
    4dbc:	30800015 	stw	r2,0(r6)
    4dc0:	003fb606 	br	4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4dc4:	01000504 	movi	r4,20
    4dc8:	20c01436 	bltu	r4,r3,4e1c <_free_r+0x29c>
    4dcc:	194016c4 	addi	r5,r3,91
    4dd0:	2947883a 	add	r3,r5,r5
    4dd4:	003fbe06 	br	4cd0 <__alt_mem_onchip_memory2_0+0xfbfe4cd0>
    4dd8:	280bd0ba 	srai	r5,r5,2
    4ddc:	00800044 	movi	r2,1
    4de0:	39000117 	ldw	r4,4(r7)
    4de4:	114a983a 	sll	r5,r2,r5
    4de8:	1805883a 	mov	r2,r3
    4dec:	2908b03a 	or	r4,r5,r4
    4df0:	39000115 	stw	r4,4(r7)
    4df4:	003fc406 	br	4d08 <__alt_mem_onchip_memory2_0+0xfbfe4d08>
    4df8:	49800515 	stw	r6,20(r9)
    4dfc:	49800415 	stw	r6,16(r9)
    4e00:	10c00054 	ori	r3,r2,1
    4e04:	31000315 	stw	r4,12(r6)
    4e08:	31000215 	stw	r4,8(r6)
    4e0c:	30c00115 	stw	r3,4(r6)
    4e10:	308d883a 	add	r6,r6,r2
    4e14:	30800015 	stw	r2,0(r6)
    4e18:	003fa006 	br	4c9c <__alt_mem_onchip_memory2_0+0xfbfe4c9c>
    4e1c:	01001504 	movi	r4,84
    4e20:	20c00436 	bltu	r4,r3,4e34 <_free_r+0x2b4>
    4e24:	1006d33a 	srli	r3,r2,12
    4e28:	19401b84 	addi	r5,r3,110
    4e2c:	2947883a 	add	r3,r5,r5
    4e30:	003fa706 	br	4cd0 <__alt_mem_onchip_memory2_0+0xfbfe4cd0>
    4e34:	01005504 	movi	r4,340
    4e38:	20c00436 	bltu	r4,r3,4e4c <_free_r+0x2cc>
    4e3c:	1006d3fa 	srli	r3,r2,15
    4e40:	19401dc4 	addi	r5,r3,119
    4e44:	2947883a 	add	r3,r5,r5
    4e48:	003fa106 	br	4cd0 <__alt_mem_onchip_memory2_0+0xfbfe4cd0>
    4e4c:	01015504 	movi	r4,1364
    4e50:	20c00436 	bltu	r4,r3,4e64 <_free_r+0x2e4>
    4e54:	1006d4ba 	srli	r3,r2,18
    4e58:	19401f04 	addi	r5,r3,124
    4e5c:	2947883a 	add	r3,r5,r5
    4e60:	003f9b06 	br	4cd0 <__alt_mem_onchip_memory2_0+0xfbfe4cd0>
    4e64:	00c03f04 	movi	r3,252
    4e68:	01401f84 	movi	r5,126
    4e6c:	003f9806 	br	4cd0 <__alt_mem_onchip_memory2_0+0xfbfe4cd0>

00004e70 <__sfvwrite_r>:
    4e70:	30800217 	ldw	r2,8(r6)
    4e74:	10006726 	beq	r2,zero,5014 <__sfvwrite_r+0x1a4>
    4e78:	defff404 	addi	sp,sp,-48
    4e7c:	dd000615 	stw	r20,24(sp)
    4e80:	2029883a 	mov	r20,r4
    4e84:	2900030b 	ldhu	r4,12(r5)
    4e88:	ddc00915 	stw	r23,36(sp)
    4e8c:	dc000215 	stw	r16,8(sp)
    4e90:	dfc00b15 	stw	ra,44(sp)
    4e94:	df000a15 	stw	fp,40(sp)
    4e98:	dd800815 	stw	r22,32(sp)
    4e9c:	dd400715 	stw	r21,28(sp)
    4ea0:	dcc00515 	stw	r19,20(sp)
    4ea4:	dc800415 	stw	r18,16(sp)
    4ea8:	dc400315 	stw	r17,12(sp)
    4eac:	2080020c 	andi	r2,r4,8
    4eb0:	2821883a 	mov	r16,r5
    4eb4:	302f883a 	mov	r23,r6
    4eb8:	10002726 	beq	r2,zero,4f58 <__sfvwrite_r+0xe8>
    4ebc:	28800417 	ldw	r2,16(r5)
    4ec0:	10002526 	beq	r2,zero,4f58 <__sfvwrite_r+0xe8>
    4ec4:	2080008c 	andi	r2,r4,2
    4ec8:	bc400017 	ldw	r17,0(r23)
    4ecc:	10002a26 	beq	r2,zero,4f78 <__sfvwrite_r+0x108>
    4ed0:	05600034 	movhi	r21,32768
    4ed4:	0027883a 	mov	r19,zero
    4ed8:	0025883a 	mov	r18,zero
    4edc:	ad7f0004 	addi	r21,r21,-1024
    4ee0:	980d883a 	mov	r6,r19
    4ee4:	a009883a 	mov	r4,r20
    4ee8:	90004626 	beq	r18,zero,5004 <__sfvwrite_r+0x194>
    4eec:	900f883a 	mov	r7,r18
    4ef0:	81400717 	ldw	r5,28(r16)
    4ef4:	ac80022e 	bgeu	r21,r18,4f00 <__sfvwrite_r+0x90>
    4ef8:	01e00034 	movhi	r7,32768
    4efc:	39ff0004 	addi	r7,r7,-1024
    4f00:	80800917 	ldw	r2,36(r16)
    4f04:	103ee83a 	callr	r2
    4f08:	0080520e 	bge	zero,r2,5054 <__sfvwrite_r+0x1e4>
    4f0c:	b8c00217 	ldw	r3,8(r23)
    4f10:	98a7883a 	add	r19,r19,r2
    4f14:	90a5c83a 	sub	r18,r18,r2
    4f18:	1885c83a 	sub	r2,r3,r2
    4f1c:	b8800215 	stw	r2,8(r23)
    4f20:	103fef1e 	bne	r2,zero,4ee0 <__alt_mem_onchip_memory2_0+0xfbfe4ee0>
    4f24:	0005883a 	mov	r2,zero
    4f28:	dfc00b17 	ldw	ra,44(sp)
    4f2c:	df000a17 	ldw	fp,40(sp)
    4f30:	ddc00917 	ldw	r23,36(sp)
    4f34:	dd800817 	ldw	r22,32(sp)
    4f38:	dd400717 	ldw	r21,28(sp)
    4f3c:	dd000617 	ldw	r20,24(sp)
    4f40:	dcc00517 	ldw	r19,20(sp)
    4f44:	dc800417 	ldw	r18,16(sp)
    4f48:	dc400317 	ldw	r17,12(sp)
    4f4c:	dc000217 	ldw	r16,8(sp)
    4f50:	dec00c04 	addi	sp,sp,48
    4f54:	f800283a 	ret
    4f58:	a009883a 	mov	r4,r20
    4f5c:	800b883a 	mov	r5,r16
    4f60:	00029ac0 	call	29ac <__swsetup_r>
    4f64:	1000ec1e 	bne	r2,zero,5318 <__sfvwrite_r+0x4a8>
    4f68:	8100030b 	ldhu	r4,12(r16)
    4f6c:	bc400017 	ldw	r17,0(r23)
    4f70:	2080008c 	andi	r2,r4,2
    4f74:	103fd61e 	bne	r2,zero,4ed0 <__alt_mem_onchip_memory2_0+0xfbfe4ed0>
    4f78:	2080004c 	andi	r2,r4,1
    4f7c:	10003a1e 	bne	r2,zero,5068 <__sfvwrite_r+0x1f8>
    4f80:	0039883a 	mov	fp,zero
    4f84:	0025883a 	mov	r18,zero
    4f88:	90001a26 	beq	r18,zero,4ff4 <__sfvwrite_r+0x184>
    4f8c:	2080800c 	andi	r2,r4,512
    4f90:	85800217 	ldw	r22,8(r16)
    4f94:	10007626 	beq	r2,zero,5170 <__sfvwrite_r+0x300>
    4f98:	b027883a 	mov	r19,r22
    4f9c:	95809436 	bltu	r18,r22,51f0 <__sfvwrite_r+0x380>
    4fa0:	2081200c 	andi	r2,r4,1152
    4fa4:	10009f1e 	bne	r2,zero,5224 <__sfvwrite_r+0x3b4>
    4fa8:	81000017 	ldw	r4,0(r16)
    4fac:	e00b883a 	mov	r5,fp
    4fb0:	980d883a 	mov	r6,r19
    4fb4:	0005fe00 	call	5fe0 <memmove>
    4fb8:	81000217 	ldw	r4,8(r16)
    4fbc:	81400017 	ldw	r5,0(r16)
    4fc0:	9005883a 	mov	r2,r18
    4fc4:	2587c83a 	sub	r3,r4,r22
    4fc8:	2ce7883a 	add	r19,r5,r19
    4fcc:	80c00215 	stw	r3,8(r16)
    4fd0:	84c00015 	stw	r19,0(r16)
    4fd4:	b8c00217 	ldw	r3,8(r23)
    4fd8:	e0b9883a 	add	fp,fp,r2
    4fdc:	90a5c83a 	sub	r18,r18,r2
    4fe0:	1885c83a 	sub	r2,r3,r2
    4fe4:	b8800215 	stw	r2,8(r23)
    4fe8:	103fce26 	beq	r2,zero,4f24 <__alt_mem_onchip_memory2_0+0xfbfe4f24>
    4fec:	8100030b 	ldhu	r4,12(r16)
    4ff0:	903fe61e 	bne	r18,zero,4f8c <__alt_mem_onchip_memory2_0+0xfbfe4f8c>
    4ff4:	8f000017 	ldw	fp,0(r17)
    4ff8:	8c800117 	ldw	r18,4(r17)
    4ffc:	8c400204 	addi	r17,r17,8
    5000:	003fe106 	br	4f88 <__alt_mem_onchip_memory2_0+0xfbfe4f88>
    5004:	8cc00017 	ldw	r19,0(r17)
    5008:	8c800117 	ldw	r18,4(r17)
    500c:	8c400204 	addi	r17,r17,8
    5010:	003fb306 	br	4ee0 <__alt_mem_onchip_memory2_0+0xfbfe4ee0>
    5014:	0005883a 	mov	r2,zero
    5018:	f800283a 	ret
    501c:	00a00034 	movhi	r2,32768
    5020:	10bfffc4 	addi	r2,r2,-1
    5024:	9009883a 	mov	r4,r18
    5028:	1480012e 	bgeu	r2,r18,5030 <__sfvwrite_r+0x1c0>
    502c:	1009883a 	mov	r4,r2
    5030:	980b883a 	mov	r5,r19
    5034:	000a3d00 	call	a3d0 <__divsi3>
    5038:	81400717 	ldw	r5,28(r16)
    503c:	80c00917 	ldw	r3,36(r16)
    5040:	988f383a 	mul	r7,r19,r2
    5044:	a009883a 	mov	r4,r20
    5048:	e00d883a 	mov	r6,fp
    504c:	183ee83a 	callr	r3
    5050:	00bfe016 	blt	zero,r2,4fd4 <__alt_mem_onchip_memory2_0+0xfbfe4fd4>
    5054:	8080030b 	ldhu	r2,12(r16)
    5058:	10801014 	ori	r2,r2,64
    505c:	8080030d 	sth	r2,12(r16)
    5060:	00bfffc4 	movi	r2,-1
    5064:	003fb006 	br	4f28 <__alt_mem_onchip_memory2_0+0xfbfe4f28>
    5068:	0027883a 	mov	r19,zero
    506c:	0011883a 	mov	r8,zero
    5070:	0039883a 	mov	fp,zero
    5074:	0025883a 	mov	r18,zero
    5078:	90001f26 	beq	r18,zero,50f8 <__sfvwrite_r+0x288>
    507c:	40006026 	beq	r8,zero,5200 <__sfvwrite_r+0x390>
    5080:	982b883a 	mov	r21,r19
    5084:	94c0012e 	bgeu	r18,r19,508c <__sfvwrite_r+0x21c>
    5088:	902b883a 	mov	r21,r18
    508c:	81000017 	ldw	r4,0(r16)
    5090:	80800417 	ldw	r2,16(r16)
    5094:	a82d883a 	mov	r22,r21
    5098:	81800217 	ldw	r6,8(r16)
    509c:	81c00517 	ldw	r7,20(r16)
    50a0:	1100022e 	bgeu	r2,r4,50ac <__sfvwrite_r+0x23c>
    50a4:	31c7883a 	add	r3,r6,r7
    50a8:	1d401816 	blt	r3,r21,510c <__sfvwrite_r+0x29c>
    50ac:	a9c04416 	blt	r21,r7,51c0 <__sfvwrite_r+0x350>
    50b0:	80800917 	ldw	r2,36(r16)
    50b4:	81400717 	ldw	r5,28(r16)
    50b8:	a009883a 	mov	r4,r20
    50bc:	da000115 	stw	r8,4(sp)
    50c0:	e00d883a 	mov	r6,fp
    50c4:	103ee83a 	callr	r2
    50c8:	102d883a 	mov	r22,r2
    50cc:	da000117 	ldw	r8,4(sp)
    50d0:	00bfe00e 	bge	zero,r2,5054 <__alt_mem_onchip_memory2_0+0xfbfe5054>
    50d4:	9da7c83a 	sub	r19,r19,r22
    50d8:	98001f26 	beq	r19,zero,5158 <__sfvwrite_r+0x2e8>
    50dc:	b8800217 	ldw	r2,8(r23)
    50e0:	e5b9883a 	add	fp,fp,r22
    50e4:	95a5c83a 	sub	r18,r18,r22
    50e8:	15adc83a 	sub	r22,r2,r22
    50ec:	bd800215 	stw	r22,8(r23)
    50f0:	b03f8c26 	beq	r22,zero,4f24 <__alt_mem_onchip_memory2_0+0xfbfe4f24>
    50f4:	903fe11e 	bne	r18,zero,507c <__alt_mem_onchip_memory2_0+0xfbfe507c>
    50f8:	8f000017 	ldw	fp,0(r17)
    50fc:	8c800117 	ldw	r18,4(r17)
    5100:	0011883a 	mov	r8,zero
    5104:	8c400204 	addi	r17,r17,8
    5108:	003fdb06 	br	5078 <__alt_mem_onchip_memory2_0+0xfbfe5078>
    510c:	180d883a 	mov	r6,r3
    5110:	e00b883a 	mov	r5,fp
    5114:	da000115 	stw	r8,4(sp)
    5118:	d8c00015 	stw	r3,0(sp)
    511c:	0005fe00 	call	5fe0 <memmove>
    5120:	d8c00017 	ldw	r3,0(sp)
    5124:	80800017 	ldw	r2,0(r16)
    5128:	a009883a 	mov	r4,r20
    512c:	800b883a 	mov	r5,r16
    5130:	10c5883a 	add	r2,r2,r3
    5134:	80800015 	stw	r2,0(r16)
    5138:	d8c00015 	stw	r3,0(sp)
    513c:	00046300 	call	4630 <_fflush_r>
    5140:	d8c00017 	ldw	r3,0(sp)
    5144:	da000117 	ldw	r8,4(sp)
    5148:	103fc21e 	bne	r2,zero,5054 <__alt_mem_onchip_memory2_0+0xfbfe5054>
    514c:	182d883a 	mov	r22,r3
    5150:	9da7c83a 	sub	r19,r19,r22
    5154:	983fe11e 	bne	r19,zero,50dc <__alt_mem_onchip_memory2_0+0xfbfe50dc>
    5158:	a009883a 	mov	r4,r20
    515c:	800b883a 	mov	r5,r16
    5160:	00046300 	call	4630 <_fflush_r>
    5164:	103fbb1e 	bne	r2,zero,5054 <__alt_mem_onchip_memory2_0+0xfbfe5054>
    5168:	0011883a 	mov	r8,zero
    516c:	003fdb06 	br	50dc <__alt_mem_onchip_memory2_0+0xfbfe50dc>
    5170:	81000017 	ldw	r4,0(r16)
    5174:	80800417 	ldw	r2,16(r16)
    5178:	11000236 	bltu	r2,r4,5184 <__sfvwrite_r+0x314>
    517c:	84c00517 	ldw	r19,20(r16)
    5180:	94ffa62e 	bgeu	r18,r19,501c <__alt_mem_onchip_memory2_0+0xfbfe501c>
    5184:	9027883a 	mov	r19,r18
    5188:	b480012e 	bgeu	r22,r18,5190 <__sfvwrite_r+0x320>
    518c:	b027883a 	mov	r19,r22
    5190:	e00b883a 	mov	r5,fp
    5194:	980d883a 	mov	r6,r19
    5198:	0005fe00 	call	5fe0 <memmove>
    519c:	80800217 	ldw	r2,8(r16)
    51a0:	80c00017 	ldw	r3,0(r16)
    51a4:	14c5c83a 	sub	r2,r2,r19
    51a8:	1cc7883a 	add	r3,r3,r19
    51ac:	80800215 	stw	r2,8(r16)
    51b0:	80c00015 	stw	r3,0(r16)
    51b4:	10004326 	beq	r2,zero,52c4 <__sfvwrite_r+0x454>
    51b8:	9805883a 	mov	r2,r19
    51bc:	003f8506 	br	4fd4 <__alt_mem_onchip_memory2_0+0xfbfe4fd4>
    51c0:	a80d883a 	mov	r6,r21
    51c4:	e00b883a 	mov	r5,fp
    51c8:	da000115 	stw	r8,4(sp)
    51cc:	0005fe00 	call	5fe0 <memmove>
    51d0:	80800217 	ldw	r2,8(r16)
    51d4:	80c00017 	ldw	r3,0(r16)
    51d8:	da000117 	ldw	r8,4(sp)
    51dc:	1545c83a 	sub	r2,r2,r21
    51e0:	1d6b883a 	add	r21,r3,r21
    51e4:	80800215 	stw	r2,8(r16)
    51e8:	85400015 	stw	r21,0(r16)
    51ec:	003fb906 	br	50d4 <__alt_mem_onchip_memory2_0+0xfbfe50d4>
    51f0:	81000017 	ldw	r4,0(r16)
    51f4:	902d883a 	mov	r22,r18
    51f8:	9027883a 	mov	r19,r18
    51fc:	003f6b06 	br	4fac <__alt_mem_onchip_memory2_0+0xfbfe4fac>
    5200:	e009883a 	mov	r4,fp
    5204:	01400284 	movi	r5,10
    5208:	900d883a 	mov	r6,r18
    520c:	0005ef80 	call	5ef8 <memchr>
    5210:	10003e26 	beq	r2,zero,530c <__sfvwrite_r+0x49c>
    5214:	10800044 	addi	r2,r2,1
    5218:	1727c83a 	sub	r19,r2,fp
    521c:	02000044 	movi	r8,1
    5220:	003f9706 	br	5080 <__alt_mem_onchip_memory2_0+0xfbfe5080>
    5224:	80800517 	ldw	r2,20(r16)
    5228:	81400417 	ldw	r5,16(r16)
    522c:	80c00017 	ldw	r3,0(r16)
    5230:	10a7883a 	add	r19,r2,r2
    5234:	9885883a 	add	r2,r19,r2
    5238:	1026d7fa 	srli	r19,r2,31
    523c:	196bc83a 	sub	r21,r3,r5
    5240:	a9800044 	addi	r6,r21,1
    5244:	9885883a 	add	r2,r19,r2
    5248:	1027d07a 	srai	r19,r2,1
    524c:	3485883a 	add	r2,r6,r18
    5250:	980d883a 	mov	r6,r19
    5254:	9880022e 	bgeu	r19,r2,5260 <__sfvwrite_r+0x3f0>
    5258:	1027883a 	mov	r19,r2
    525c:	100d883a 	mov	r6,r2
    5260:	2101000c 	andi	r4,r4,1024
    5264:	20001c26 	beq	r4,zero,52d8 <__sfvwrite_r+0x468>
    5268:	a009883a 	mov	r4,r20
    526c:	300b883a 	mov	r5,r6
    5270:	00057500 	call	5750 <_malloc_r>
    5274:	102d883a 	mov	r22,r2
    5278:	10002926 	beq	r2,zero,5320 <__sfvwrite_r+0x4b0>
    527c:	81400417 	ldw	r5,16(r16)
    5280:	1009883a 	mov	r4,r2
    5284:	a80d883a 	mov	r6,r21
    5288:	00005440 	call	544 <memcpy>
    528c:	8080030b 	ldhu	r2,12(r16)
    5290:	00fedfc4 	movi	r3,-1153
    5294:	10c4703a 	and	r2,r2,r3
    5298:	10802014 	ori	r2,r2,128
    529c:	8080030d 	sth	r2,12(r16)
    52a0:	b549883a 	add	r4,r22,r21
    52a4:	9d4bc83a 	sub	r5,r19,r21
    52a8:	85800415 	stw	r22,16(r16)
    52ac:	84c00515 	stw	r19,20(r16)
    52b0:	81000015 	stw	r4,0(r16)
    52b4:	902d883a 	mov	r22,r18
    52b8:	81400215 	stw	r5,8(r16)
    52bc:	9027883a 	mov	r19,r18
    52c0:	003f3a06 	br	4fac <__alt_mem_onchip_memory2_0+0xfbfe4fac>
    52c4:	a009883a 	mov	r4,r20
    52c8:	800b883a 	mov	r5,r16
    52cc:	00046300 	call	4630 <_fflush_r>
    52d0:	103fb926 	beq	r2,zero,51b8 <__alt_mem_onchip_memory2_0+0xfbfe51b8>
    52d4:	003f5f06 	br	5054 <__alt_mem_onchip_memory2_0+0xfbfe5054>
    52d8:	a009883a 	mov	r4,r20
    52dc:	00072480 	call	7248 <_realloc_r>
    52e0:	102d883a 	mov	r22,r2
    52e4:	103fee1e 	bne	r2,zero,52a0 <__alt_mem_onchip_memory2_0+0xfbfe52a0>
    52e8:	81400417 	ldw	r5,16(r16)
    52ec:	a009883a 	mov	r4,r20
    52f0:	0004b800 	call	4b80 <_free_r>
    52f4:	8080030b 	ldhu	r2,12(r16)
    52f8:	00ffdfc4 	movi	r3,-129
    52fc:	1884703a 	and	r2,r3,r2
    5300:	00c00304 	movi	r3,12
    5304:	a0c00015 	stw	r3,0(r20)
    5308:	003f5306 	br	5058 <__alt_mem_onchip_memory2_0+0xfbfe5058>
    530c:	94c00044 	addi	r19,r18,1
    5310:	02000044 	movi	r8,1
    5314:	003f5a06 	br	5080 <__alt_mem_onchip_memory2_0+0xfbfe5080>
    5318:	00bfffc4 	movi	r2,-1
    531c:	003f0206 	br	4f28 <__alt_mem_onchip_memory2_0+0xfbfe4f28>
    5320:	00800304 	movi	r2,12
    5324:	a0800015 	stw	r2,0(r20)
    5328:	8080030b 	ldhu	r2,12(r16)
    532c:	003f4a06 	br	5058 <__alt_mem_onchip_memory2_0+0xfbfe5058>

00005330 <_fwalk>:
    5330:	defff704 	addi	sp,sp,-36
    5334:	dd000415 	stw	r20,16(sp)
    5338:	dfc00815 	stw	ra,32(sp)
    533c:	ddc00715 	stw	r23,28(sp)
    5340:	dd800615 	stw	r22,24(sp)
    5344:	dd400515 	stw	r21,20(sp)
    5348:	dcc00315 	stw	r19,12(sp)
    534c:	dc800215 	stw	r18,8(sp)
    5350:	dc400115 	stw	r17,4(sp)
    5354:	dc000015 	stw	r16,0(sp)
    5358:	2500b804 	addi	r20,r4,736
    535c:	a0002326 	beq	r20,zero,53ec <_fwalk+0xbc>
    5360:	282b883a 	mov	r21,r5
    5364:	002f883a 	mov	r23,zero
    5368:	05800044 	movi	r22,1
    536c:	04ffffc4 	movi	r19,-1
    5370:	a4400117 	ldw	r17,4(r20)
    5374:	a4800217 	ldw	r18,8(r20)
    5378:	8c7fffc4 	addi	r17,r17,-1
    537c:	88000d16 	blt	r17,zero,53b4 <_fwalk+0x84>
    5380:	94000304 	addi	r16,r18,12
    5384:	94800384 	addi	r18,r18,14
    5388:	80c0000b 	ldhu	r3,0(r16)
    538c:	8c7fffc4 	addi	r17,r17,-1
    5390:	813ffd04 	addi	r4,r16,-12
    5394:	b0c0042e 	bgeu	r22,r3,53a8 <_fwalk+0x78>
    5398:	90c0000f 	ldh	r3,0(r18)
    539c:	1cc00226 	beq	r3,r19,53a8 <_fwalk+0x78>
    53a0:	a83ee83a 	callr	r21
    53a4:	b8aeb03a 	or	r23,r23,r2
    53a8:	84001a04 	addi	r16,r16,104
    53ac:	94801a04 	addi	r18,r18,104
    53b0:	8cfff51e 	bne	r17,r19,5388 <__alt_mem_onchip_memory2_0+0xfbfe5388>
    53b4:	a5000017 	ldw	r20,0(r20)
    53b8:	a03fed1e 	bne	r20,zero,5370 <__alt_mem_onchip_memory2_0+0xfbfe5370>
    53bc:	b805883a 	mov	r2,r23
    53c0:	dfc00817 	ldw	ra,32(sp)
    53c4:	ddc00717 	ldw	r23,28(sp)
    53c8:	dd800617 	ldw	r22,24(sp)
    53cc:	dd400517 	ldw	r21,20(sp)
    53d0:	dd000417 	ldw	r20,16(sp)
    53d4:	dcc00317 	ldw	r19,12(sp)
    53d8:	dc800217 	ldw	r18,8(sp)
    53dc:	dc400117 	ldw	r17,4(sp)
    53e0:	dc000017 	ldw	r16,0(sp)
    53e4:	dec00904 	addi	sp,sp,36
    53e8:	f800283a 	ret
    53ec:	002f883a 	mov	r23,zero
    53f0:	003ff206 	br	53bc <__alt_mem_onchip_memory2_0+0xfbfe53bc>

000053f4 <_fwalk_reent>:
    53f4:	defff704 	addi	sp,sp,-36
    53f8:	dd400515 	stw	r21,20(sp)
    53fc:	dfc00815 	stw	ra,32(sp)
    5400:	ddc00715 	stw	r23,28(sp)
    5404:	dd800615 	stw	r22,24(sp)
    5408:	dd000415 	stw	r20,16(sp)
    540c:	dcc00315 	stw	r19,12(sp)
    5410:	dc800215 	stw	r18,8(sp)
    5414:	dc400115 	stw	r17,4(sp)
    5418:	dc000015 	stw	r16,0(sp)
    541c:	2540b804 	addi	r21,r4,736
    5420:	a8002326 	beq	r21,zero,54b0 <_fwalk_reent+0xbc>
    5424:	2829883a 	mov	r20,r5
    5428:	202d883a 	mov	r22,r4
    542c:	002f883a 	mov	r23,zero
    5430:	04c00044 	movi	r19,1
    5434:	04bfffc4 	movi	r18,-1
    5438:	ac400117 	ldw	r17,4(r21)
    543c:	ac000217 	ldw	r16,8(r21)
    5440:	8c7fffc4 	addi	r17,r17,-1
    5444:	88000c16 	blt	r17,zero,5478 <_fwalk_reent+0x84>
    5448:	84000304 	addi	r16,r16,12
    544c:	80c0000b 	ldhu	r3,0(r16)
    5450:	8c7fffc4 	addi	r17,r17,-1
    5454:	817ffd04 	addi	r5,r16,-12
    5458:	98c0052e 	bgeu	r19,r3,5470 <_fwalk_reent+0x7c>
    545c:	80c0008f 	ldh	r3,2(r16)
    5460:	b009883a 	mov	r4,r22
    5464:	1c800226 	beq	r3,r18,5470 <_fwalk_reent+0x7c>
    5468:	a03ee83a 	callr	r20
    546c:	b8aeb03a 	or	r23,r23,r2
    5470:	84001a04 	addi	r16,r16,104
    5474:	8cbff51e 	bne	r17,r18,544c <__alt_mem_onchip_memory2_0+0xfbfe544c>
    5478:	ad400017 	ldw	r21,0(r21)
    547c:	a83fee1e 	bne	r21,zero,5438 <__alt_mem_onchip_memory2_0+0xfbfe5438>
    5480:	b805883a 	mov	r2,r23
    5484:	dfc00817 	ldw	ra,32(sp)
    5488:	ddc00717 	ldw	r23,28(sp)
    548c:	dd800617 	ldw	r22,24(sp)
    5490:	dd400517 	ldw	r21,20(sp)
    5494:	dd000417 	ldw	r20,16(sp)
    5498:	dcc00317 	ldw	r19,12(sp)
    549c:	dc800217 	ldw	r18,8(sp)
    54a0:	dc400117 	ldw	r17,4(sp)
    54a4:	dc000017 	ldw	r16,0(sp)
    54a8:	dec00904 	addi	sp,sp,36
    54ac:	f800283a 	ret
    54b0:	002f883a 	mov	r23,zero
    54b4:	003ff206 	br	5480 <__alt_mem_onchip_memory2_0+0xfbfe5480>

000054b8 <_setlocale_r>:
    54b8:	30001b26 	beq	r6,zero,5528 <_setlocale_r+0x70>
    54bc:	01400074 	movhi	r5,1
    54c0:	defffe04 	addi	sp,sp,-8
    54c4:	297fbc04 	addi	r5,r5,-272
    54c8:	3009883a 	mov	r4,r6
    54cc:	dc000015 	stw	r16,0(sp)
    54d0:	dfc00115 	stw	ra,4(sp)
    54d4:	3021883a 	mov	r16,r6
    54d8:	00079b40 	call	79b4 <strcmp>
    54dc:	1000061e 	bne	r2,zero,54f8 <_setlocale_r+0x40>
    54e0:	00800074 	movhi	r2,1
    54e4:	10bfbb04 	addi	r2,r2,-276
    54e8:	dfc00117 	ldw	ra,4(sp)
    54ec:	dc000017 	ldw	r16,0(sp)
    54f0:	dec00204 	addi	sp,sp,8
    54f4:	f800283a 	ret
    54f8:	01400074 	movhi	r5,1
    54fc:	297fbb04 	addi	r5,r5,-276
    5500:	8009883a 	mov	r4,r16
    5504:	00079b40 	call	79b4 <strcmp>
    5508:	103ff526 	beq	r2,zero,54e0 <__alt_mem_onchip_memory2_0+0xfbfe54e0>
    550c:	01400074 	movhi	r5,1
    5510:	297fa604 	addi	r5,r5,-360
    5514:	8009883a 	mov	r4,r16
    5518:	00079b40 	call	79b4 <strcmp>
    551c:	103ff026 	beq	r2,zero,54e0 <__alt_mem_onchip_memory2_0+0xfbfe54e0>
    5520:	0005883a 	mov	r2,zero
    5524:	003ff006 	br	54e8 <__alt_mem_onchip_memory2_0+0xfbfe54e8>
    5528:	00800074 	movhi	r2,1
    552c:	10bfbb04 	addi	r2,r2,-276
    5530:	f800283a 	ret

00005534 <__locale_charset>:
    5534:	00800074 	movhi	r2,1
    5538:	1081af04 	addi	r2,r2,1724
    553c:	f800283a 	ret

00005540 <__locale_mb_cur_max>:
    5540:	00800074 	movhi	r2,1
    5544:	10874f04 	addi	r2,r2,7484
    5548:	10800017 	ldw	r2,0(r2)
    554c:	f800283a 	ret

00005550 <__locale_msgcharset>:
    5550:	00800074 	movhi	r2,1
    5554:	1081a704 	addi	r2,r2,1692
    5558:	f800283a 	ret

0000555c <__locale_cjk_lang>:
    555c:	0005883a 	mov	r2,zero
    5560:	f800283a 	ret

00005564 <_localeconv_r>:
    5564:	00800074 	movhi	r2,1
    5568:	1081b704 	addi	r2,r2,1756
    556c:	f800283a 	ret

00005570 <setlocale>:
    5570:	00c00074 	movhi	r3,1
    5574:	18c74e04 	addi	r3,r3,7480
    5578:	2005883a 	mov	r2,r4
    557c:	19000017 	ldw	r4,0(r3)
    5580:	280d883a 	mov	r6,r5
    5584:	100b883a 	mov	r5,r2
    5588:	00054b81 	jmpi	54b8 <_setlocale_r>

0000558c <localeconv>:
    558c:	00800074 	movhi	r2,1
    5590:	1081b704 	addi	r2,r2,1756
    5594:	f800283a 	ret

00005598 <__smakebuf_r>:
    5598:	2880030b 	ldhu	r2,12(r5)
    559c:	10c0008c 	andi	r3,r2,2
    55a0:	1800401e 	bne	r3,zero,56a4 <__smakebuf_r+0x10c>
    55a4:	deffec04 	addi	sp,sp,-80
    55a8:	dc000f15 	stw	r16,60(sp)
    55ac:	2821883a 	mov	r16,r5
    55b0:	2940038f 	ldh	r5,14(r5)
    55b4:	dc401015 	stw	r17,64(sp)
    55b8:	dfc01315 	stw	ra,76(sp)
    55bc:	dcc01215 	stw	r19,72(sp)
    55c0:	dc801115 	stw	r18,68(sp)
    55c4:	2023883a 	mov	r17,r4
    55c8:	28001b16 	blt	r5,zero,5638 <__smakebuf_r+0xa0>
    55cc:	d80d883a 	mov	r6,sp
    55d0:	00094c80 	call	94c8 <_fstat_r>
    55d4:	10001716 	blt	r2,zero,5634 <__smakebuf_r+0x9c>
    55d8:	d8800117 	ldw	r2,4(sp)
    55dc:	00e00014 	movui	r3,32768
    55e0:	10bc000c 	andi	r2,r2,61440
    55e4:	10c03726 	beq	r2,r3,56c4 <__smakebuf_r+0x12c>
    55e8:	80c0030b 	ldhu	r3,12(r16)
    55ec:	18c20014 	ori	r3,r3,2048
    55f0:	80c0030d 	sth	r3,12(r16)
    55f4:	00c80004 	movi	r3,8192
    55f8:	10c03c1e 	bne	r2,r3,56ec <__smakebuf_r+0x154>
    55fc:	8140038f 	ldh	r5,14(r16)
    5600:	8809883a 	mov	r4,r17
    5604:	00095200 	call	9520 <_isatty_r>
    5608:	10004e26 	beq	r2,zero,5744 <__smakebuf_r+0x1ac>
    560c:	8080030b 	ldhu	r2,12(r16)
    5610:	04c00044 	movi	r19,1
    5614:	80c010c4 	addi	r3,r16,67
    5618:	14c4b03a 	or	r2,r2,r19
    561c:	8080030d 	sth	r2,12(r16)
    5620:	80c00015 	stw	r3,0(r16)
    5624:	80c00415 	stw	r3,16(r16)
    5628:	84c00515 	stw	r19,20(r16)
    562c:	04810004 	movi	r18,1024
    5630:	00000706 	br	5650 <__smakebuf_r+0xb8>
    5634:	8080030b 	ldhu	r2,12(r16)
    5638:	10c0200c 	andi	r3,r2,128
    563c:	18001f1e 	bne	r3,zero,56bc <__smakebuf_r+0x124>
    5640:	04810004 	movi	r18,1024
    5644:	10820014 	ori	r2,r2,2048
    5648:	8080030d 	sth	r2,12(r16)
    564c:	0027883a 	mov	r19,zero
    5650:	8809883a 	mov	r4,r17
    5654:	900b883a 	mov	r5,r18
    5658:	00057500 	call	5750 <_malloc_r>
    565c:	10002e26 	beq	r2,zero,5718 <__smakebuf_r+0x180>
    5660:	80c0030b 	ldhu	r3,12(r16)
    5664:	01000034 	movhi	r4,0
    5668:	2111b304 	addi	r4,r4,18124
    566c:	89000f15 	stw	r4,60(r17)
    5670:	18c02014 	ori	r3,r3,128
    5674:	80c0030d 	sth	r3,12(r16)
    5678:	80800015 	stw	r2,0(r16)
    567c:	80800415 	stw	r2,16(r16)
    5680:	84800515 	stw	r18,20(r16)
    5684:	98001c1e 	bne	r19,zero,56f8 <__smakebuf_r+0x160>
    5688:	dfc01317 	ldw	ra,76(sp)
    568c:	dcc01217 	ldw	r19,72(sp)
    5690:	dc801117 	ldw	r18,68(sp)
    5694:	dc401017 	ldw	r17,64(sp)
    5698:	dc000f17 	ldw	r16,60(sp)
    569c:	dec01404 	addi	sp,sp,80
    56a0:	f800283a 	ret
    56a4:	288010c4 	addi	r2,r5,67
    56a8:	28800015 	stw	r2,0(r5)
    56ac:	28800415 	stw	r2,16(r5)
    56b0:	00800044 	movi	r2,1
    56b4:	28800515 	stw	r2,20(r5)
    56b8:	f800283a 	ret
    56bc:	04801004 	movi	r18,64
    56c0:	003fe006 	br	5644 <__alt_mem_onchip_memory2_0+0xfbfe5644>
    56c4:	81000a17 	ldw	r4,40(r16)
    56c8:	00c00034 	movhi	r3,0
    56cc:	18de5404 	addi	r3,r3,31056
    56d0:	20ffc51e 	bne	r4,r3,55e8 <__alt_mem_onchip_memory2_0+0xfbfe55e8>
    56d4:	80c0030b 	ldhu	r3,12(r16)
    56d8:	01010004 	movi	r4,1024
    56dc:	81001315 	stw	r4,76(r16)
    56e0:	1906b03a 	or	r3,r3,r4
    56e4:	80c0030d 	sth	r3,12(r16)
    56e8:	003fc206 	br	55f4 <__alt_mem_onchip_memory2_0+0xfbfe55f4>
    56ec:	0027883a 	mov	r19,zero
    56f0:	04810004 	movi	r18,1024
    56f4:	003fd606 	br	5650 <__alt_mem_onchip_memory2_0+0xfbfe5650>
    56f8:	8140038f 	ldh	r5,14(r16)
    56fc:	8809883a 	mov	r4,r17
    5700:	00095200 	call	9520 <_isatty_r>
    5704:	103fe026 	beq	r2,zero,5688 <__alt_mem_onchip_memory2_0+0xfbfe5688>
    5708:	8080030b 	ldhu	r2,12(r16)
    570c:	10800054 	ori	r2,r2,1
    5710:	8080030d 	sth	r2,12(r16)
    5714:	003fdc06 	br	5688 <__alt_mem_onchip_memory2_0+0xfbfe5688>
    5718:	8080030b 	ldhu	r2,12(r16)
    571c:	10c0800c 	andi	r3,r2,512
    5720:	183fd91e 	bne	r3,zero,5688 <__alt_mem_onchip_memory2_0+0xfbfe5688>
    5724:	10800094 	ori	r2,r2,2
    5728:	80c010c4 	addi	r3,r16,67
    572c:	8080030d 	sth	r2,12(r16)
    5730:	00800044 	movi	r2,1
    5734:	80c00015 	stw	r3,0(r16)
    5738:	80c00415 	stw	r3,16(r16)
    573c:	80800515 	stw	r2,20(r16)
    5740:	003fd106 	br	5688 <__alt_mem_onchip_memory2_0+0xfbfe5688>
    5744:	04c00044 	movi	r19,1
    5748:	04810004 	movi	r18,1024
    574c:	003fc006 	br	5650 <__alt_mem_onchip_memory2_0+0xfbfe5650>

00005750 <_malloc_r>:
    5750:	defff504 	addi	sp,sp,-44
    5754:	dc800315 	stw	r18,12(sp)
    5758:	dfc00a15 	stw	ra,40(sp)
    575c:	df000915 	stw	fp,36(sp)
    5760:	ddc00815 	stw	r23,32(sp)
    5764:	dd800715 	stw	r22,28(sp)
    5768:	dd400615 	stw	r21,24(sp)
    576c:	dd000515 	stw	r20,20(sp)
    5770:	dcc00415 	stw	r19,16(sp)
    5774:	dc400215 	stw	r17,8(sp)
    5778:	dc000115 	stw	r16,4(sp)
    577c:	288002c4 	addi	r2,r5,11
    5780:	00c00584 	movi	r3,22
    5784:	2025883a 	mov	r18,r4
    5788:	18802a2e 	bgeu	r3,r2,5834 <_malloc_r+0xe4>
    578c:	047ffe04 	movi	r17,-8
    5790:	1462703a 	and	r17,r2,r17
    5794:	88009e16 	blt	r17,zero,5a10 <_malloc_r+0x2c0>
    5798:	89409d36 	bltu	r17,r5,5a10 <_malloc_r+0x2c0>
    579c:	000d0500 	call	d050 <__malloc_lock>
    57a0:	00807dc4 	movi	r2,503
    57a4:	14402736 	bltu	r2,r17,5844 <_malloc_r+0xf4>
    57a8:	8806d0fa 	srli	r3,r17,3
    57ac:	04c00074 	movhi	r19,1
    57b0:	9cc1c504 	addi	r19,r19,1812
    57b4:	18c5883a 	add	r2,r3,r3
    57b8:	1085883a 	add	r2,r2,r2
    57bc:	1085883a 	add	r2,r2,r2
    57c0:	9885883a 	add	r2,r19,r2
    57c4:	14000317 	ldw	r16,12(r2)
    57c8:	80814a26 	beq	r16,r2,5cf4 <_malloc_r+0x5a4>
    57cc:	80c00117 	ldw	r3,4(r16)
    57d0:	81000317 	ldw	r4,12(r16)
    57d4:	00bfff04 	movi	r2,-4
    57d8:	1884703a 	and	r2,r3,r2
    57dc:	81400217 	ldw	r5,8(r16)
    57e0:	8085883a 	add	r2,r16,r2
    57e4:	10c00117 	ldw	r3,4(r2)
    57e8:	29000315 	stw	r4,12(r5)
    57ec:	21400215 	stw	r5,8(r4)
    57f0:	18c00054 	ori	r3,r3,1
    57f4:	10c00115 	stw	r3,4(r2)
    57f8:	9009883a 	mov	r4,r18
    57fc:	000d0700 	call	d070 <__malloc_unlock>
    5800:	80800204 	addi	r2,r16,8
    5804:	dfc00a17 	ldw	ra,40(sp)
    5808:	df000917 	ldw	fp,36(sp)
    580c:	ddc00817 	ldw	r23,32(sp)
    5810:	dd800717 	ldw	r22,28(sp)
    5814:	dd400617 	ldw	r21,24(sp)
    5818:	dd000517 	ldw	r20,20(sp)
    581c:	dcc00417 	ldw	r19,16(sp)
    5820:	dc800317 	ldw	r18,12(sp)
    5824:	dc400217 	ldw	r17,8(sp)
    5828:	dc000117 	ldw	r16,4(sp)
    582c:	dec00b04 	addi	sp,sp,44
    5830:	f800283a 	ret
    5834:	04400404 	movi	r17,16
    5838:	89407536 	bltu	r17,r5,5a10 <_malloc_r+0x2c0>
    583c:	000d0500 	call	d050 <__malloc_lock>
    5840:	003fd906 	br	57a8 <__alt_mem_onchip_memory2_0+0xfbfe57a8>
    5844:	8806d27a 	srli	r3,r17,9
    5848:	18007526 	beq	r3,zero,5a20 <_malloc_r+0x2d0>
    584c:	00800104 	movi	r2,4
    5850:	10c0ef36 	bltu	r2,r3,5c10 <_malloc_r+0x4c0>
    5854:	8806d1ba 	srli	r3,r17,6
    5858:	19c00e04 	addi	r7,r3,56
    585c:	39cb883a 	add	r5,r7,r7
    5860:	04c00074 	movhi	r19,1
    5864:	294b883a 	add	r5,r5,r5
    5868:	9cc1c504 	addi	r19,r19,1812
    586c:	294b883a 	add	r5,r5,r5
    5870:	994b883a 	add	r5,r19,r5
    5874:	2c000317 	ldw	r16,12(r5)
    5878:	2c000e26 	beq	r5,r16,58b4 <_malloc_r+0x164>
    587c:	80800117 	ldw	r2,4(r16)
    5880:	01bfff04 	movi	r6,-4
    5884:	010003c4 	movi	r4,15
    5888:	1184703a 	and	r2,r2,r6
    588c:	1447c83a 	sub	r3,r2,r17
    5890:	20c00716 	blt	r4,r3,58b0 <_malloc_r+0x160>
    5894:	1800650e 	bge	r3,zero,5a2c <_malloc_r+0x2dc>
    5898:	84000317 	ldw	r16,12(r16)
    589c:	2c000526 	beq	r5,r16,58b4 <_malloc_r+0x164>
    58a0:	80800117 	ldw	r2,4(r16)
    58a4:	1184703a 	and	r2,r2,r6
    58a8:	1447c83a 	sub	r3,r2,r17
    58ac:	20fff90e 	bge	r4,r3,5894 <__alt_mem_onchip_memory2_0+0xfbfe5894>
    58b0:	39ffffc4 	addi	r7,r7,-1
    58b4:	38c00044 	addi	r3,r7,1
    58b8:	01800074 	movhi	r6,1
    58bc:	9c000417 	ldw	r16,16(r19)
    58c0:	3181c504 	addi	r6,r6,1812
    58c4:	32400204 	addi	r9,r6,8
    58c8:	82410326 	beq	r16,r9,5cd8 <_malloc_r+0x588>
    58cc:	81000117 	ldw	r4,4(r16)
    58d0:	00bfff04 	movi	r2,-4
    58d4:	208e703a 	and	r7,r4,r2
    58d8:	3c45c83a 	sub	r2,r7,r17
    58dc:	010003c4 	movi	r4,15
    58e0:	2080ee16 	blt	r4,r2,5c9c <_malloc_r+0x54c>
    58e4:	32400515 	stw	r9,20(r6)
    58e8:	32400415 	stw	r9,16(r6)
    58ec:	1000510e 	bge	r2,zero,5a34 <_malloc_r+0x2e4>
    58f0:	00807fc4 	movi	r2,511
    58f4:	11c0ce36 	bltu	r2,r7,5c30 <_malloc_r+0x4e0>
    58f8:	3808d0fa 	srli	r4,r7,3
    58fc:	01c00044 	movi	r7,1
    5900:	30800117 	ldw	r2,4(r6)
    5904:	210b883a 	add	r5,r4,r4
    5908:	294b883a 	add	r5,r5,r5
    590c:	2009d0ba 	srai	r4,r4,2
    5910:	294b883a 	add	r5,r5,r5
    5914:	298b883a 	add	r5,r5,r6
    5918:	2a000217 	ldw	r8,8(r5)
    591c:	3908983a 	sll	r4,r7,r4
    5920:	81400315 	stw	r5,12(r16)
    5924:	82000215 	stw	r8,8(r16)
    5928:	2088b03a 	or	r4,r4,r2
    592c:	2c000215 	stw	r16,8(r5)
    5930:	31000115 	stw	r4,4(r6)
    5934:	44000315 	stw	r16,12(r8)
    5938:	1805d0ba 	srai	r2,r3,2
    593c:	01400044 	movi	r5,1
    5940:	288a983a 	sll	r5,r5,r2
    5944:	21404336 	bltu	r4,r5,5a54 <_malloc_r+0x304>
    5948:	2144703a 	and	r2,r4,r5
    594c:	10000a1e 	bne	r2,zero,5978 <_malloc_r+0x228>
    5950:	00bfff04 	movi	r2,-4
    5954:	294b883a 	add	r5,r5,r5
    5958:	1886703a 	and	r3,r3,r2
    595c:	2144703a 	and	r2,r4,r5
    5960:	18c00104 	addi	r3,r3,4
    5964:	1000041e 	bne	r2,zero,5978 <_malloc_r+0x228>
    5968:	294b883a 	add	r5,r5,r5
    596c:	2144703a 	and	r2,r4,r5
    5970:	18c00104 	addi	r3,r3,4
    5974:	103ffc26 	beq	r2,zero,5968 <__alt_mem_onchip_memory2_0+0xfbfe5968>
    5978:	023fff04 	movi	r8,-4
    597c:	01c003c4 	movi	r7,15
    5980:	18c5883a 	add	r2,r3,r3
    5984:	1085883a 	add	r2,r2,r2
    5988:	1085883a 	add	r2,r2,r2
    598c:	9895883a 	add	r10,r19,r2
    5990:	52c00304 	addi	r11,r10,12
    5994:	1819883a 	mov	r12,r3
    5998:	5c000017 	ldw	r16,0(r11)
    599c:	59bffd04 	addi	r6,r11,-12
    59a0:	8180041e 	bne	r16,r6,59b4 <_malloc_r+0x264>
    59a4:	0000ce06 	br	5ce0 <_malloc_r+0x590>
    59a8:	2000d70e 	bge	r4,zero,5d08 <_malloc_r+0x5b8>
    59ac:	84000317 	ldw	r16,12(r16)
    59b0:	8180cb26 	beq	r16,r6,5ce0 <_malloc_r+0x590>
    59b4:	80800117 	ldw	r2,4(r16)
    59b8:	1204703a 	and	r2,r2,r8
    59bc:	1449c83a 	sub	r4,r2,r17
    59c0:	393ff90e 	bge	r7,r4,59a8 <__alt_mem_onchip_memory2_0+0xfbfe59a8>
    59c4:	80800317 	ldw	r2,12(r16)
    59c8:	80c00217 	ldw	r3,8(r16)
    59cc:	89400054 	ori	r5,r17,1
    59d0:	81400115 	stw	r5,4(r16)
    59d4:	18800315 	stw	r2,12(r3)
    59d8:	10c00215 	stw	r3,8(r2)
    59dc:	8463883a 	add	r17,r16,r17
    59e0:	9c400515 	stw	r17,20(r19)
    59e4:	9c400415 	stw	r17,16(r19)
    59e8:	20800054 	ori	r2,r4,1
    59ec:	88800115 	stw	r2,4(r17)
    59f0:	8a400315 	stw	r9,12(r17)
    59f4:	8a400215 	stw	r9,8(r17)
    59f8:	8923883a 	add	r17,r17,r4
    59fc:	89000015 	stw	r4,0(r17)
    5a00:	9009883a 	mov	r4,r18
    5a04:	000d0700 	call	d070 <__malloc_unlock>
    5a08:	80800204 	addi	r2,r16,8
    5a0c:	003f7d06 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5a10:	00800304 	movi	r2,12
    5a14:	90800015 	stw	r2,0(r18)
    5a18:	0005883a 	mov	r2,zero
    5a1c:	003f7906 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5a20:	01401f84 	movi	r5,126
    5a24:	01c00fc4 	movi	r7,63
    5a28:	003f8d06 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5a2c:	81000317 	ldw	r4,12(r16)
    5a30:	003f6a06 	br	57dc <__alt_mem_onchip_memory2_0+0xfbfe57dc>
    5a34:	81c5883a 	add	r2,r16,r7
    5a38:	10c00117 	ldw	r3,4(r2)
    5a3c:	9009883a 	mov	r4,r18
    5a40:	18c00054 	ori	r3,r3,1
    5a44:	10c00115 	stw	r3,4(r2)
    5a48:	000d0700 	call	d070 <__malloc_unlock>
    5a4c:	80800204 	addi	r2,r16,8
    5a50:	003f6c06 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5a54:	9c000217 	ldw	r16,8(r19)
    5a58:	00bfff04 	movi	r2,-4
    5a5c:	85800117 	ldw	r22,4(r16)
    5a60:	b0ac703a 	and	r22,r22,r2
    5a64:	b4400336 	bltu	r22,r17,5a74 <_malloc_r+0x324>
    5a68:	b445c83a 	sub	r2,r22,r17
    5a6c:	00c003c4 	movi	r3,15
    5a70:	18805d16 	blt	r3,r2,5be8 <_malloc_r+0x498>
    5a74:	05c00074 	movhi	r23,1
    5a78:	00800074 	movhi	r2,1
    5a7c:	bdc75004 	addi	r23,r23,7488
    5a80:	108e2504 	addi	r2,r2,14484
    5a84:	15400017 	ldw	r21,0(r2)
    5a88:	b9000017 	ldw	r4,0(r23)
    5a8c:	00ffffc4 	movi	r3,-1
    5a90:	858d883a 	add	r6,r16,r22
    5a94:	8d6b883a 	add	r21,r17,r21
    5a98:	20c0e426 	beq	r4,r3,5e2c <_malloc_r+0x6dc>
    5a9c:	ad4403c4 	addi	r21,r21,4111
    5aa0:	00fc0004 	movi	r3,-4096
    5aa4:	a8ea703a 	and	r21,r21,r3
    5aa8:	9009883a 	mov	r4,r18
    5aac:	a80b883a 	mov	r5,r21
    5ab0:	d9800015 	stw	r6,0(sp)
    5ab4:	00078240 	call	7824 <_sbrk_r>
    5ab8:	00ffffc4 	movi	r3,-1
    5abc:	1029883a 	mov	r20,r2
    5ac0:	d9800017 	ldw	r6,0(sp)
    5ac4:	10c0a426 	beq	r2,r3,5d58 <_malloc_r+0x608>
    5ac8:	1180a236 	bltu	r2,r6,5d54 <_malloc_r+0x604>
    5acc:	07000074 	movhi	fp,1
    5ad0:	e70e2e04 	addi	fp,fp,14520
    5ad4:	e0c00017 	ldw	r3,0(fp)
    5ad8:	a8c7883a 	add	r3,r21,r3
    5adc:	e0c00015 	stw	r3,0(fp)
    5ae0:	3500da26 	beq	r6,r20,5e4c <_malloc_r+0x6fc>
    5ae4:	b9000017 	ldw	r4,0(r23)
    5ae8:	00bfffc4 	movi	r2,-1
    5aec:	2080e426 	beq	r4,r2,5e80 <_malloc_r+0x730>
    5af0:	a185c83a 	sub	r2,r20,r6
    5af4:	1885883a 	add	r2,r3,r2
    5af8:	e0800015 	stw	r2,0(fp)
    5afc:	a0c001cc 	andi	r3,r20,7
    5b00:	1800b526 	beq	r3,zero,5dd8 <_malloc_r+0x688>
    5b04:	a0e9c83a 	sub	r20,r20,r3
    5b08:	00840204 	movi	r2,4104
    5b0c:	a5000204 	addi	r20,r20,8
    5b10:	10c7c83a 	sub	r3,r2,r3
    5b14:	a545883a 	add	r2,r20,r21
    5b18:	1083ffcc 	andi	r2,r2,4095
    5b1c:	18abc83a 	sub	r21,r3,r2
    5b20:	9009883a 	mov	r4,r18
    5b24:	a80b883a 	mov	r5,r21
    5b28:	00078240 	call	7824 <_sbrk_r>
    5b2c:	00ffffc4 	movi	r3,-1
    5b30:	10c0d026 	beq	r2,r3,5e74 <_malloc_r+0x724>
    5b34:	1507c83a 	sub	r3,r2,r20
    5b38:	a8c7883a 	add	r3,r21,r3
    5b3c:	18c00054 	ori	r3,r3,1
    5b40:	e0800017 	ldw	r2,0(fp)
    5b44:	9d000215 	stw	r20,8(r19)
    5b48:	a0c00115 	stw	r3,4(r20)
    5b4c:	a887883a 	add	r3,r21,r2
    5b50:	e0c00015 	stw	r3,0(fp)
    5b54:	84c00e26 	beq	r16,r19,5b90 <_malloc_r+0x440>
    5b58:	018003c4 	movi	r6,15
    5b5c:	3580a02e 	bgeu	r6,r22,5de0 <_malloc_r+0x690>
    5b60:	81400117 	ldw	r5,4(r16)
    5b64:	013ffe04 	movi	r4,-8
    5b68:	b0bffd04 	addi	r2,r22,-12
    5b6c:	1104703a 	and	r2,r2,r4
    5b70:	2900004c 	andi	r4,r5,1
    5b74:	1108b03a 	or	r4,r2,r4
    5b78:	81000115 	stw	r4,4(r16)
    5b7c:	01400144 	movi	r5,5
    5b80:	8089883a 	add	r4,r16,r2
    5b84:	21400115 	stw	r5,4(r4)
    5b88:	21400215 	stw	r5,8(r4)
    5b8c:	3080c036 	bltu	r6,r2,5e90 <_malloc_r+0x740>
    5b90:	00800074 	movhi	r2,1
    5b94:	108e2404 	addi	r2,r2,14480
    5b98:	11000017 	ldw	r4,0(r2)
    5b9c:	20c0012e 	bgeu	r4,r3,5ba4 <_malloc_r+0x454>
    5ba0:	10c00015 	stw	r3,0(r2)
    5ba4:	00800074 	movhi	r2,1
    5ba8:	108e2304 	addi	r2,r2,14476
    5bac:	11000017 	ldw	r4,0(r2)
    5bb0:	9c000217 	ldw	r16,8(r19)
    5bb4:	20c0012e 	bgeu	r4,r3,5bbc <_malloc_r+0x46c>
    5bb8:	10c00015 	stw	r3,0(r2)
    5bbc:	80c00117 	ldw	r3,4(r16)
    5bc0:	00bfff04 	movi	r2,-4
    5bc4:	1886703a 	and	r3,r3,r2
    5bc8:	1c45c83a 	sub	r2,r3,r17
    5bcc:	1c400236 	bltu	r3,r17,5bd8 <_malloc_r+0x488>
    5bd0:	00c003c4 	movi	r3,15
    5bd4:	18800416 	blt	r3,r2,5be8 <_malloc_r+0x498>
    5bd8:	9009883a 	mov	r4,r18
    5bdc:	000d0700 	call	d070 <__malloc_unlock>
    5be0:	0005883a 	mov	r2,zero
    5be4:	003f0706 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5be8:	88c00054 	ori	r3,r17,1
    5bec:	80c00115 	stw	r3,4(r16)
    5bf0:	8463883a 	add	r17,r16,r17
    5bf4:	10800054 	ori	r2,r2,1
    5bf8:	9c400215 	stw	r17,8(r19)
    5bfc:	88800115 	stw	r2,4(r17)
    5c00:	9009883a 	mov	r4,r18
    5c04:	000d0700 	call	d070 <__malloc_unlock>
    5c08:	80800204 	addi	r2,r16,8
    5c0c:	003efd06 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5c10:	00800504 	movi	r2,20
    5c14:	10c0482e 	bgeu	r2,r3,5d38 <_malloc_r+0x5e8>
    5c18:	00801504 	movi	r2,84
    5c1c:	10c06836 	bltu	r2,r3,5dc0 <_malloc_r+0x670>
    5c20:	8806d33a 	srli	r3,r17,12
    5c24:	19c01b84 	addi	r7,r3,110
    5c28:	39cb883a 	add	r5,r7,r7
    5c2c:	003f0c06 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5c30:	3804d27a 	srli	r2,r7,9
    5c34:	01000104 	movi	r4,4
    5c38:	2080422e 	bgeu	r4,r2,5d44 <_malloc_r+0x5f4>
    5c3c:	01000504 	movi	r4,20
    5c40:	20807c36 	bltu	r4,r2,5e34 <_malloc_r+0x6e4>
    5c44:	110016c4 	addi	r4,r2,91
    5c48:	210b883a 	add	r5,r4,r4
    5c4c:	294b883a 	add	r5,r5,r5
    5c50:	294b883a 	add	r5,r5,r5
    5c54:	994b883a 	add	r5,r19,r5
    5c58:	28800217 	ldw	r2,8(r5)
    5c5c:	02000074 	movhi	r8,1
    5c60:	4201c504 	addi	r8,r8,1812
    5c64:	11406326 	beq	r2,r5,5df4 <_malloc_r+0x6a4>
    5c68:	01bfff04 	movi	r6,-4
    5c6c:	11000117 	ldw	r4,4(r2)
    5c70:	2188703a 	and	r4,r4,r6
    5c74:	3900022e 	bgeu	r7,r4,5c80 <_malloc_r+0x530>
    5c78:	10800217 	ldw	r2,8(r2)
    5c7c:	28bffb1e 	bne	r5,r2,5c6c <__alt_mem_onchip_memory2_0+0xfbfe5c6c>
    5c80:	11800317 	ldw	r6,12(r2)
    5c84:	99000117 	ldw	r4,4(r19)
    5c88:	81800315 	stw	r6,12(r16)
    5c8c:	80800215 	stw	r2,8(r16)
    5c90:	34000215 	stw	r16,8(r6)
    5c94:	14000315 	stw	r16,12(r2)
    5c98:	003f2706 	br	5938 <__alt_mem_onchip_memory2_0+0xfbfe5938>
    5c9c:	88c00054 	ori	r3,r17,1
    5ca0:	80c00115 	stw	r3,4(r16)
    5ca4:	8463883a 	add	r17,r16,r17
    5ca8:	34400515 	stw	r17,20(r6)
    5cac:	34400415 	stw	r17,16(r6)
    5cb0:	10c00054 	ori	r3,r2,1
    5cb4:	8a400315 	stw	r9,12(r17)
    5cb8:	8a400215 	stw	r9,8(r17)
    5cbc:	88c00115 	stw	r3,4(r17)
    5cc0:	88a3883a 	add	r17,r17,r2
    5cc4:	88800015 	stw	r2,0(r17)
    5cc8:	9009883a 	mov	r4,r18
    5ccc:	000d0700 	call	d070 <__malloc_unlock>
    5cd0:	80800204 	addi	r2,r16,8
    5cd4:	003ecb06 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5cd8:	31000117 	ldw	r4,4(r6)
    5cdc:	003f1606 	br	5938 <__alt_mem_onchip_memory2_0+0xfbfe5938>
    5ce0:	63000044 	addi	r12,r12,1
    5ce4:	608000cc 	andi	r2,r12,3
    5ce8:	5ac00204 	addi	r11,r11,8
    5cec:	103f2a1e 	bne	r2,zero,5998 <__alt_mem_onchip_memory2_0+0xfbfe5998>
    5cf0:	00002106 	br	5d78 <_malloc_r+0x628>
    5cf4:	80800204 	addi	r2,r16,8
    5cf8:	84000517 	ldw	r16,20(r16)
    5cfc:	143eb31e 	bne	r2,r16,57cc <__alt_mem_onchip_memory2_0+0xfbfe57cc>
    5d00:	18c00084 	addi	r3,r3,2
    5d04:	003eec06 	br	58b8 <__alt_mem_onchip_memory2_0+0xfbfe58b8>
    5d08:	8085883a 	add	r2,r16,r2
    5d0c:	10c00117 	ldw	r3,4(r2)
    5d10:	81000317 	ldw	r4,12(r16)
    5d14:	81400217 	ldw	r5,8(r16)
    5d18:	18c00054 	ori	r3,r3,1
    5d1c:	10c00115 	stw	r3,4(r2)
    5d20:	29000315 	stw	r4,12(r5)
    5d24:	21400215 	stw	r5,8(r4)
    5d28:	9009883a 	mov	r4,r18
    5d2c:	000d0700 	call	d070 <__malloc_unlock>
    5d30:	80800204 	addi	r2,r16,8
    5d34:	003eb306 	br	5804 <__alt_mem_onchip_memory2_0+0xfbfe5804>
    5d38:	19c016c4 	addi	r7,r3,91
    5d3c:	39cb883a 	add	r5,r7,r7
    5d40:	003ec706 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5d44:	3804d1ba 	srli	r2,r7,6
    5d48:	11000e04 	addi	r4,r2,56
    5d4c:	210b883a 	add	r5,r4,r4
    5d50:	003fbe06 	br	5c4c <__alt_mem_onchip_memory2_0+0xfbfe5c4c>
    5d54:	84ff5d26 	beq	r16,r19,5acc <__alt_mem_onchip_memory2_0+0xfbfe5acc>
    5d58:	9c000217 	ldw	r16,8(r19)
    5d5c:	00bfff04 	movi	r2,-4
    5d60:	80c00117 	ldw	r3,4(r16)
    5d64:	1886703a 	and	r3,r3,r2
    5d68:	003f9706 	br	5bc8 <__alt_mem_onchip_memory2_0+0xfbfe5bc8>
    5d6c:	52800017 	ldw	r10,0(r10)
    5d70:	18ffffc4 	addi	r3,r3,-1
    5d74:	50805c1e 	bne	r10,r2,5ee8 <_malloc_r+0x798>
    5d78:	190000cc 	andi	r4,r3,3
    5d7c:	50bffe04 	addi	r2,r10,-8
    5d80:	203ffa1e 	bne	r4,zero,5d6c <__alt_mem_onchip_memory2_0+0xfbfe5d6c>
    5d84:	98800117 	ldw	r2,4(r19)
    5d88:	0146303a 	nor	r3,zero,r5
    5d8c:	1884703a 	and	r2,r3,r2
    5d90:	98800115 	stw	r2,4(r19)
    5d94:	294b883a 	add	r5,r5,r5
    5d98:	117f2e36 	bltu	r2,r5,5a54 <__alt_mem_onchip_memory2_0+0xfbfe5a54>
    5d9c:	283f2d26 	beq	r5,zero,5a54 <__alt_mem_onchip_memory2_0+0xfbfe5a54>
    5da0:	1146703a 	and	r3,r2,r5
    5da4:	1800521e 	bne	r3,zero,5ef0 <_malloc_r+0x7a0>
    5da8:	6007883a 	mov	r3,r12
    5dac:	294b883a 	add	r5,r5,r5
    5db0:	1148703a 	and	r4,r2,r5
    5db4:	18c00104 	addi	r3,r3,4
    5db8:	203ffc26 	beq	r4,zero,5dac <__alt_mem_onchip_memory2_0+0xfbfe5dac>
    5dbc:	003ef006 	br	5980 <__alt_mem_onchip_memory2_0+0xfbfe5980>
    5dc0:	00805504 	movi	r2,340
    5dc4:	10c01336 	bltu	r2,r3,5e14 <_malloc_r+0x6c4>
    5dc8:	8806d3fa 	srli	r3,r17,15
    5dcc:	19c01dc4 	addi	r7,r3,119
    5dd0:	39cb883a 	add	r5,r7,r7
    5dd4:	003ea206 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5dd8:	00c40004 	movi	r3,4096
    5ddc:	003f4d06 	br	5b14 <__alt_mem_onchip_memory2_0+0xfbfe5b14>
    5de0:	00800044 	movi	r2,1
    5de4:	a0800115 	stw	r2,4(r20)
    5de8:	a021883a 	mov	r16,r20
    5dec:	0007883a 	mov	r3,zero
    5df0:	003f7506 	br	5bc8 <__alt_mem_onchip_memory2_0+0xfbfe5bc8>
    5df4:	200bd0ba 	srai	r5,r4,2
    5df8:	01800044 	movi	r6,1
    5dfc:	41000117 	ldw	r4,4(r8)
    5e00:	314a983a 	sll	r5,r6,r5
    5e04:	100d883a 	mov	r6,r2
    5e08:	2908b03a 	or	r4,r5,r4
    5e0c:	41000115 	stw	r4,4(r8)
    5e10:	003f9d06 	br	5c88 <__alt_mem_onchip_memory2_0+0xfbfe5c88>
    5e14:	00815504 	movi	r2,1364
    5e18:	10c01336 	bltu	r2,r3,5e68 <_malloc_r+0x718>
    5e1c:	8806d4ba 	srli	r3,r17,18
    5e20:	19c01f04 	addi	r7,r3,124
    5e24:	39cb883a 	add	r5,r7,r7
    5e28:	003e8d06 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5e2c:	ad400404 	addi	r21,r21,16
    5e30:	003f1d06 	br	5aa8 <__alt_mem_onchip_memory2_0+0xfbfe5aa8>
    5e34:	01001504 	movi	r4,84
    5e38:	20801c36 	bltu	r4,r2,5eac <_malloc_r+0x75c>
    5e3c:	3804d33a 	srli	r2,r7,12
    5e40:	11001b84 	addi	r4,r2,110
    5e44:	210b883a 	add	r5,r4,r4
    5e48:	003f8006 	br	5c4c <__alt_mem_onchip_memory2_0+0xfbfe5c4c>
    5e4c:	3083ffcc 	andi	r2,r6,4095
    5e50:	103f241e 	bne	r2,zero,5ae4 <__alt_mem_onchip_memory2_0+0xfbfe5ae4>
    5e54:	99000217 	ldw	r4,8(r19)
    5e58:	ad85883a 	add	r2,r21,r22
    5e5c:	10800054 	ori	r2,r2,1
    5e60:	20800115 	stw	r2,4(r4)
    5e64:	003f4a06 	br	5b90 <__alt_mem_onchip_memory2_0+0xfbfe5b90>
    5e68:	01403f04 	movi	r5,252
    5e6c:	01c01f84 	movi	r7,126
    5e70:	003e7b06 	br	5860 <__alt_mem_onchip_memory2_0+0xfbfe5860>
    5e74:	00c00044 	movi	r3,1
    5e78:	002b883a 	mov	r21,zero
    5e7c:	003f3006 	br	5b40 <__alt_mem_onchip_memory2_0+0xfbfe5b40>
    5e80:	00800074 	movhi	r2,1
    5e84:	10875004 	addi	r2,r2,7488
    5e88:	15000015 	stw	r20,0(r2)
    5e8c:	003f1b06 	br	5afc <__alt_mem_onchip_memory2_0+0xfbfe5afc>
    5e90:	9009883a 	mov	r4,r18
    5e94:	81400204 	addi	r5,r16,8
    5e98:	0004b800 	call	4b80 <_free_r>
    5e9c:	00800074 	movhi	r2,1
    5ea0:	108e2e04 	addi	r2,r2,14520
    5ea4:	10c00017 	ldw	r3,0(r2)
    5ea8:	003f3906 	br	5b90 <__alt_mem_onchip_memory2_0+0xfbfe5b90>
    5eac:	01005504 	movi	r4,340
    5eb0:	20800436 	bltu	r4,r2,5ec4 <_malloc_r+0x774>
    5eb4:	3804d3fa 	srli	r2,r7,15
    5eb8:	11001dc4 	addi	r4,r2,119
    5ebc:	210b883a 	add	r5,r4,r4
    5ec0:	003f6206 	br	5c4c <__alt_mem_onchip_memory2_0+0xfbfe5c4c>
    5ec4:	01015504 	movi	r4,1364
    5ec8:	20800436 	bltu	r4,r2,5edc <_malloc_r+0x78c>
    5ecc:	3804d4ba 	srli	r2,r7,18
    5ed0:	11001f04 	addi	r4,r2,124
    5ed4:	210b883a 	add	r5,r4,r4
    5ed8:	003f5c06 	br	5c4c <__alt_mem_onchip_memory2_0+0xfbfe5c4c>
    5edc:	01403f04 	movi	r5,252
    5ee0:	01001f84 	movi	r4,126
    5ee4:	003f5906 	br	5c4c <__alt_mem_onchip_memory2_0+0xfbfe5c4c>
    5ee8:	98800117 	ldw	r2,4(r19)
    5eec:	003fa906 	br	5d94 <__alt_mem_onchip_memory2_0+0xfbfe5d94>
    5ef0:	6007883a 	mov	r3,r12
    5ef4:	003ea206 	br	5980 <__alt_mem_onchip_memory2_0+0xfbfe5980>

00005ef8 <memchr>:
    5ef8:	208000cc 	andi	r2,r4,3
    5efc:	280f883a 	mov	r7,r5
    5f00:	10003526 	beq	r2,zero,5fd8 <memchr+0xe0>
    5f04:	30bfffc4 	addi	r2,r6,-1
    5f08:	30001b26 	beq	r6,zero,5f78 <memchr+0x80>
    5f0c:	21800003 	ldbu	r6,0(r4)
    5f10:	28c03fcc 	andi	r3,r5,255
    5f14:	30c01a26 	beq	r6,r3,5f80 <memchr+0x88>
    5f18:	180d883a 	mov	r6,r3
    5f1c:	00000406 	br	5f30 <memchr+0x38>
    5f20:	10001526 	beq	r2,zero,5f78 <memchr+0x80>
    5f24:	20c00003 	ldbu	r3,0(r4)
    5f28:	10bfffc4 	addi	r2,r2,-1
    5f2c:	19801426 	beq	r3,r6,5f80 <memchr+0x88>
    5f30:	21000044 	addi	r4,r4,1
    5f34:	20c000cc 	andi	r3,r4,3
    5f38:	183ff91e 	bne	r3,zero,5f20 <__alt_mem_onchip_memory2_0+0xfbfe5f20>
    5f3c:	024000c4 	movi	r9,3
    5f40:	48801136 	bltu	r9,r2,5f88 <memchr+0x90>
    5f44:	10000c26 	beq	r2,zero,5f78 <memchr+0x80>
    5f48:	20c00003 	ldbu	r3,0(r4)
    5f4c:	29403fcc 	andi	r5,r5,255
    5f50:	19400b26 	beq	r3,r5,5f80 <memchr+0x88>
    5f54:	20c00044 	addi	r3,r4,1
    5f58:	2085883a 	add	r2,r4,r2
    5f5c:	39803fcc 	andi	r6,r7,255
    5f60:	00000306 	br	5f70 <memchr+0x78>
    5f64:	18c00044 	addi	r3,r3,1
    5f68:	197fffc3 	ldbu	r5,-1(r3)
    5f6c:	29800426 	beq	r5,r6,5f80 <memchr+0x88>
    5f70:	1809883a 	mov	r4,r3
    5f74:	18bffb1e 	bne	r3,r2,5f64 <__alt_mem_onchip_memory2_0+0xfbfe5f64>
    5f78:	0005883a 	mov	r2,zero
    5f7c:	f800283a 	ret
    5f80:	2005883a 	mov	r2,r4
    5f84:	f800283a 	ret
    5f88:	28c03fcc 	andi	r3,r5,255
    5f8c:	1810923a 	slli	r8,r3,8
    5f90:	02ffbff4 	movhi	r11,65279
    5f94:	02a02074 	movhi	r10,32897
    5f98:	40c6b03a 	or	r3,r8,r3
    5f9c:	1810943a 	slli	r8,r3,16
    5fa0:	5affbfc4 	addi	r11,r11,-257
    5fa4:	52a02004 	addi	r10,r10,-32640
    5fa8:	40d0b03a 	or	r8,r8,r3
    5fac:	20c00017 	ldw	r3,0(r4)
    5fb0:	40c6f03a 	xor	r3,r8,r3
    5fb4:	1acd883a 	add	r6,r3,r11
    5fb8:	00c6303a 	nor	r3,zero,r3
    5fbc:	30c6703a 	and	r3,r6,r3
    5fc0:	1a86703a 	and	r3,r3,r10
    5fc4:	183fdf1e 	bne	r3,zero,5f44 <__alt_mem_onchip_memory2_0+0xfbfe5f44>
    5fc8:	10bfff04 	addi	r2,r2,-4
    5fcc:	21000104 	addi	r4,r4,4
    5fd0:	48bff636 	bltu	r9,r2,5fac <__alt_mem_onchip_memory2_0+0xfbfe5fac>
    5fd4:	003fdb06 	br	5f44 <__alt_mem_onchip_memory2_0+0xfbfe5f44>
    5fd8:	3005883a 	mov	r2,r6
    5fdc:	003fd706 	br	5f3c <__alt_mem_onchip_memory2_0+0xfbfe5f3c>

00005fe0 <memmove>:
    5fe0:	2005883a 	mov	r2,r4
    5fe4:	29000b2e 	bgeu	r5,r4,6014 <memmove+0x34>
    5fe8:	298f883a 	add	r7,r5,r6
    5fec:	21c0092e 	bgeu	r4,r7,6014 <memmove+0x34>
    5ff0:	2187883a 	add	r3,r4,r6
    5ff4:	198bc83a 	sub	r5,r3,r6
    5ff8:	30004b26 	beq	r6,zero,6128 <memmove+0x148>
    5ffc:	39ffffc4 	addi	r7,r7,-1
    6000:	39000003 	ldbu	r4,0(r7)
    6004:	18ffffc4 	addi	r3,r3,-1
    6008:	19000005 	stb	r4,0(r3)
    600c:	197ffb1e 	bne	r3,r5,5ffc <__alt_mem_onchip_memory2_0+0xfbfe5ffc>
    6010:	f800283a 	ret
    6014:	00c003c4 	movi	r3,15
    6018:	1980412e 	bgeu	r3,r6,6120 <memmove+0x140>
    601c:	1146b03a 	or	r3,r2,r5
    6020:	18c000cc 	andi	r3,r3,3
    6024:	1800411e 	bne	r3,zero,612c <memmove+0x14c>
    6028:	33fffc04 	addi	r15,r6,-16
    602c:	781ed13a 	srli	r15,r15,4
    6030:	28c00104 	addi	r3,r5,4
    6034:	13400104 	addi	r13,r2,4
    6038:	781c913a 	slli	r14,r15,4
    603c:	2b000204 	addi	r12,r5,8
    6040:	12c00204 	addi	r11,r2,8
    6044:	73800504 	addi	r14,r14,20
    6048:	2a800304 	addi	r10,r5,12
    604c:	12400304 	addi	r9,r2,12
    6050:	2b9d883a 	add	r14,r5,r14
    6054:	2811883a 	mov	r8,r5
    6058:	100f883a 	mov	r7,r2
    605c:	41000017 	ldw	r4,0(r8)
    6060:	39c00404 	addi	r7,r7,16
    6064:	18c00404 	addi	r3,r3,16
    6068:	393ffc15 	stw	r4,-16(r7)
    606c:	193ffc17 	ldw	r4,-16(r3)
    6070:	6b400404 	addi	r13,r13,16
    6074:	5ac00404 	addi	r11,r11,16
    6078:	693ffc15 	stw	r4,-16(r13)
    607c:	61000017 	ldw	r4,0(r12)
    6080:	4a400404 	addi	r9,r9,16
    6084:	42000404 	addi	r8,r8,16
    6088:	593ffc15 	stw	r4,-16(r11)
    608c:	51000017 	ldw	r4,0(r10)
    6090:	63000404 	addi	r12,r12,16
    6094:	52800404 	addi	r10,r10,16
    6098:	493ffc15 	stw	r4,-16(r9)
    609c:	1bbfef1e 	bne	r3,r14,605c <__alt_mem_onchip_memory2_0+0xfbfe605c>
    60a0:	79000044 	addi	r4,r15,1
    60a4:	2008913a 	slli	r4,r4,4
    60a8:	328003cc 	andi	r10,r6,15
    60ac:	02c000c4 	movi	r11,3
    60b0:	1107883a 	add	r3,r2,r4
    60b4:	290b883a 	add	r5,r5,r4
    60b8:	5a801e2e 	bgeu	r11,r10,6134 <memmove+0x154>
    60bc:	1813883a 	mov	r9,r3
    60c0:	2811883a 	mov	r8,r5
    60c4:	500f883a 	mov	r7,r10
    60c8:	41000017 	ldw	r4,0(r8)
    60cc:	4a400104 	addi	r9,r9,4
    60d0:	39ffff04 	addi	r7,r7,-4
    60d4:	493fff15 	stw	r4,-4(r9)
    60d8:	42000104 	addi	r8,r8,4
    60dc:	59fffa36 	bltu	r11,r7,60c8 <__alt_mem_onchip_memory2_0+0xfbfe60c8>
    60e0:	513fff04 	addi	r4,r10,-4
    60e4:	2008d0ba 	srli	r4,r4,2
    60e8:	318000cc 	andi	r6,r6,3
    60ec:	21000044 	addi	r4,r4,1
    60f0:	2109883a 	add	r4,r4,r4
    60f4:	2109883a 	add	r4,r4,r4
    60f8:	1907883a 	add	r3,r3,r4
    60fc:	290b883a 	add	r5,r5,r4
    6100:	30000926 	beq	r6,zero,6128 <memmove+0x148>
    6104:	198d883a 	add	r6,r3,r6
    6108:	29c00003 	ldbu	r7,0(r5)
    610c:	18c00044 	addi	r3,r3,1
    6110:	29400044 	addi	r5,r5,1
    6114:	19ffffc5 	stb	r7,-1(r3)
    6118:	19bffb1e 	bne	r3,r6,6108 <__alt_mem_onchip_memory2_0+0xfbfe6108>
    611c:	f800283a 	ret
    6120:	1007883a 	mov	r3,r2
    6124:	003ff606 	br	6100 <__alt_mem_onchip_memory2_0+0xfbfe6100>
    6128:	f800283a 	ret
    612c:	1007883a 	mov	r3,r2
    6130:	003ff406 	br	6104 <__alt_mem_onchip_memory2_0+0xfbfe6104>
    6134:	500d883a 	mov	r6,r10
    6138:	003ff106 	br	6100 <__alt_mem_onchip_memory2_0+0xfbfe6100>

0000613c <_Balloc>:
    613c:	20801317 	ldw	r2,76(r4)
    6140:	defffc04 	addi	sp,sp,-16
    6144:	dc400115 	stw	r17,4(sp)
    6148:	dc000015 	stw	r16,0(sp)
    614c:	dfc00315 	stw	ra,12(sp)
    6150:	dc800215 	stw	r18,8(sp)
    6154:	2023883a 	mov	r17,r4
    6158:	2821883a 	mov	r16,r5
    615c:	10000f26 	beq	r2,zero,619c <_Balloc+0x60>
    6160:	8407883a 	add	r3,r16,r16
    6164:	18c7883a 	add	r3,r3,r3
    6168:	10c7883a 	add	r3,r2,r3
    616c:	18800017 	ldw	r2,0(r3)
    6170:	10001126 	beq	r2,zero,61b8 <_Balloc+0x7c>
    6174:	11000017 	ldw	r4,0(r2)
    6178:	19000015 	stw	r4,0(r3)
    617c:	10000415 	stw	zero,16(r2)
    6180:	10000315 	stw	zero,12(r2)
    6184:	dfc00317 	ldw	ra,12(sp)
    6188:	dc800217 	ldw	r18,8(sp)
    618c:	dc400117 	ldw	r17,4(sp)
    6190:	dc000017 	ldw	r16,0(sp)
    6194:	dec00404 	addi	sp,sp,16
    6198:	f800283a 	ret
    619c:	01400104 	movi	r5,4
    61a0:	01800844 	movi	r6,33
    61a4:	00091200 	call	9120 <_calloc_r>
    61a8:	88801315 	stw	r2,76(r17)
    61ac:	103fec1e 	bne	r2,zero,6160 <__alt_mem_onchip_memory2_0+0xfbfe6160>
    61b0:	0005883a 	mov	r2,zero
    61b4:	003ff306 	br	6184 <__alt_mem_onchip_memory2_0+0xfbfe6184>
    61b8:	01400044 	movi	r5,1
    61bc:	2c24983a 	sll	r18,r5,r16
    61c0:	8809883a 	mov	r4,r17
    61c4:	91800144 	addi	r6,r18,5
    61c8:	318d883a 	add	r6,r6,r6
    61cc:	318d883a 	add	r6,r6,r6
    61d0:	00091200 	call	9120 <_calloc_r>
    61d4:	103ff626 	beq	r2,zero,61b0 <__alt_mem_onchip_memory2_0+0xfbfe61b0>
    61d8:	14000115 	stw	r16,4(r2)
    61dc:	14800215 	stw	r18,8(r2)
    61e0:	003fe606 	br	617c <__alt_mem_onchip_memory2_0+0xfbfe617c>

000061e4 <_Bfree>:
    61e4:	28000826 	beq	r5,zero,6208 <_Bfree+0x24>
    61e8:	28c00117 	ldw	r3,4(r5)
    61ec:	20801317 	ldw	r2,76(r4)
    61f0:	18c7883a 	add	r3,r3,r3
    61f4:	18c7883a 	add	r3,r3,r3
    61f8:	10c5883a 	add	r2,r2,r3
    61fc:	10c00017 	ldw	r3,0(r2)
    6200:	28c00015 	stw	r3,0(r5)
    6204:	11400015 	stw	r5,0(r2)
    6208:	f800283a 	ret

0000620c <__multadd>:
    620c:	defffa04 	addi	sp,sp,-24
    6210:	dc000115 	stw	r16,4(sp)
    6214:	2c000417 	ldw	r16,16(r5)
    6218:	dc800315 	stw	r18,12(sp)
    621c:	dc400215 	stw	r17,8(sp)
    6220:	dfc00515 	stw	ra,20(sp)
    6224:	dcc00415 	stw	r19,16(sp)
    6228:	2823883a 	mov	r17,r5
    622c:	2025883a 	mov	r18,r4
    6230:	2a400504 	addi	r9,r5,20
    6234:	0015883a 	mov	r10,zero
    6238:	4a000017 	ldw	r8,0(r9)
    623c:	4a400104 	addi	r9,r9,4
    6240:	52800044 	addi	r10,r10,1
    6244:	40ffffcc 	andi	r3,r8,65535
    6248:	1987383a 	mul	r3,r3,r6
    624c:	4010d43a 	srli	r8,r8,16
    6250:	19cf883a 	add	r7,r3,r7
    6254:	4191383a 	mul	r8,r8,r6
    6258:	3816d43a 	srli	r11,r7,16
    625c:	38ffffcc 	andi	r3,r7,65535
    6260:	5a0f883a 	add	r7,r11,r8
    6264:	3810943a 	slli	r8,r7,16
    6268:	380ed43a 	srli	r7,r7,16
    626c:	40c7883a 	add	r3,r8,r3
    6270:	48ffff15 	stw	r3,-4(r9)
    6274:	543ff016 	blt	r10,r16,6238 <__alt_mem_onchip_memory2_0+0xfbfe6238>
    6278:	38000926 	beq	r7,zero,62a0 <__multadd+0x94>
    627c:	88800217 	ldw	r2,8(r17)
    6280:	80800f0e 	bge	r16,r2,62c0 <__multadd+0xb4>
    6284:	80800144 	addi	r2,r16,5
    6288:	1085883a 	add	r2,r2,r2
    628c:	1085883a 	add	r2,r2,r2
    6290:	8885883a 	add	r2,r17,r2
    6294:	11c00015 	stw	r7,0(r2)
    6298:	84000044 	addi	r16,r16,1
    629c:	8c000415 	stw	r16,16(r17)
    62a0:	8805883a 	mov	r2,r17
    62a4:	dfc00517 	ldw	ra,20(sp)
    62a8:	dcc00417 	ldw	r19,16(sp)
    62ac:	dc800317 	ldw	r18,12(sp)
    62b0:	dc400217 	ldw	r17,8(sp)
    62b4:	dc000117 	ldw	r16,4(sp)
    62b8:	dec00604 	addi	sp,sp,24
    62bc:	f800283a 	ret
    62c0:	89400117 	ldw	r5,4(r17)
    62c4:	9009883a 	mov	r4,r18
    62c8:	d9c00015 	stw	r7,0(sp)
    62cc:	29400044 	addi	r5,r5,1
    62d0:	000613c0 	call	613c <_Balloc>
    62d4:	89800417 	ldw	r6,16(r17)
    62d8:	11000304 	addi	r4,r2,12
    62dc:	89400304 	addi	r5,r17,12
    62e0:	31800084 	addi	r6,r6,2
    62e4:	318d883a 	add	r6,r6,r6
    62e8:	318d883a 	add	r6,r6,r6
    62ec:	1027883a 	mov	r19,r2
    62f0:	00005440 	call	544 <memcpy>
    62f4:	d9c00017 	ldw	r7,0(sp)
    62f8:	88000a26 	beq	r17,zero,6324 <__multadd+0x118>
    62fc:	89000117 	ldw	r4,4(r17)
    6300:	90c01317 	ldw	r3,76(r18)
    6304:	2109883a 	add	r4,r4,r4
    6308:	2109883a 	add	r4,r4,r4
    630c:	1907883a 	add	r3,r3,r4
    6310:	18800017 	ldw	r2,0(r3)
    6314:	88800015 	stw	r2,0(r17)
    6318:	1c400015 	stw	r17,0(r3)
    631c:	9823883a 	mov	r17,r19
    6320:	003fd806 	br	6284 <__alt_mem_onchip_memory2_0+0xfbfe6284>
    6324:	9823883a 	mov	r17,r19
    6328:	003fd606 	br	6284 <__alt_mem_onchip_memory2_0+0xfbfe6284>

0000632c <__s2b>:
    632c:	defff904 	addi	sp,sp,-28
    6330:	dc400115 	stw	r17,4(sp)
    6334:	dc000015 	stw	r16,0(sp)
    6338:	2023883a 	mov	r17,r4
    633c:	2821883a 	mov	r16,r5
    6340:	39000204 	addi	r4,r7,8
    6344:	01400244 	movi	r5,9
    6348:	dcc00315 	stw	r19,12(sp)
    634c:	dc800215 	stw	r18,8(sp)
    6350:	dfc00615 	stw	ra,24(sp)
    6354:	dd400515 	stw	r21,20(sp)
    6358:	dd000415 	stw	r20,16(sp)
    635c:	3825883a 	mov	r18,r7
    6360:	3027883a 	mov	r19,r6
    6364:	000a3d00 	call	a3d0 <__divsi3>
    6368:	00c00044 	movi	r3,1
    636c:	000b883a 	mov	r5,zero
    6370:	1880030e 	bge	r3,r2,6380 <__s2b+0x54>
    6374:	18c7883a 	add	r3,r3,r3
    6378:	29400044 	addi	r5,r5,1
    637c:	18bffd16 	blt	r3,r2,6374 <__alt_mem_onchip_memory2_0+0xfbfe6374>
    6380:	8809883a 	mov	r4,r17
    6384:	000613c0 	call	613c <_Balloc>
    6388:	d8c00717 	ldw	r3,28(sp)
    638c:	10c00515 	stw	r3,20(r2)
    6390:	00c00044 	movi	r3,1
    6394:	10c00415 	stw	r3,16(r2)
    6398:	00c00244 	movi	r3,9
    639c:	1cc0210e 	bge	r3,r19,6424 <__s2b+0xf8>
    63a0:	80eb883a 	add	r21,r16,r3
    63a4:	a829883a 	mov	r20,r21
    63a8:	84e1883a 	add	r16,r16,r19
    63ac:	a1c00007 	ldb	r7,0(r20)
    63b0:	8809883a 	mov	r4,r17
    63b4:	a5000044 	addi	r20,r20,1
    63b8:	100b883a 	mov	r5,r2
    63bc:	01800284 	movi	r6,10
    63c0:	39fff404 	addi	r7,r7,-48
    63c4:	000620c0 	call	620c <__multadd>
    63c8:	a43ff81e 	bne	r20,r16,63ac <__alt_mem_onchip_memory2_0+0xfbfe63ac>
    63cc:	ace1883a 	add	r16,r21,r19
    63d0:	843ffe04 	addi	r16,r16,-8
    63d4:	9c800a0e 	bge	r19,r18,6400 <__s2b+0xd4>
    63d8:	94e5c83a 	sub	r18,r18,r19
    63dc:	84a5883a 	add	r18,r16,r18
    63e0:	81c00007 	ldb	r7,0(r16)
    63e4:	8809883a 	mov	r4,r17
    63e8:	84000044 	addi	r16,r16,1
    63ec:	100b883a 	mov	r5,r2
    63f0:	01800284 	movi	r6,10
    63f4:	39fff404 	addi	r7,r7,-48
    63f8:	000620c0 	call	620c <__multadd>
    63fc:	84bff81e 	bne	r16,r18,63e0 <__alt_mem_onchip_memory2_0+0xfbfe63e0>
    6400:	dfc00617 	ldw	ra,24(sp)
    6404:	dd400517 	ldw	r21,20(sp)
    6408:	dd000417 	ldw	r20,16(sp)
    640c:	dcc00317 	ldw	r19,12(sp)
    6410:	dc800217 	ldw	r18,8(sp)
    6414:	dc400117 	ldw	r17,4(sp)
    6418:	dc000017 	ldw	r16,0(sp)
    641c:	dec00704 	addi	sp,sp,28
    6420:	f800283a 	ret
    6424:	84000284 	addi	r16,r16,10
    6428:	1827883a 	mov	r19,r3
    642c:	003fe906 	br	63d4 <__alt_mem_onchip_memory2_0+0xfbfe63d4>

00006430 <__hi0bits>:
    6430:	20bfffec 	andhi	r2,r4,65535
    6434:	1000141e 	bne	r2,zero,6488 <__hi0bits+0x58>
    6438:	2008943a 	slli	r4,r4,16
    643c:	00800404 	movi	r2,16
    6440:	20ffc02c 	andhi	r3,r4,65280
    6444:	1800021e 	bne	r3,zero,6450 <__hi0bits+0x20>
    6448:	2008923a 	slli	r4,r4,8
    644c:	10800204 	addi	r2,r2,8
    6450:	20fc002c 	andhi	r3,r4,61440
    6454:	1800021e 	bne	r3,zero,6460 <__hi0bits+0x30>
    6458:	2008913a 	slli	r4,r4,4
    645c:	10800104 	addi	r2,r2,4
    6460:	20f0002c 	andhi	r3,r4,49152
    6464:	1800031e 	bne	r3,zero,6474 <__hi0bits+0x44>
    6468:	2109883a 	add	r4,r4,r4
    646c:	10800084 	addi	r2,r2,2
    6470:	2109883a 	add	r4,r4,r4
    6474:	20000316 	blt	r4,zero,6484 <__hi0bits+0x54>
    6478:	2110002c 	andhi	r4,r4,16384
    647c:	2000041e 	bne	r4,zero,6490 <__hi0bits+0x60>
    6480:	00800804 	movi	r2,32
    6484:	f800283a 	ret
    6488:	0005883a 	mov	r2,zero
    648c:	003fec06 	br	6440 <__alt_mem_onchip_memory2_0+0xfbfe6440>
    6490:	10800044 	addi	r2,r2,1
    6494:	f800283a 	ret

00006498 <__lo0bits>:
    6498:	20c00017 	ldw	r3,0(r4)
    649c:	188001cc 	andi	r2,r3,7
    64a0:	10000826 	beq	r2,zero,64c4 <__lo0bits+0x2c>
    64a4:	1880004c 	andi	r2,r3,1
    64a8:	1000211e 	bne	r2,zero,6530 <__lo0bits+0x98>
    64ac:	1880008c 	andi	r2,r3,2
    64b0:	1000211e 	bne	r2,zero,6538 <__lo0bits+0xa0>
    64b4:	1806d0ba 	srli	r3,r3,2
    64b8:	00800084 	movi	r2,2
    64bc:	20c00015 	stw	r3,0(r4)
    64c0:	f800283a 	ret
    64c4:	18bfffcc 	andi	r2,r3,65535
    64c8:	10001326 	beq	r2,zero,6518 <__lo0bits+0x80>
    64cc:	0005883a 	mov	r2,zero
    64d0:	19403fcc 	andi	r5,r3,255
    64d4:	2800021e 	bne	r5,zero,64e0 <__lo0bits+0x48>
    64d8:	1806d23a 	srli	r3,r3,8
    64dc:	10800204 	addi	r2,r2,8
    64e0:	194003cc 	andi	r5,r3,15
    64e4:	2800021e 	bne	r5,zero,64f0 <__lo0bits+0x58>
    64e8:	1806d13a 	srli	r3,r3,4
    64ec:	10800104 	addi	r2,r2,4
    64f0:	194000cc 	andi	r5,r3,3
    64f4:	2800021e 	bne	r5,zero,6500 <__lo0bits+0x68>
    64f8:	1806d0ba 	srli	r3,r3,2
    64fc:	10800084 	addi	r2,r2,2
    6500:	1940004c 	andi	r5,r3,1
    6504:	2800081e 	bne	r5,zero,6528 <__lo0bits+0x90>
    6508:	1806d07a 	srli	r3,r3,1
    650c:	1800051e 	bne	r3,zero,6524 <__lo0bits+0x8c>
    6510:	00800804 	movi	r2,32
    6514:	f800283a 	ret
    6518:	1806d43a 	srli	r3,r3,16
    651c:	00800404 	movi	r2,16
    6520:	003feb06 	br	64d0 <__alt_mem_onchip_memory2_0+0xfbfe64d0>
    6524:	10800044 	addi	r2,r2,1
    6528:	20c00015 	stw	r3,0(r4)
    652c:	f800283a 	ret
    6530:	0005883a 	mov	r2,zero
    6534:	f800283a 	ret
    6538:	1806d07a 	srli	r3,r3,1
    653c:	00800044 	movi	r2,1
    6540:	20c00015 	stw	r3,0(r4)
    6544:	f800283a 	ret

00006548 <__i2b>:
    6548:	defffd04 	addi	sp,sp,-12
    654c:	dc000015 	stw	r16,0(sp)
    6550:	04000044 	movi	r16,1
    6554:	dc400115 	stw	r17,4(sp)
    6558:	2823883a 	mov	r17,r5
    655c:	800b883a 	mov	r5,r16
    6560:	dfc00215 	stw	ra,8(sp)
    6564:	000613c0 	call	613c <_Balloc>
    6568:	14400515 	stw	r17,20(r2)
    656c:	14000415 	stw	r16,16(r2)
    6570:	dfc00217 	ldw	ra,8(sp)
    6574:	dc400117 	ldw	r17,4(sp)
    6578:	dc000017 	ldw	r16,0(sp)
    657c:	dec00304 	addi	sp,sp,12
    6580:	f800283a 	ret

00006584 <__multiply>:
    6584:	defffa04 	addi	sp,sp,-24
    6588:	dcc00315 	stw	r19,12(sp)
    658c:	dc800215 	stw	r18,8(sp)
    6590:	2cc00417 	ldw	r19,16(r5)
    6594:	34800417 	ldw	r18,16(r6)
    6598:	dd000415 	stw	r20,16(sp)
    659c:	dc400115 	stw	r17,4(sp)
    65a0:	dfc00515 	stw	ra,20(sp)
    65a4:	dc000015 	stw	r16,0(sp)
    65a8:	2829883a 	mov	r20,r5
    65ac:	3023883a 	mov	r17,r6
    65b0:	9c807016 	blt	r19,r18,6774 <__multiply+0x1f0>
    65b4:	9005883a 	mov	r2,r18
    65b8:	9825883a 	mov	r18,r19
    65bc:	1027883a 	mov	r19,r2
    65c0:	a0800217 	ldw	r2,8(r20)
    65c4:	94e1883a 	add	r16,r18,r19
    65c8:	a1400117 	ldw	r5,4(r20)
    65cc:	1400010e 	bge	r2,r16,65d4 <__multiply+0x50>
    65d0:	29400044 	addi	r5,r5,1
    65d4:	000613c0 	call	613c <_Balloc>
    65d8:	8417883a 	add	r11,r16,r16
    65dc:	13000504 	addi	r12,r2,20
    65e0:	5ad7883a 	add	r11,r11,r11
    65e4:	62d7883a 	add	r11,r12,r11
    65e8:	6007883a 	mov	r3,r12
    65ec:	62c0032e 	bgeu	r12,r11,65fc <__multiply+0x78>
    65f0:	18000015 	stw	zero,0(r3)
    65f4:	18c00104 	addi	r3,r3,4
    65f8:	1afffd36 	bltu	r3,r11,65f0 <__alt_mem_onchip_memory2_0+0xfbfe65f0>
    65fc:	9ce7883a 	add	r19,r19,r19
    6600:	94a5883a 	add	r18,r18,r18
    6604:	89800504 	addi	r6,r17,20
    6608:	9ce7883a 	add	r19,r19,r19
    660c:	a3800504 	addi	r14,r20,20
    6610:	94a5883a 	add	r18,r18,r18
    6614:	34db883a 	add	r13,r6,r19
    6618:	7495883a 	add	r10,r14,r18
    661c:	3340422e 	bgeu	r6,r13,6728 <__multiply+0x1a4>
    6620:	34400017 	ldw	r17,0(r6)
    6624:	8cbfffcc 	andi	r18,r17,65535
    6628:	90001b26 	beq	r18,zero,6698 <__multiply+0x114>
    662c:	6013883a 	mov	r9,r12
    6630:	7023883a 	mov	r17,r14
    6634:	0011883a 	mov	r8,zero
    6638:	88c00017 	ldw	r3,0(r17)
    663c:	4bc00017 	ldw	r15,0(r9)
    6640:	8c400104 	addi	r17,r17,4
    6644:	19ffffcc 	andi	r7,r3,65535
    6648:	3c8f383a 	mul	r7,r7,r18
    664c:	1808d43a 	srli	r4,r3,16
    6650:	797fffcc 	andi	r5,r15,65535
    6654:	29cb883a 	add	r5,r5,r7
    6658:	2a0b883a 	add	r5,r5,r8
    665c:	2489383a 	mul	r4,r4,r18
    6660:	7806d43a 	srli	r3,r15,16
    6664:	2810d43a 	srli	r8,r5,16
    6668:	297fffcc 	andi	r5,r5,65535
    666c:	1907883a 	add	r3,r3,r4
    6670:	1a07883a 	add	r3,r3,r8
    6674:	1808943a 	slli	r4,r3,16
    6678:	480f883a 	mov	r7,r9
    667c:	1810d43a 	srli	r8,r3,16
    6680:	214ab03a 	or	r5,r4,r5
    6684:	49400015 	stw	r5,0(r9)
    6688:	4a400104 	addi	r9,r9,4
    668c:	8abfea36 	bltu	r17,r10,6638 <__alt_mem_onchip_memory2_0+0xfbfe6638>
    6690:	3a000115 	stw	r8,4(r7)
    6694:	34400017 	ldw	r17,0(r6)
    6698:	8822d43a 	srli	r17,r17,16
    669c:	88001f26 	beq	r17,zero,671c <__multiply+0x198>
    66a0:	60c00017 	ldw	r3,0(r12)
    66a4:	7013883a 	mov	r9,r14
    66a8:	601f883a 	mov	r15,r12
    66ac:	1811883a 	mov	r8,r3
    66b0:	6027883a 	mov	r19,r12
    66b4:	000f883a 	mov	r7,zero
    66b8:	00000106 	br	66c0 <__multiply+0x13c>
    66bc:	9027883a 	mov	r19,r18
    66c0:	4940000b 	ldhu	r5,0(r9)
    66c4:	4010d43a 	srli	r8,r8,16
    66c8:	193fffcc 	andi	r4,r3,65535
    66cc:	2c4b383a 	mul	r5,r5,r17
    66d0:	7bc00104 	addi	r15,r15,4
    66d4:	4a400104 	addi	r9,r9,4
    66d8:	2a0b883a 	add	r5,r5,r8
    66dc:	29cb883a 	add	r5,r5,r7
    66e0:	2806943a 	slli	r3,r5,16
    66e4:	9c800104 	addi	r18,r19,4
    66e8:	280ad43a 	srli	r5,r5,16
    66ec:	1908b03a 	or	r4,r3,r4
    66f0:	793fff15 	stw	r4,-4(r15)
    66f4:	48ffff17 	ldw	r3,-4(r9)
    66f8:	92000017 	ldw	r8,0(r18)
    66fc:	1806d43a 	srli	r3,r3,16
    6700:	413fffcc 	andi	r4,r8,65535
    6704:	1c47383a 	mul	r3,r3,r17
    6708:	1907883a 	add	r3,r3,r4
    670c:	1947883a 	add	r3,r3,r5
    6710:	180ed43a 	srli	r7,r3,16
    6714:	4abfe936 	bltu	r9,r10,66bc <__alt_mem_onchip_memory2_0+0xfbfe66bc>
    6718:	98c00115 	stw	r3,4(r19)
    671c:	31800104 	addi	r6,r6,4
    6720:	63000104 	addi	r12,r12,4
    6724:	337fbe36 	bltu	r6,r13,6620 <__alt_mem_onchip_memory2_0+0xfbfe6620>
    6728:	0400090e 	bge	zero,r16,6750 <__multiply+0x1cc>
    672c:	58ffff17 	ldw	r3,-4(r11)
    6730:	5affff04 	addi	r11,r11,-4
    6734:	18000326 	beq	r3,zero,6744 <__multiply+0x1c0>
    6738:	00000506 	br	6750 <__multiply+0x1cc>
    673c:	58c00017 	ldw	r3,0(r11)
    6740:	1800031e 	bne	r3,zero,6750 <__multiply+0x1cc>
    6744:	843fffc4 	addi	r16,r16,-1
    6748:	5affff04 	addi	r11,r11,-4
    674c:	803ffb1e 	bne	r16,zero,673c <__alt_mem_onchip_memory2_0+0xfbfe673c>
    6750:	14000415 	stw	r16,16(r2)
    6754:	dfc00517 	ldw	ra,20(sp)
    6758:	dd000417 	ldw	r20,16(sp)
    675c:	dcc00317 	ldw	r19,12(sp)
    6760:	dc800217 	ldw	r18,8(sp)
    6764:	dc400117 	ldw	r17,4(sp)
    6768:	dc000017 	ldw	r16,0(sp)
    676c:	dec00604 	addi	sp,sp,24
    6770:	f800283a 	ret
    6774:	3029883a 	mov	r20,r6
    6778:	2823883a 	mov	r17,r5
    677c:	003f9006 	br	65c0 <__alt_mem_onchip_memory2_0+0xfbfe65c0>

00006780 <__pow5mult>:
    6780:	defffa04 	addi	sp,sp,-24
    6784:	dcc00315 	stw	r19,12(sp)
    6788:	dc800215 	stw	r18,8(sp)
    678c:	dc000015 	stw	r16,0(sp)
    6790:	dfc00515 	stw	ra,20(sp)
    6794:	dd000415 	stw	r20,16(sp)
    6798:	dc400115 	stw	r17,4(sp)
    679c:	308000cc 	andi	r2,r6,3
    67a0:	3021883a 	mov	r16,r6
    67a4:	2027883a 	mov	r19,r4
    67a8:	2825883a 	mov	r18,r5
    67ac:	10002e1e 	bne	r2,zero,6868 <__pow5mult+0xe8>
    67b0:	8021d0ba 	srai	r16,r16,2
    67b4:	80001a26 	beq	r16,zero,6820 <__pow5mult+0xa0>
    67b8:	9c401217 	ldw	r17,72(r19)
    67bc:	8800061e 	bne	r17,zero,67d8 <__pow5mult+0x58>
    67c0:	00003406 	br	6894 <__pow5mult+0x114>
    67c4:	8021d07a 	srai	r16,r16,1
    67c8:	80001526 	beq	r16,zero,6820 <__pow5mult+0xa0>
    67cc:	88800017 	ldw	r2,0(r17)
    67d0:	10001c26 	beq	r2,zero,6844 <__pow5mult+0xc4>
    67d4:	1023883a 	mov	r17,r2
    67d8:	80c0004c 	andi	r3,r16,1
    67dc:	183ff926 	beq	r3,zero,67c4 <__alt_mem_onchip_memory2_0+0xfbfe67c4>
    67e0:	900b883a 	mov	r5,r18
    67e4:	880d883a 	mov	r6,r17
    67e8:	9809883a 	mov	r4,r19
    67ec:	00065840 	call	6584 <__multiply>
    67f0:	90001b26 	beq	r18,zero,6860 <__pow5mult+0xe0>
    67f4:	91c00117 	ldw	r7,4(r18)
    67f8:	98c01317 	ldw	r3,76(r19)
    67fc:	8021d07a 	srai	r16,r16,1
    6800:	39cf883a 	add	r7,r7,r7
    6804:	39cf883a 	add	r7,r7,r7
    6808:	19c7883a 	add	r3,r3,r7
    680c:	19000017 	ldw	r4,0(r3)
    6810:	91000015 	stw	r4,0(r18)
    6814:	1c800015 	stw	r18,0(r3)
    6818:	1025883a 	mov	r18,r2
    681c:	803feb1e 	bne	r16,zero,67cc <__alt_mem_onchip_memory2_0+0xfbfe67cc>
    6820:	9005883a 	mov	r2,r18
    6824:	dfc00517 	ldw	ra,20(sp)
    6828:	dd000417 	ldw	r20,16(sp)
    682c:	dcc00317 	ldw	r19,12(sp)
    6830:	dc800217 	ldw	r18,8(sp)
    6834:	dc400117 	ldw	r17,4(sp)
    6838:	dc000017 	ldw	r16,0(sp)
    683c:	dec00604 	addi	sp,sp,24
    6840:	f800283a 	ret
    6844:	9809883a 	mov	r4,r19
    6848:	880b883a 	mov	r5,r17
    684c:	880d883a 	mov	r6,r17
    6850:	00065840 	call	6584 <__multiply>
    6854:	88800015 	stw	r2,0(r17)
    6858:	10000015 	stw	zero,0(r2)
    685c:	003fdd06 	br	67d4 <__alt_mem_onchip_memory2_0+0xfbfe67d4>
    6860:	1025883a 	mov	r18,r2
    6864:	003fd706 	br	67c4 <__alt_mem_onchip_memory2_0+0xfbfe67c4>
    6868:	10bfffc4 	addi	r2,r2,-1
    686c:	1085883a 	add	r2,r2,r2
    6870:	00c00074 	movhi	r3,1
    6874:	18ffbf04 	addi	r3,r3,-260
    6878:	1085883a 	add	r2,r2,r2
    687c:	1885883a 	add	r2,r3,r2
    6880:	11800017 	ldw	r6,0(r2)
    6884:	000f883a 	mov	r7,zero
    6888:	000620c0 	call	620c <__multadd>
    688c:	1025883a 	mov	r18,r2
    6890:	003fc706 	br	67b0 <__alt_mem_onchip_memory2_0+0xfbfe67b0>
    6894:	05000044 	movi	r20,1
    6898:	9809883a 	mov	r4,r19
    689c:	a00b883a 	mov	r5,r20
    68a0:	000613c0 	call	613c <_Balloc>
    68a4:	1023883a 	mov	r17,r2
    68a8:	00809c44 	movi	r2,625
    68ac:	88800515 	stw	r2,20(r17)
    68b0:	8d000415 	stw	r20,16(r17)
    68b4:	9c401215 	stw	r17,72(r19)
    68b8:	88000015 	stw	zero,0(r17)
    68bc:	003fc606 	br	67d8 <__alt_mem_onchip_memory2_0+0xfbfe67d8>

000068c0 <__lshift>:
    68c0:	defff904 	addi	sp,sp,-28
    68c4:	dd000415 	stw	r20,16(sp)
    68c8:	dcc00315 	stw	r19,12(sp)
    68cc:	3029d17a 	srai	r20,r6,5
    68d0:	2cc00417 	ldw	r19,16(r5)
    68d4:	28800217 	ldw	r2,8(r5)
    68d8:	dd400515 	stw	r21,20(sp)
    68dc:	a4e7883a 	add	r19,r20,r19
    68e0:	dc800215 	stw	r18,8(sp)
    68e4:	dc400115 	stw	r17,4(sp)
    68e8:	dc000015 	stw	r16,0(sp)
    68ec:	dfc00615 	stw	ra,24(sp)
    68f0:	9c000044 	addi	r16,r19,1
    68f4:	2823883a 	mov	r17,r5
    68f8:	302b883a 	mov	r21,r6
    68fc:	2025883a 	mov	r18,r4
    6900:	29400117 	ldw	r5,4(r5)
    6904:	1400030e 	bge	r2,r16,6914 <__lshift+0x54>
    6908:	1085883a 	add	r2,r2,r2
    690c:	29400044 	addi	r5,r5,1
    6910:	143ffd16 	blt	r2,r16,6908 <__alt_mem_onchip_memory2_0+0xfbfe6908>
    6914:	9009883a 	mov	r4,r18
    6918:	000613c0 	call	613c <_Balloc>
    691c:	11c00504 	addi	r7,r2,20
    6920:	0500090e 	bge	zero,r20,6948 <__lshift+0x88>
    6924:	3811883a 	mov	r8,r7
    6928:	0007883a 	mov	r3,zero
    692c:	40000015 	stw	zero,0(r8)
    6930:	18c00044 	addi	r3,r3,1
    6934:	42000104 	addi	r8,r8,4
    6938:	1d3ffc1e 	bne	r3,r20,692c <__alt_mem_onchip_memory2_0+0xfbfe692c>
    693c:	18c7883a 	add	r3,r3,r3
    6940:	18c7883a 	add	r3,r3,r3
    6944:	38cf883a 	add	r7,r7,r3
    6948:	89000417 	ldw	r4,16(r17)
    694c:	88c00504 	addi	r3,r17,20
    6950:	a98007cc 	andi	r6,r21,31
    6954:	2109883a 	add	r4,r4,r4
    6958:	2109883a 	add	r4,r4,r4
    695c:	1909883a 	add	r4,r3,r4
    6960:	30002326 	beq	r6,zero,69f0 <__lshift+0x130>
    6964:	01400804 	movi	r5,32
    6968:	298bc83a 	sub	r5,r5,r6
    696c:	0013883a 	mov	r9,zero
    6970:	1a000017 	ldw	r8,0(r3)
    6974:	3815883a 	mov	r10,r7
    6978:	39c00104 	addi	r7,r7,4
    697c:	4190983a 	sll	r8,r8,r6
    6980:	18c00104 	addi	r3,r3,4
    6984:	4a10b03a 	or	r8,r9,r8
    6988:	3a3fff15 	stw	r8,-4(r7)
    698c:	1a3fff17 	ldw	r8,-4(r3)
    6990:	4152d83a 	srl	r9,r8,r5
    6994:	193ff636 	bltu	r3,r4,6970 <__alt_mem_onchip_memory2_0+0xfbfe6970>
    6998:	52400115 	stw	r9,4(r10)
    699c:	48001a1e 	bne	r9,zero,6a08 <__lshift+0x148>
    69a0:	843fffc4 	addi	r16,r16,-1
    69a4:	14000415 	stw	r16,16(r2)
    69a8:	88000826 	beq	r17,zero,69cc <__lshift+0x10c>
    69ac:	89000117 	ldw	r4,4(r17)
    69b0:	90c01317 	ldw	r3,76(r18)
    69b4:	2109883a 	add	r4,r4,r4
    69b8:	2109883a 	add	r4,r4,r4
    69bc:	1907883a 	add	r3,r3,r4
    69c0:	19000017 	ldw	r4,0(r3)
    69c4:	89000015 	stw	r4,0(r17)
    69c8:	1c400015 	stw	r17,0(r3)
    69cc:	dfc00617 	ldw	ra,24(sp)
    69d0:	dd400517 	ldw	r21,20(sp)
    69d4:	dd000417 	ldw	r20,16(sp)
    69d8:	dcc00317 	ldw	r19,12(sp)
    69dc:	dc800217 	ldw	r18,8(sp)
    69e0:	dc400117 	ldw	r17,4(sp)
    69e4:	dc000017 	ldw	r16,0(sp)
    69e8:	dec00704 	addi	sp,sp,28
    69ec:	f800283a 	ret
    69f0:	19400017 	ldw	r5,0(r3)
    69f4:	39c00104 	addi	r7,r7,4
    69f8:	18c00104 	addi	r3,r3,4
    69fc:	397fff15 	stw	r5,-4(r7)
    6a00:	193ffb36 	bltu	r3,r4,69f0 <__alt_mem_onchip_memory2_0+0xfbfe69f0>
    6a04:	003fe606 	br	69a0 <__alt_mem_onchip_memory2_0+0xfbfe69a0>
    6a08:	9c000084 	addi	r16,r19,2
    6a0c:	003fe406 	br	69a0 <__alt_mem_onchip_memory2_0+0xfbfe69a0>

00006a10 <__mcmp>:
    6a10:	20800417 	ldw	r2,16(r4)
    6a14:	28c00417 	ldw	r3,16(r5)
    6a18:	10c5c83a 	sub	r2,r2,r3
    6a1c:	1000111e 	bne	r2,zero,6a64 <__mcmp+0x54>
    6a20:	18c7883a 	add	r3,r3,r3
    6a24:	18c7883a 	add	r3,r3,r3
    6a28:	21000504 	addi	r4,r4,20
    6a2c:	29400504 	addi	r5,r5,20
    6a30:	20c5883a 	add	r2,r4,r3
    6a34:	28cb883a 	add	r5,r5,r3
    6a38:	00000106 	br	6a40 <__mcmp+0x30>
    6a3c:	20800a2e 	bgeu	r4,r2,6a68 <__mcmp+0x58>
    6a40:	10bfff04 	addi	r2,r2,-4
    6a44:	297fff04 	addi	r5,r5,-4
    6a48:	11800017 	ldw	r6,0(r2)
    6a4c:	28c00017 	ldw	r3,0(r5)
    6a50:	30fffa26 	beq	r6,r3,6a3c <__alt_mem_onchip_memory2_0+0xfbfe6a3c>
    6a54:	30c00236 	bltu	r6,r3,6a60 <__mcmp+0x50>
    6a58:	00800044 	movi	r2,1
    6a5c:	f800283a 	ret
    6a60:	00bfffc4 	movi	r2,-1
    6a64:	f800283a 	ret
    6a68:	0005883a 	mov	r2,zero
    6a6c:	f800283a 	ret

00006a70 <__mdiff>:
    6a70:	defffb04 	addi	sp,sp,-20
    6a74:	dc000015 	stw	r16,0(sp)
    6a78:	2821883a 	mov	r16,r5
    6a7c:	dcc00315 	stw	r19,12(sp)
    6a80:	300b883a 	mov	r5,r6
    6a84:	2027883a 	mov	r19,r4
    6a88:	8009883a 	mov	r4,r16
    6a8c:	dc800215 	stw	r18,8(sp)
    6a90:	dfc00415 	stw	ra,16(sp)
    6a94:	dc400115 	stw	r17,4(sp)
    6a98:	3025883a 	mov	r18,r6
    6a9c:	0006a100 	call	6a10 <__mcmp>
    6aa0:	10005226 	beq	r2,zero,6bec <__mdiff+0x17c>
    6aa4:	10004c16 	blt	r2,zero,6bd8 <__mdiff+0x168>
    6aa8:	0023883a 	mov	r17,zero
    6aac:	81400117 	ldw	r5,4(r16)
    6ab0:	9809883a 	mov	r4,r19
    6ab4:	000613c0 	call	613c <_Balloc>
    6ab8:	83400417 	ldw	r13,16(r16)
    6abc:	93800417 	ldw	r14,16(r18)
    6ac0:	81000504 	addi	r4,r16,20
    6ac4:	6b59883a 	add	r12,r13,r13
    6ac8:	739d883a 	add	r14,r14,r14
    6acc:	6319883a 	add	r12,r12,r12
    6ad0:	91800504 	addi	r6,r18,20
    6ad4:	739d883a 	add	r14,r14,r14
    6ad8:	14400315 	stw	r17,12(r2)
    6adc:	2319883a 	add	r12,r4,r12
    6ae0:	339d883a 	add	r14,r6,r14
    6ae4:	12400504 	addi	r9,r2,20
    6ae8:	0007883a 	mov	r3,zero
    6aec:	22000017 	ldw	r8,0(r4)
    6af0:	32800017 	ldw	r10,0(r6)
    6af4:	4ac00104 	addi	r11,r9,4
    6af8:	41ffffcc 	andi	r7,r8,65535
    6afc:	38c7883a 	add	r3,r7,r3
    6b00:	51ffffcc 	andi	r7,r10,65535
    6b04:	19cfc83a 	sub	r7,r3,r7
    6b08:	4010d43a 	srli	r8,r8,16
    6b0c:	5014d43a 	srli	r10,r10,16
    6b10:	3807d43a 	srai	r3,r7,16
    6b14:	39ffffcc 	andi	r7,r7,65535
    6b18:	4291c83a 	sub	r8,r8,r10
    6b1c:	40c7883a 	add	r3,r8,r3
    6b20:	1810943a 	slli	r8,r3,16
    6b24:	31800104 	addi	r6,r6,4
    6b28:	21000104 	addi	r4,r4,4
    6b2c:	41ceb03a 	or	r7,r8,r7
    6b30:	49c00015 	stw	r7,0(r9)
    6b34:	1807d43a 	srai	r3,r3,16
    6b38:	580b883a 	mov	r5,r11
    6b3c:	5813883a 	mov	r9,r11
    6b40:	33bfea36 	bltu	r6,r14,6aec <__alt_mem_onchip_memory2_0+0xfbfe6aec>
    6b44:	2011883a 	mov	r8,r4
    6b48:	2300152e 	bgeu	r4,r12,6ba0 <__mdiff+0x130>
    6b4c:	21400017 	ldw	r5,0(r4)
    6b50:	4a400104 	addi	r9,r9,4
    6b54:	21000104 	addi	r4,r4,4
    6b58:	29ffffcc 	andi	r7,r5,65535
    6b5c:	38c7883a 	add	r3,r7,r3
    6b60:	280ad43a 	srli	r5,r5,16
    6b64:	180dd43a 	srai	r6,r3,16
    6b68:	19ffffcc 	andi	r7,r3,65535
    6b6c:	3147883a 	add	r3,r6,r5
    6b70:	180a943a 	slli	r5,r3,16
    6b74:	1807d43a 	srai	r3,r3,16
    6b78:	29ceb03a 	or	r7,r5,r7
    6b7c:	49ffff15 	stw	r7,-4(r9)
    6b80:	233ff236 	bltu	r4,r12,6b4c <__alt_mem_onchip_memory2_0+0xfbfe6b4c>
    6b84:	0206303a 	nor	r3,zero,r8
    6b88:	1b07883a 	add	r3,r3,r12
    6b8c:	1806d0ba 	srli	r3,r3,2
    6b90:	18c00044 	addi	r3,r3,1
    6b94:	18c7883a 	add	r3,r3,r3
    6b98:	18c7883a 	add	r3,r3,r3
    6b9c:	58cb883a 	add	r5,r11,r3
    6ba0:	28ffff04 	addi	r3,r5,-4
    6ba4:	3800041e 	bne	r7,zero,6bb8 <__mdiff+0x148>
    6ba8:	18ffff04 	addi	r3,r3,-4
    6bac:	19000017 	ldw	r4,0(r3)
    6bb0:	6b7fffc4 	addi	r13,r13,-1
    6bb4:	203ffc26 	beq	r4,zero,6ba8 <__alt_mem_onchip_memory2_0+0xfbfe6ba8>
    6bb8:	13400415 	stw	r13,16(r2)
    6bbc:	dfc00417 	ldw	ra,16(sp)
    6bc0:	dcc00317 	ldw	r19,12(sp)
    6bc4:	dc800217 	ldw	r18,8(sp)
    6bc8:	dc400117 	ldw	r17,4(sp)
    6bcc:	dc000017 	ldw	r16,0(sp)
    6bd0:	dec00504 	addi	sp,sp,20
    6bd4:	f800283a 	ret
    6bd8:	8005883a 	mov	r2,r16
    6bdc:	04400044 	movi	r17,1
    6be0:	9021883a 	mov	r16,r18
    6be4:	1025883a 	mov	r18,r2
    6be8:	003fb006 	br	6aac <__alt_mem_onchip_memory2_0+0xfbfe6aac>
    6bec:	9809883a 	mov	r4,r19
    6bf0:	000b883a 	mov	r5,zero
    6bf4:	000613c0 	call	613c <_Balloc>
    6bf8:	00c00044 	movi	r3,1
    6bfc:	10c00415 	stw	r3,16(r2)
    6c00:	10000515 	stw	zero,20(r2)
    6c04:	003fed06 	br	6bbc <__alt_mem_onchip_memory2_0+0xfbfe6bbc>

00006c08 <__ulp>:
    6c08:	295ffc2c 	andhi	r5,r5,32752
    6c0c:	00bf3034 	movhi	r2,64704
    6c10:	2887883a 	add	r3,r5,r2
    6c14:	00c0020e 	bge	zero,r3,6c20 <__ulp+0x18>
    6c18:	0005883a 	mov	r2,zero
    6c1c:	f800283a 	ret
    6c20:	00c7c83a 	sub	r3,zero,r3
    6c24:	180bd53a 	srai	r5,r3,20
    6c28:	008004c4 	movi	r2,19
    6c2c:	11400a0e 	bge	r2,r5,6c58 <__ulp+0x50>
    6c30:	00800c84 	movi	r2,50
    6c34:	0007883a 	mov	r3,zero
    6c38:	11400516 	blt	r2,r5,6c50 <__ulp+0x48>
    6c3c:	00800cc4 	movi	r2,51
    6c40:	114bc83a 	sub	r5,r2,r5
    6c44:	00800044 	movi	r2,1
    6c48:	1144983a 	sll	r2,r2,r5
    6c4c:	f800283a 	ret
    6c50:	00800044 	movi	r2,1
    6c54:	f800283a 	ret
    6c58:	00800234 	movhi	r2,8
    6c5c:	1147d83a 	sra	r3,r2,r5
    6c60:	0005883a 	mov	r2,zero
    6c64:	f800283a 	ret

00006c68 <__b2d>:
    6c68:	defffa04 	addi	sp,sp,-24
    6c6c:	dc000015 	stw	r16,0(sp)
    6c70:	24000417 	ldw	r16,16(r4)
    6c74:	dc400115 	stw	r17,4(sp)
    6c78:	24400504 	addi	r17,r4,20
    6c7c:	8421883a 	add	r16,r16,r16
    6c80:	8421883a 	add	r16,r16,r16
    6c84:	8c21883a 	add	r16,r17,r16
    6c88:	dc800215 	stw	r18,8(sp)
    6c8c:	84bfff17 	ldw	r18,-4(r16)
    6c90:	dd000415 	stw	r20,16(sp)
    6c94:	dcc00315 	stw	r19,12(sp)
    6c98:	9009883a 	mov	r4,r18
    6c9c:	2829883a 	mov	r20,r5
    6ca0:	dfc00515 	stw	ra,20(sp)
    6ca4:	00064300 	call	6430 <__hi0bits>
    6ca8:	00c00804 	movi	r3,32
    6cac:	1887c83a 	sub	r3,r3,r2
    6cb0:	a0c00015 	stw	r3,0(r20)
    6cb4:	00c00284 	movi	r3,10
    6cb8:	84ffff04 	addi	r19,r16,-4
    6cbc:	18801216 	blt	r3,r2,6d08 <__b2d+0xa0>
    6cc0:	014002c4 	movi	r5,11
    6cc4:	2889c83a 	sub	r4,r5,r2
    6cc8:	9106d83a 	srl	r3,r18,r4
    6ccc:	18cffc34 	orhi	r3,r3,16368
    6cd0:	8cc0282e 	bgeu	r17,r19,6d74 <__b2d+0x10c>
    6cd4:	817ffe17 	ldw	r5,-8(r16)
    6cd8:	290ad83a 	srl	r5,r5,r4
    6cdc:	10800544 	addi	r2,r2,21
    6ce0:	9084983a 	sll	r2,r18,r2
    6ce4:	2884b03a 	or	r2,r5,r2
    6ce8:	dfc00517 	ldw	ra,20(sp)
    6cec:	dd000417 	ldw	r20,16(sp)
    6cf0:	dcc00317 	ldw	r19,12(sp)
    6cf4:	dc800217 	ldw	r18,8(sp)
    6cf8:	dc400117 	ldw	r17,4(sp)
    6cfc:	dc000017 	ldw	r16,0(sp)
    6d00:	dec00604 	addi	sp,sp,24
    6d04:	f800283a 	ret
    6d08:	113ffd44 	addi	r4,r2,-11
    6d0c:	8cc00f2e 	bgeu	r17,r19,6d4c <__b2d+0xe4>
    6d10:	81bffe04 	addi	r6,r16,-8
    6d14:	817ffe17 	ldw	r5,-8(r16)
    6d18:	20001326 	beq	r4,zero,6d68 <__b2d+0x100>
    6d1c:	00c00ac4 	movi	r3,43
    6d20:	1885c83a 	sub	r2,r3,r2
    6d24:	2886d83a 	srl	r3,r5,r2
    6d28:	9124983a 	sll	r18,r18,r4
    6d2c:	90e4b03a 	or	r18,r18,r3
    6d30:	90cffc34 	orhi	r3,r18,16368
    6d34:	8980112e 	bgeu	r17,r6,6d7c <__b2d+0x114>
    6d38:	81bffd17 	ldw	r6,-12(r16)
    6d3c:	308cd83a 	srl	r6,r6,r2
    6d40:	2904983a 	sll	r2,r5,r4
    6d44:	1184b03a 	or	r2,r2,r6
    6d48:	003fe706 	br	6ce8 <__alt_mem_onchip_memory2_0+0xfbfe6ce8>
    6d4c:	20000526 	beq	r4,zero,6d64 <__b2d+0xfc>
    6d50:	9124983a 	sll	r18,r18,r4
    6d54:	000d883a 	mov	r6,zero
    6d58:	000b883a 	mov	r5,zero
    6d5c:	90cffc34 	orhi	r3,r18,16368
    6d60:	003ff706 	br	6d40 <__alt_mem_onchip_memory2_0+0xfbfe6d40>
    6d64:	000b883a 	mov	r5,zero
    6d68:	90cffc34 	orhi	r3,r18,16368
    6d6c:	2805883a 	mov	r2,r5
    6d70:	003fdd06 	br	6ce8 <__alt_mem_onchip_memory2_0+0xfbfe6ce8>
    6d74:	000b883a 	mov	r5,zero
    6d78:	003fd806 	br	6cdc <__alt_mem_onchip_memory2_0+0xfbfe6cdc>
    6d7c:	000d883a 	mov	r6,zero
    6d80:	003fef06 	br	6d40 <__alt_mem_onchip_memory2_0+0xfbfe6d40>

00006d84 <__d2b>:
    6d84:	defff704 	addi	sp,sp,-36
    6d88:	dc000215 	stw	r16,8(sp)
    6d8c:	3021883a 	mov	r16,r6
    6d90:	dc400315 	stw	r17,12(sp)
    6d94:	8022907a 	slli	r17,r16,1
    6d98:	dd400715 	stw	r21,28(sp)
    6d9c:	282b883a 	mov	r21,r5
    6da0:	01400044 	movi	r5,1
    6da4:	dd000615 	stw	r20,24(sp)
    6da8:	dcc00515 	stw	r19,20(sp)
    6dac:	dc800415 	stw	r18,16(sp)
    6db0:	dfc00815 	stw	ra,32(sp)
    6db4:	3829883a 	mov	r20,r7
    6db8:	dc800917 	ldw	r18,36(sp)
    6dbc:	8822d57a 	srli	r17,r17,21
    6dc0:	000613c0 	call	613c <_Balloc>
    6dc4:	1027883a 	mov	r19,r2
    6dc8:	00800434 	movhi	r2,16
    6dcc:	10bfffc4 	addi	r2,r2,-1
    6dd0:	808c703a 	and	r6,r16,r2
    6dd4:	88000126 	beq	r17,zero,6ddc <__d2b+0x58>
    6dd8:	31800434 	orhi	r6,r6,16
    6ddc:	d9800015 	stw	r6,0(sp)
    6de0:	a8001f26 	beq	r21,zero,6e60 <__d2b+0xdc>
    6de4:	d9000104 	addi	r4,sp,4
    6de8:	dd400115 	stw	r21,4(sp)
    6dec:	00064980 	call	6498 <__lo0bits>
    6df0:	d8c00017 	ldw	r3,0(sp)
    6df4:	1000291e 	bne	r2,zero,6e9c <__d2b+0x118>
    6df8:	d9000117 	ldw	r4,4(sp)
    6dfc:	99000515 	stw	r4,20(r19)
    6e00:	1820c03a 	cmpne	r16,r3,zero
    6e04:	84000044 	addi	r16,r16,1
    6e08:	98c00615 	stw	r3,24(r19)
    6e0c:	9c000415 	stw	r16,16(r19)
    6e10:	88001b1e 	bne	r17,zero,6e80 <__d2b+0xfc>
    6e14:	800690ba 	slli	r3,r16,2
    6e18:	10bef384 	addi	r2,r2,-1074
    6e1c:	a0800015 	stw	r2,0(r20)
    6e20:	98c5883a 	add	r2,r19,r3
    6e24:	11000417 	ldw	r4,16(r2)
    6e28:	8020917a 	slli	r16,r16,5
    6e2c:	00064300 	call	6430 <__hi0bits>
    6e30:	8085c83a 	sub	r2,r16,r2
    6e34:	90800015 	stw	r2,0(r18)
    6e38:	9805883a 	mov	r2,r19
    6e3c:	dfc00817 	ldw	ra,32(sp)
    6e40:	dd400717 	ldw	r21,28(sp)
    6e44:	dd000617 	ldw	r20,24(sp)
    6e48:	dcc00517 	ldw	r19,20(sp)
    6e4c:	dc800417 	ldw	r18,16(sp)
    6e50:	dc400317 	ldw	r17,12(sp)
    6e54:	dc000217 	ldw	r16,8(sp)
    6e58:	dec00904 	addi	sp,sp,36
    6e5c:	f800283a 	ret
    6e60:	d809883a 	mov	r4,sp
    6e64:	00064980 	call	6498 <__lo0bits>
    6e68:	d8c00017 	ldw	r3,0(sp)
    6e6c:	04000044 	movi	r16,1
    6e70:	9c000415 	stw	r16,16(r19)
    6e74:	98c00515 	stw	r3,20(r19)
    6e78:	10800804 	addi	r2,r2,32
    6e7c:	883fe526 	beq	r17,zero,6e14 <__alt_mem_onchip_memory2_0+0xfbfe6e14>
    6e80:	8c7ef344 	addi	r17,r17,-1075
    6e84:	88a3883a 	add	r17,r17,r2
    6e88:	00c00d44 	movi	r3,53
    6e8c:	a4400015 	stw	r17,0(r20)
    6e90:	1885c83a 	sub	r2,r3,r2
    6e94:	90800015 	stw	r2,0(r18)
    6e98:	003fe706 	br	6e38 <__alt_mem_onchip_memory2_0+0xfbfe6e38>
    6e9c:	01000804 	movi	r4,32
    6ea0:	2089c83a 	sub	r4,r4,r2
    6ea4:	1908983a 	sll	r4,r3,r4
    6ea8:	d9400117 	ldw	r5,4(sp)
    6eac:	1886d83a 	srl	r3,r3,r2
    6eb0:	2148b03a 	or	r4,r4,r5
    6eb4:	99000515 	stw	r4,20(r19)
    6eb8:	d8c00015 	stw	r3,0(sp)
    6ebc:	003fd006 	br	6e00 <__alt_mem_onchip_memory2_0+0xfbfe6e00>

00006ec0 <__ratio>:
    6ec0:	defff904 	addi	sp,sp,-28
    6ec4:	dc400315 	stw	r17,12(sp)
    6ec8:	2823883a 	mov	r17,r5
    6ecc:	d9400104 	addi	r5,sp,4
    6ed0:	dfc00615 	stw	ra,24(sp)
    6ed4:	dcc00515 	stw	r19,20(sp)
    6ed8:	dc800415 	stw	r18,16(sp)
    6edc:	2027883a 	mov	r19,r4
    6ee0:	dc000215 	stw	r16,8(sp)
    6ee4:	0006c680 	call	6c68 <__b2d>
    6ee8:	8809883a 	mov	r4,r17
    6eec:	d80b883a 	mov	r5,sp
    6ef0:	1025883a 	mov	r18,r2
    6ef4:	1821883a 	mov	r16,r3
    6ef8:	0006c680 	call	6c68 <__b2d>
    6efc:	8a400417 	ldw	r9,16(r17)
    6f00:	9a000417 	ldw	r8,16(r19)
    6f04:	100d883a 	mov	r6,r2
    6f08:	d8800017 	ldw	r2,0(sp)
    6f0c:	4251c83a 	sub	r8,r8,r9
    6f10:	4012917a 	slli	r9,r8,5
    6f14:	da000117 	ldw	r8,4(sp)
    6f18:	4091c83a 	sub	r8,r8,r2
    6f1c:	4251883a 	add	r8,r8,r9
    6f20:	02000d0e 	bge	zero,r8,6f58 <__ratio+0x98>
    6f24:	4010953a 	slli	r8,r8,20
    6f28:	4421883a 	add	r16,r8,r16
    6f2c:	9009883a 	mov	r4,r18
    6f30:	800b883a 	mov	r5,r16
    6f34:	180f883a 	mov	r7,r3
    6f38:	000ad2c0 	call	ad2c <__divdf3>
    6f3c:	dfc00617 	ldw	ra,24(sp)
    6f40:	dcc00517 	ldw	r19,20(sp)
    6f44:	dc800417 	ldw	r18,16(sp)
    6f48:	dc400317 	ldw	r17,12(sp)
    6f4c:	dc000217 	ldw	r16,8(sp)
    6f50:	dec00704 	addi	sp,sp,28
    6f54:	f800283a 	ret
    6f58:	4010953a 	slli	r8,r8,20
    6f5c:	1a07c83a 	sub	r3,r3,r8
    6f60:	003ff206 	br	6f2c <__alt_mem_onchip_memory2_0+0xfbfe6f2c>

00006f64 <_mprec_log10>:
    6f64:	defffe04 	addi	sp,sp,-8
    6f68:	dc000015 	stw	r16,0(sp)
    6f6c:	dfc00115 	stw	ra,4(sp)
    6f70:	008005c4 	movi	r2,23
    6f74:	2021883a 	mov	r16,r4
    6f78:	11000d0e 	bge	r2,r4,6fb0 <_mprec_log10+0x4c>
    6f7c:	0005883a 	mov	r2,zero
    6f80:	00cffc34 	movhi	r3,16368
    6f84:	843fffc4 	addi	r16,r16,-1
    6f88:	1009883a 	mov	r4,r2
    6f8c:	180b883a 	mov	r5,r3
    6f90:	000d883a 	mov	r6,zero
    6f94:	01d00934 	movhi	r7,16420
    6f98:	000b83c0 	call	b83c <__muldf3>
    6f9c:	803ff91e 	bne	r16,zero,6f84 <__alt_mem_onchip_memory2_0+0xfbfe6f84>
    6fa0:	dfc00117 	ldw	ra,4(sp)
    6fa4:	dc000017 	ldw	r16,0(sp)
    6fa8:	dec00204 	addi	sp,sp,8
    6fac:	f800283a 	ret
    6fb0:	202090fa 	slli	r16,r4,3
    6fb4:	00800074 	movhi	r2,1
    6fb8:	10bfd604 	addi	r2,r2,-168
    6fbc:	1421883a 	add	r16,r2,r16
    6fc0:	80800017 	ldw	r2,0(r16)
    6fc4:	80c00117 	ldw	r3,4(r16)
    6fc8:	dfc00117 	ldw	ra,4(sp)
    6fcc:	dc000017 	ldw	r16,0(sp)
    6fd0:	dec00204 	addi	sp,sp,8
    6fd4:	f800283a 	ret

00006fd8 <__copybits>:
    6fd8:	297fffc4 	addi	r5,r5,-1
    6fdc:	280fd17a 	srai	r7,r5,5
    6fe0:	30c00417 	ldw	r3,16(r6)
    6fe4:	30800504 	addi	r2,r6,20
    6fe8:	39c00044 	addi	r7,r7,1
    6fec:	18c7883a 	add	r3,r3,r3
    6ff0:	39cf883a 	add	r7,r7,r7
    6ff4:	18c7883a 	add	r3,r3,r3
    6ff8:	39cf883a 	add	r7,r7,r7
    6ffc:	10c7883a 	add	r3,r2,r3
    7000:	21cf883a 	add	r7,r4,r7
    7004:	10c00d2e 	bgeu	r2,r3,703c <__copybits+0x64>
    7008:	200b883a 	mov	r5,r4
    700c:	12000017 	ldw	r8,0(r2)
    7010:	29400104 	addi	r5,r5,4
    7014:	10800104 	addi	r2,r2,4
    7018:	2a3fff15 	stw	r8,-4(r5)
    701c:	10fffb36 	bltu	r2,r3,700c <__alt_mem_onchip_memory2_0+0xfbfe700c>
    7020:	1985c83a 	sub	r2,r3,r6
    7024:	10bffac4 	addi	r2,r2,-21
    7028:	1004d0ba 	srli	r2,r2,2
    702c:	10800044 	addi	r2,r2,1
    7030:	1085883a 	add	r2,r2,r2
    7034:	1085883a 	add	r2,r2,r2
    7038:	2089883a 	add	r4,r4,r2
    703c:	21c0032e 	bgeu	r4,r7,704c <__copybits+0x74>
    7040:	20000015 	stw	zero,0(r4)
    7044:	21000104 	addi	r4,r4,4
    7048:	21fffd36 	bltu	r4,r7,7040 <__alt_mem_onchip_memory2_0+0xfbfe7040>
    704c:	f800283a 	ret

00007050 <__any_on>:
    7050:	20c00417 	ldw	r3,16(r4)
    7054:	2805d17a 	srai	r2,r5,5
    7058:	21000504 	addi	r4,r4,20
    705c:	18800d0e 	bge	r3,r2,7094 <__any_on+0x44>
    7060:	18c7883a 	add	r3,r3,r3
    7064:	18c7883a 	add	r3,r3,r3
    7068:	20c7883a 	add	r3,r4,r3
    706c:	20c0192e 	bgeu	r4,r3,70d4 <__any_on+0x84>
    7070:	18bfff17 	ldw	r2,-4(r3)
    7074:	18ffff04 	addi	r3,r3,-4
    7078:	1000041e 	bne	r2,zero,708c <__any_on+0x3c>
    707c:	20c0142e 	bgeu	r4,r3,70d0 <__any_on+0x80>
    7080:	18ffff04 	addi	r3,r3,-4
    7084:	19400017 	ldw	r5,0(r3)
    7088:	283ffc26 	beq	r5,zero,707c <__alt_mem_onchip_memory2_0+0xfbfe707c>
    708c:	00800044 	movi	r2,1
    7090:	f800283a 	ret
    7094:	10c00a0e 	bge	r2,r3,70c0 <__any_on+0x70>
    7098:	1085883a 	add	r2,r2,r2
    709c:	1085883a 	add	r2,r2,r2
    70a0:	294007cc 	andi	r5,r5,31
    70a4:	2087883a 	add	r3,r4,r2
    70a8:	283ff026 	beq	r5,zero,706c <__alt_mem_onchip_memory2_0+0xfbfe706c>
    70ac:	19800017 	ldw	r6,0(r3)
    70b0:	3144d83a 	srl	r2,r6,r5
    70b4:	114a983a 	sll	r5,r2,r5
    70b8:	29bff41e 	bne	r5,r6,708c <__alt_mem_onchip_memory2_0+0xfbfe708c>
    70bc:	003feb06 	br	706c <__alt_mem_onchip_memory2_0+0xfbfe706c>
    70c0:	1085883a 	add	r2,r2,r2
    70c4:	1085883a 	add	r2,r2,r2
    70c8:	2087883a 	add	r3,r4,r2
    70cc:	003fe706 	br	706c <__alt_mem_onchip_memory2_0+0xfbfe706c>
    70d0:	f800283a 	ret
    70d4:	0005883a 	mov	r2,zero
    70d8:	f800283a 	ret

000070dc <_putc_r>:
    70dc:	defffc04 	addi	sp,sp,-16
    70e0:	dc000215 	stw	r16,8(sp)
    70e4:	dfc00315 	stw	ra,12(sp)
    70e8:	2021883a 	mov	r16,r4
    70ec:	20000226 	beq	r4,zero,70f8 <_putc_r+0x1c>
    70f0:	20800e17 	ldw	r2,56(r4)
    70f4:	10001b26 	beq	r2,zero,7164 <_putc_r+0x88>
    70f8:	30800217 	ldw	r2,8(r6)
    70fc:	10bfffc4 	addi	r2,r2,-1
    7100:	30800215 	stw	r2,8(r6)
    7104:	10000a16 	blt	r2,zero,7130 <_putc_r+0x54>
    7108:	30800017 	ldw	r2,0(r6)
    710c:	11400005 	stb	r5,0(r2)
    7110:	30800017 	ldw	r2,0(r6)
    7114:	10c00044 	addi	r3,r2,1
    7118:	30c00015 	stw	r3,0(r6)
    711c:	10800003 	ldbu	r2,0(r2)
    7120:	dfc00317 	ldw	ra,12(sp)
    7124:	dc000217 	ldw	r16,8(sp)
    7128:	dec00404 	addi	sp,sp,16
    712c:	f800283a 	ret
    7130:	30c00617 	ldw	r3,24(r6)
    7134:	10c00616 	blt	r2,r3,7150 <_putc_r+0x74>
    7138:	30800017 	ldw	r2,0(r6)
    713c:	00c00284 	movi	r3,10
    7140:	11400005 	stb	r5,0(r2)
    7144:	30800017 	ldw	r2,0(r6)
    7148:	11400003 	ldbu	r5,0(r2)
    714c:	28fff11e 	bne	r5,r3,7114 <__alt_mem_onchip_memory2_0+0xfbfe7114>
    7150:	8009883a 	mov	r4,r16
    7154:	dfc00317 	ldw	ra,12(sp)
    7158:	dc000217 	ldw	r16,8(sp)
    715c:	dec00404 	addi	sp,sp,16
    7160:	0008f1c1 	jmpi	8f1c <__swbuf_r>
    7164:	d9400015 	stw	r5,0(sp)
    7168:	d9800115 	stw	r6,4(sp)
    716c:	0004a0c0 	call	4a0c <__sinit>
    7170:	d9800117 	ldw	r6,4(sp)
    7174:	d9400017 	ldw	r5,0(sp)
    7178:	003fdf06 	br	70f8 <__alt_mem_onchip_memory2_0+0xfbfe70f8>

0000717c <putc>:
    717c:	00800074 	movhi	r2,1
    7180:	defffc04 	addi	sp,sp,-16
    7184:	10874e04 	addi	r2,r2,7480
    7188:	dc400115 	stw	r17,4(sp)
    718c:	14400017 	ldw	r17,0(r2)
    7190:	dc800215 	stw	r18,8(sp)
    7194:	dc000015 	stw	r16,0(sp)
    7198:	dfc00315 	stw	ra,12(sp)
    719c:	2025883a 	mov	r18,r4
    71a0:	2821883a 	mov	r16,r5
    71a4:	88000226 	beq	r17,zero,71b0 <putc+0x34>
    71a8:	88800e17 	ldw	r2,56(r17)
    71ac:	10001a26 	beq	r2,zero,7218 <putc+0x9c>
    71b0:	80800217 	ldw	r2,8(r16)
    71b4:	10bfffc4 	addi	r2,r2,-1
    71b8:	80800215 	stw	r2,8(r16)
    71bc:	10000c16 	blt	r2,zero,71f0 <putc+0x74>
    71c0:	80800017 	ldw	r2,0(r16)
    71c4:	14800005 	stb	r18,0(r2)
    71c8:	80800017 	ldw	r2,0(r16)
    71cc:	10c00044 	addi	r3,r2,1
    71d0:	80c00015 	stw	r3,0(r16)
    71d4:	10800003 	ldbu	r2,0(r2)
    71d8:	dfc00317 	ldw	ra,12(sp)
    71dc:	dc800217 	ldw	r18,8(sp)
    71e0:	dc400117 	ldw	r17,4(sp)
    71e4:	dc000017 	ldw	r16,0(sp)
    71e8:	dec00404 	addi	sp,sp,16
    71ec:	f800283a 	ret
    71f0:	80c00617 	ldw	r3,24(r16)
    71f4:	10c00b16 	blt	r2,r3,7224 <putc+0xa8>
    71f8:	80800017 	ldw	r2,0(r16)
    71fc:	00c00284 	movi	r3,10
    7200:	14800005 	stb	r18,0(r2)
    7204:	80800017 	ldw	r2,0(r16)
    7208:	11400003 	ldbu	r5,0(r2)
    720c:	28ffef1e 	bne	r5,r3,71cc <__alt_mem_onchip_memory2_0+0xfbfe71cc>
    7210:	8809883a 	mov	r4,r17
    7214:	00000506 	br	722c <putc+0xb0>
    7218:	8809883a 	mov	r4,r17
    721c:	0004a0c0 	call	4a0c <__sinit>
    7220:	003fe306 	br	71b0 <__alt_mem_onchip_memory2_0+0xfbfe71b0>
    7224:	8809883a 	mov	r4,r17
    7228:	900b883a 	mov	r5,r18
    722c:	800d883a 	mov	r6,r16
    7230:	dfc00317 	ldw	ra,12(sp)
    7234:	dc800217 	ldw	r18,8(sp)
    7238:	dc400117 	ldw	r17,4(sp)
    723c:	dc000017 	ldw	r16,0(sp)
    7240:	dec00404 	addi	sp,sp,16
    7244:	0008f1c1 	jmpi	8f1c <__swbuf_r>

00007248 <_realloc_r>:
    7248:	defff604 	addi	sp,sp,-40
    724c:	dd000415 	stw	r20,16(sp)
    7250:	dc400115 	stw	r17,4(sp)
    7254:	dfc00915 	stw	ra,36(sp)
    7258:	df000815 	stw	fp,32(sp)
    725c:	ddc00715 	stw	r23,28(sp)
    7260:	dd800615 	stw	r22,24(sp)
    7264:	dd400515 	stw	r21,20(sp)
    7268:	dcc00315 	stw	r19,12(sp)
    726c:	dc800215 	stw	r18,8(sp)
    7270:	dc000015 	stw	r16,0(sp)
    7274:	2829883a 	mov	r20,r5
    7278:	3023883a 	mov	r17,r6
    727c:	2800ad26 	beq	r5,zero,7534 <_realloc_r+0x2ec>
    7280:	2025883a 	mov	r18,r4
    7284:	000d0500 	call	d050 <__malloc_lock>
    7288:	a0ffff17 	ldw	r3,-4(r20)
    728c:	043fff04 	movi	r16,-4
    7290:	890002c4 	addi	r4,r17,11
    7294:	01c00584 	movi	r7,22
    7298:	a57ffe04 	addi	r21,r20,-8
    729c:	1c20703a 	and	r16,r3,r16
    72a0:	39001d2e 	bgeu	r7,r4,7318 <_realloc_r+0xd0>
    72a4:	05bffe04 	movi	r22,-8
    72a8:	25ac703a 	and	r22,r4,r22
    72ac:	b00f883a 	mov	r7,r22
    72b0:	b0006516 	blt	r22,zero,7448 <_realloc_r+0x200>
    72b4:	b4406436 	bltu	r22,r17,7448 <_realloc_r+0x200>
    72b8:	81c01a0e 	bge	r16,r7,7324 <_realloc_r+0xdc>
    72bc:	07000074 	movhi	fp,1
    72c0:	e701c504 	addi	fp,fp,1812
    72c4:	e1400217 	ldw	r5,8(fp)
    72c8:	ac11883a 	add	r8,r21,r16
    72cc:	2a006226 	beq	r5,r8,7458 <_realloc_r+0x210>
    72d0:	41800117 	ldw	r6,4(r8)
    72d4:	027fff84 	movi	r9,-2
    72d8:	3252703a 	and	r9,r6,r9
    72dc:	4253883a 	add	r9,r8,r9
    72e0:	49000117 	ldw	r4,4(r9)
    72e4:	2100004c 	andi	r4,r4,1
    72e8:	2000281e 	bne	r4,zero,738c <_realloc_r+0x144>
    72ec:	00bfff04 	movi	r2,-4
    72f0:	3084703a 	and	r2,r6,r2
    72f4:	1409883a 	add	r4,r2,r16
    72f8:	21c05e16 	blt	r4,r7,7474 <_realloc_r+0x22c>
    72fc:	40800317 	ldw	r2,12(r8)
    7300:	41400217 	ldw	r5,8(r8)
    7304:	a023883a 	mov	r17,r20
    7308:	2021883a 	mov	r16,r4
    730c:	28800315 	stw	r2,12(r5)
    7310:	11400215 	stw	r5,8(r2)
    7314:	00000406 	br	7328 <_realloc_r+0xe0>
    7318:	01c00404 	movi	r7,16
    731c:	382d883a 	mov	r22,r7
    7320:	003fe406 	br	72b4 <__alt_mem_onchip_memory2_0+0xfbfe72b4>
    7324:	a023883a 	mov	r17,r20
    7328:	858fc83a 	sub	r7,r16,r22
    732c:	008003c4 	movi	r2,15
    7330:	18c0004c 	andi	r3,r3,1
    7334:	11c07236 	bltu	r2,r7,7500 <_realloc_r+0x2b8>
    7338:	1c06b03a 	or	r3,r3,r16
    733c:	a8c00115 	stw	r3,4(r21)
    7340:	ac21883a 	add	r16,r21,r16
    7344:	80800117 	ldw	r2,4(r16)
    7348:	10800054 	ori	r2,r2,1
    734c:	80800115 	stw	r2,4(r16)
    7350:	9009883a 	mov	r4,r18
    7354:	000d0700 	call	d070 <__malloc_unlock>
    7358:	8805883a 	mov	r2,r17
    735c:	dfc00917 	ldw	ra,36(sp)
    7360:	df000817 	ldw	fp,32(sp)
    7364:	ddc00717 	ldw	r23,28(sp)
    7368:	dd800617 	ldw	r22,24(sp)
    736c:	dd400517 	ldw	r21,20(sp)
    7370:	dd000417 	ldw	r20,16(sp)
    7374:	dcc00317 	ldw	r19,12(sp)
    7378:	dc800217 	ldw	r18,8(sp)
    737c:	dc400117 	ldw	r17,4(sp)
    7380:	dc000017 	ldw	r16,0(sp)
    7384:	dec00a04 	addi	sp,sp,40
    7388:	f800283a 	ret
    738c:	18c0004c 	andi	r3,r3,1
    7390:	1800081e 	bne	r3,zero,73b4 <_realloc_r+0x16c>
    7394:	a4fffe17 	ldw	r19,-8(r20)
    7398:	00bfff04 	movi	r2,-4
    739c:	ace7c83a 	sub	r19,r21,r19
    73a0:	98c00117 	ldw	r3,4(r19)
    73a4:	1886703a 	and	r3,r3,r2
    73a8:	98000226 	beq	r19,zero,73b4 <_realloc_r+0x16c>
    73ac:	1c2f883a 	add	r23,r3,r16
    73b0:	b9c06d0e 	bge	r23,r7,7568 <_realloc_r+0x320>
    73b4:	880b883a 	mov	r5,r17
    73b8:	9009883a 	mov	r4,r18
    73bc:	00057500 	call	5750 <_malloc_r>
    73c0:	1023883a 	mov	r17,r2
    73c4:	1000ef26 	beq	r2,zero,7784 <_realloc_r+0x53c>
    73c8:	a0ffff17 	ldw	r3,-4(r20)
    73cc:	113ffe04 	addi	r4,r2,-8
    73d0:	00bfff84 	movi	r2,-2
    73d4:	1884703a 	and	r2,r3,r2
    73d8:	a885883a 	add	r2,r21,r2
    73dc:	2080bf26 	beq	r4,r2,76dc <_realloc_r+0x494>
    73e0:	81bfff04 	addi	r6,r16,-4
    73e4:	00800904 	movi	r2,36
    73e8:	11808936 	bltu	r2,r6,7610 <_realloc_r+0x3c8>
    73ec:	00c004c4 	movi	r3,19
    73f0:	19806c2e 	bgeu	r3,r6,75a4 <_realloc_r+0x35c>
    73f4:	a0c00017 	ldw	r3,0(r20)
    73f8:	88c00015 	stw	r3,0(r17)
    73fc:	a0c00117 	ldw	r3,4(r20)
    7400:	88c00115 	stw	r3,4(r17)
    7404:	00c006c4 	movi	r3,27
    7408:	1980ac36 	bltu	r3,r6,76bc <_realloc_r+0x474>
    740c:	88800204 	addi	r2,r17,8
    7410:	a0c00204 	addi	r3,r20,8
    7414:	19000017 	ldw	r4,0(r3)
    7418:	11000015 	stw	r4,0(r2)
    741c:	19000117 	ldw	r4,4(r3)
    7420:	11000115 	stw	r4,4(r2)
    7424:	18c00217 	ldw	r3,8(r3)
    7428:	10c00215 	stw	r3,8(r2)
    742c:	a00b883a 	mov	r5,r20
    7430:	9009883a 	mov	r4,r18
    7434:	0004b800 	call	4b80 <_free_r>
    7438:	9009883a 	mov	r4,r18
    743c:	000d0700 	call	d070 <__malloc_unlock>
    7440:	8805883a 	mov	r2,r17
    7444:	003fc506 	br	735c <__alt_mem_onchip_memory2_0+0xfbfe735c>
    7448:	00800304 	movi	r2,12
    744c:	90800015 	stw	r2,0(r18)
    7450:	0005883a 	mov	r2,zero
    7454:	003fc106 	br	735c <__alt_mem_onchip_memory2_0+0xfbfe735c>
    7458:	29800117 	ldw	r6,4(r5)
    745c:	00bfff04 	movi	r2,-4
    7460:	b1000404 	addi	r4,r22,16
    7464:	3084703a 	and	r2,r6,r2
    7468:	140d883a 	add	r6,r2,r16
    746c:	31005b0e 	bge	r6,r4,75dc <_realloc_r+0x394>
    7470:	2811883a 	mov	r8,r5
    7474:	18c0004c 	andi	r3,r3,1
    7478:	183fce1e 	bne	r3,zero,73b4 <__alt_mem_onchip_memory2_0+0xfbfe73b4>
    747c:	a4fffe17 	ldw	r19,-8(r20)
    7480:	00ffff04 	movi	r3,-4
    7484:	ace7c83a 	sub	r19,r21,r19
    7488:	99000117 	ldw	r4,4(r19)
    748c:	20c6703a 	and	r3,r4,r3
    7490:	403fc526 	beq	r8,zero,73a8 <__alt_mem_onchip_memory2_0+0xfbfe73a8>
    7494:	1c2f883a 	add	r23,r3,r16
    7498:	b8af883a 	add	r23,r23,r2
    749c:	41406026 	beq	r8,r5,7620 <_realloc_r+0x3d8>
    74a0:	b9ffc116 	blt	r23,r7,73a8 <__alt_mem_onchip_memory2_0+0xfbfe73a8>
    74a4:	40c00217 	ldw	r3,8(r8)
    74a8:	40800317 	ldw	r2,12(r8)
    74ac:	81bfff04 	addi	r6,r16,-4
    74b0:	01000904 	movi	r4,36
    74b4:	18800315 	stw	r2,12(r3)
    74b8:	10c00215 	stw	r3,8(r2)
    74bc:	99400217 	ldw	r5,8(r19)
    74c0:	98c00317 	ldw	r3,12(r19)
    74c4:	9c400204 	addi	r17,r19,8
    74c8:	28c00315 	stw	r3,12(r5)
    74cc:	19400215 	stw	r5,8(r3)
    74d0:	21802d36 	bltu	r4,r6,7588 <_realloc_r+0x340>
    74d4:	008004c4 	movi	r2,19
    74d8:	1180352e 	bgeu	r2,r6,75b0 <_realloc_r+0x368>
    74dc:	a0800017 	ldw	r2,0(r20)
    74e0:	98800215 	stw	r2,8(r19)
    74e4:	a0800117 	ldw	r2,4(r20)
    74e8:	98800315 	stw	r2,12(r19)
    74ec:	008006c4 	movi	r2,27
    74f0:	11808036 	bltu	r2,r6,76f4 <_realloc_r+0x4ac>
    74f4:	98c00404 	addi	r3,r19,16
    74f8:	a5000204 	addi	r20,r20,8
    74fc:	00002d06 	br	75b4 <_realloc_r+0x36c>
    7500:	1d86b03a 	or	r3,r3,r22
    7504:	ad8b883a 	add	r5,r21,r22
    7508:	a8c00115 	stw	r3,4(r21)
    750c:	38800054 	ori	r2,r7,1
    7510:	28800115 	stw	r2,4(r5)
    7514:	29cf883a 	add	r7,r5,r7
    7518:	38800117 	ldw	r2,4(r7)
    751c:	9009883a 	mov	r4,r18
    7520:	29400204 	addi	r5,r5,8
    7524:	10800054 	ori	r2,r2,1
    7528:	38800115 	stw	r2,4(r7)
    752c:	0004b800 	call	4b80 <_free_r>
    7530:	003f8706 	br	7350 <__alt_mem_onchip_memory2_0+0xfbfe7350>
    7534:	300b883a 	mov	r5,r6
    7538:	dfc00917 	ldw	ra,36(sp)
    753c:	df000817 	ldw	fp,32(sp)
    7540:	ddc00717 	ldw	r23,28(sp)
    7544:	dd800617 	ldw	r22,24(sp)
    7548:	dd400517 	ldw	r21,20(sp)
    754c:	dd000417 	ldw	r20,16(sp)
    7550:	dcc00317 	ldw	r19,12(sp)
    7554:	dc800217 	ldw	r18,8(sp)
    7558:	dc400117 	ldw	r17,4(sp)
    755c:	dc000017 	ldw	r16,0(sp)
    7560:	dec00a04 	addi	sp,sp,40
    7564:	00057501 	jmpi	5750 <_malloc_r>
    7568:	98800317 	ldw	r2,12(r19)
    756c:	98c00217 	ldw	r3,8(r19)
    7570:	81bfff04 	addi	r6,r16,-4
    7574:	01000904 	movi	r4,36
    7578:	18800315 	stw	r2,12(r3)
    757c:	10c00215 	stw	r3,8(r2)
    7580:	9c400204 	addi	r17,r19,8
    7584:	21bfd32e 	bgeu	r4,r6,74d4 <__alt_mem_onchip_memory2_0+0xfbfe74d4>
    7588:	8809883a 	mov	r4,r17
    758c:	a00b883a 	mov	r5,r20
    7590:	0005fe00 	call	5fe0 <memmove>
    7594:	98c00117 	ldw	r3,4(r19)
    7598:	b821883a 	mov	r16,r23
    759c:	982b883a 	mov	r21,r19
    75a0:	003f6106 	br	7328 <__alt_mem_onchip_memory2_0+0xfbfe7328>
    75a4:	8805883a 	mov	r2,r17
    75a8:	a007883a 	mov	r3,r20
    75ac:	003f9906 	br	7414 <__alt_mem_onchip_memory2_0+0xfbfe7414>
    75b0:	8807883a 	mov	r3,r17
    75b4:	a0800017 	ldw	r2,0(r20)
    75b8:	b821883a 	mov	r16,r23
    75bc:	982b883a 	mov	r21,r19
    75c0:	18800015 	stw	r2,0(r3)
    75c4:	a0800117 	ldw	r2,4(r20)
    75c8:	18800115 	stw	r2,4(r3)
    75cc:	a0800217 	ldw	r2,8(r20)
    75d0:	18800215 	stw	r2,8(r3)
    75d4:	98c00117 	ldw	r3,4(r19)
    75d8:	003f5306 	br	7328 <__alt_mem_onchip_memory2_0+0xfbfe7328>
    75dc:	adab883a 	add	r21,r21,r22
    75e0:	3585c83a 	sub	r2,r6,r22
    75e4:	e5400215 	stw	r21,8(fp)
    75e8:	10800054 	ori	r2,r2,1
    75ec:	a8800115 	stw	r2,4(r21)
    75f0:	a0bfff17 	ldw	r2,-4(r20)
    75f4:	9009883a 	mov	r4,r18
    75f8:	1080004c 	andi	r2,r2,1
    75fc:	b0acb03a 	or	r22,r22,r2
    7600:	a5bfff15 	stw	r22,-4(r20)
    7604:	000d0700 	call	d070 <__malloc_unlock>
    7608:	a005883a 	mov	r2,r20
    760c:	003f5306 	br	735c <__alt_mem_onchip_memory2_0+0xfbfe735c>
    7610:	8809883a 	mov	r4,r17
    7614:	a00b883a 	mov	r5,r20
    7618:	0005fe00 	call	5fe0 <memmove>
    761c:	003f8306 	br	742c <__alt_mem_onchip_memory2_0+0xfbfe742c>
    7620:	b0800404 	addi	r2,r22,16
    7624:	b8bf6016 	blt	r23,r2,73a8 <__alt_mem_onchip_memory2_0+0xfbfe73a8>
    7628:	98800317 	ldw	r2,12(r19)
    762c:	98c00217 	ldw	r3,8(r19)
    7630:	81bfff04 	addi	r6,r16,-4
    7634:	01000904 	movi	r4,36
    7638:	18800315 	stw	r2,12(r3)
    763c:	10c00215 	stw	r3,8(r2)
    7640:	9c400204 	addi	r17,r19,8
    7644:	21804336 	bltu	r4,r6,7754 <_realloc_r+0x50c>
    7648:	008004c4 	movi	r2,19
    764c:	11803f2e 	bgeu	r2,r6,774c <_realloc_r+0x504>
    7650:	a0800017 	ldw	r2,0(r20)
    7654:	98800215 	stw	r2,8(r19)
    7658:	a0800117 	ldw	r2,4(r20)
    765c:	98800315 	stw	r2,12(r19)
    7660:	008006c4 	movi	r2,27
    7664:	11803f36 	bltu	r2,r6,7764 <_realloc_r+0x51c>
    7668:	98800404 	addi	r2,r19,16
    766c:	a5000204 	addi	r20,r20,8
    7670:	a0c00017 	ldw	r3,0(r20)
    7674:	10c00015 	stw	r3,0(r2)
    7678:	a0c00117 	ldw	r3,4(r20)
    767c:	10c00115 	stw	r3,4(r2)
    7680:	a0c00217 	ldw	r3,8(r20)
    7684:	10c00215 	stw	r3,8(r2)
    7688:	9d87883a 	add	r3,r19,r22
    768c:	bd85c83a 	sub	r2,r23,r22
    7690:	e0c00215 	stw	r3,8(fp)
    7694:	10800054 	ori	r2,r2,1
    7698:	18800115 	stw	r2,4(r3)
    769c:	98800117 	ldw	r2,4(r19)
    76a0:	9009883a 	mov	r4,r18
    76a4:	1080004c 	andi	r2,r2,1
    76a8:	b0acb03a 	or	r22,r22,r2
    76ac:	9d800115 	stw	r22,4(r19)
    76b0:	000d0700 	call	d070 <__malloc_unlock>
    76b4:	8805883a 	mov	r2,r17
    76b8:	003f2806 	br	735c <__alt_mem_onchip_memory2_0+0xfbfe735c>
    76bc:	a0c00217 	ldw	r3,8(r20)
    76c0:	88c00215 	stw	r3,8(r17)
    76c4:	a0c00317 	ldw	r3,12(r20)
    76c8:	88c00315 	stw	r3,12(r17)
    76cc:	30801126 	beq	r6,r2,7714 <_realloc_r+0x4cc>
    76d0:	88800404 	addi	r2,r17,16
    76d4:	a0c00404 	addi	r3,r20,16
    76d8:	003f4e06 	br	7414 <__alt_mem_onchip_memory2_0+0xfbfe7414>
    76dc:	893fff17 	ldw	r4,-4(r17)
    76e0:	00bfff04 	movi	r2,-4
    76e4:	a023883a 	mov	r17,r20
    76e8:	2084703a 	and	r2,r4,r2
    76ec:	80a1883a 	add	r16,r16,r2
    76f0:	003f0d06 	br	7328 <__alt_mem_onchip_memory2_0+0xfbfe7328>
    76f4:	a0800217 	ldw	r2,8(r20)
    76f8:	98800415 	stw	r2,16(r19)
    76fc:	a0800317 	ldw	r2,12(r20)
    7700:	98800515 	stw	r2,20(r19)
    7704:	31000a26 	beq	r6,r4,7730 <_realloc_r+0x4e8>
    7708:	98c00604 	addi	r3,r19,24
    770c:	a5000404 	addi	r20,r20,16
    7710:	003fa806 	br	75b4 <__alt_mem_onchip_memory2_0+0xfbfe75b4>
    7714:	a1000417 	ldw	r4,16(r20)
    7718:	88800604 	addi	r2,r17,24
    771c:	a0c00604 	addi	r3,r20,24
    7720:	89000415 	stw	r4,16(r17)
    7724:	a1000517 	ldw	r4,20(r20)
    7728:	89000515 	stw	r4,20(r17)
    772c:	003f3906 	br	7414 <__alt_mem_onchip_memory2_0+0xfbfe7414>
    7730:	a0800417 	ldw	r2,16(r20)
    7734:	a5000604 	addi	r20,r20,24
    7738:	98c00804 	addi	r3,r19,32
    773c:	98800615 	stw	r2,24(r19)
    7740:	a0bfff17 	ldw	r2,-4(r20)
    7744:	98800715 	stw	r2,28(r19)
    7748:	003f9a06 	br	75b4 <__alt_mem_onchip_memory2_0+0xfbfe75b4>
    774c:	8805883a 	mov	r2,r17
    7750:	003fc706 	br	7670 <__alt_mem_onchip_memory2_0+0xfbfe7670>
    7754:	8809883a 	mov	r4,r17
    7758:	a00b883a 	mov	r5,r20
    775c:	0005fe00 	call	5fe0 <memmove>
    7760:	003fc906 	br	7688 <__alt_mem_onchip_memory2_0+0xfbfe7688>
    7764:	a0800217 	ldw	r2,8(r20)
    7768:	98800415 	stw	r2,16(r19)
    776c:	a0800317 	ldw	r2,12(r20)
    7770:	98800515 	stw	r2,20(r19)
    7774:	31000726 	beq	r6,r4,7794 <_realloc_r+0x54c>
    7778:	98800604 	addi	r2,r19,24
    777c:	a5000404 	addi	r20,r20,16
    7780:	003fbb06 	br	7670 <__alt_mem_onchip_memory2_0+0xfbfe7670>
    7784:	9009883a 	mov	r4,r18
    7788:	000d0700 	call	d070 <__malloc_unlock>
    778c:	0005883a 	mov	r2,zero
    7790:	003ef206 	br	735c <__alt_mem_onchip_memory2_0+0xfbfe735c>
    7794:	a0c00417 	ldw	r3,16(r20)
    7798:	a5000604 	addi	r20,r20,24
    779c:	98800804 	addi	r2,r19,32
    77a0:	98c00615 	stw	r3,24(r19)
    77a4:	a0ffff17 	ldw	r3,-4(r20)
    77a8:	98c00715 	stw	r3,28(r19)
    77ac:	003fb006 	br	7670 <__alt_mem_onchip_memory2_0+0xfbfe7670>

000077b0 <__fpclassifyd>:
    77b0:	00a00034 	movhi	r2,32768
    77b4:	10bfffc4 	addi	r2,r2,-1
    77b8:	2884703a 	and	r2,r5,r2
    77bc:	10000726 	beq	r2,zero,77dc <__fpclassifyd+0x2c>
    77c0:	00fffc34 	movhi	r3,65520
    77c4:	019ff834 	movhi	r6,32736
    77c8:	28c7883a 	add	r3,r5,r3
    77cc:	31bfffc4 	addi	r6,r6,-1
    77d0:	30c00536 	bltu	r6,r3,77e8 <__fpclassifyd+0x38>
    77d4:	00800104 	movi	r2,4
    77d8:	f800283a 	ret
    77dc:	2000021e 	bne	r4,zero,77e8 <__fpclassifyd+0x38>
    77e0:	00800084 	movi	r2,2
    77e4:	f800283a 	ret
    77e8:	00dffc34 	movhi	r3,32752
    77ec:	019ff834 	movhi	r6,32736
    77f0:	28cb883a 	add	r5,r5,r3
    77f4:	31bfffc4 	addi	r6,r6,-1
    77f8:	317ff62e 	bgeu	r6,r5,77d4 <__alt_mem_onchip_memory2_0+0xfbfe77d4>
    77fc:	01400434 	movhi	r5,16
    7800:	297fffc4 	addi	r5,r5,-1
    7804:	28800236 	bltu	r5,r2,7810 <__fpclassifyd+0x60>
    7808:	008000c4 	movi	r2,3
    780c:	f800283a 	ret
    7810:	10c00226 	beq	r2,r3,781c <__fpclassifyd+0x6c>
    7814:	0005883a 	mov	r2,zero
    7818:	f800283a 	ret
    781c:	2005003a 	cmpeq	r2,r4,zero
    7820:	f800283a 	ret

00007824 <_sbrk_r>:
    7824:	defffd04 	addi	sp,sp,-12
    7828:	dc000015 	stw	r16,0(sp)
    782c:	04000074 	movhi	r16,1
    7830:	dc400115 	stw	r17,4(sp)
    7834:	840e2604 	addi	r16,r16,14488
    7838:	2023883a 	mov	r17,r4
    783c:	2809883a 	mov	r4,r5
    7840:	dfc00215 	stw	ra,8(sp)
    7844:	80000015 	stw	zero,0(r16)
    7848:	000d23c0 	call	d23c <sbrk>
    784c:	00ffffc4 	movi	r3,-1
    7850:	10c00526 	beq	r2,r3,7868 <_sbrk_r+0x44>
    7854:	dfc00217 	ldw	ra,8(sp)
    7858:	dc400117 	ldw	r17,4(sp)
    785c:	dc000017 	ldw	r16,0(sp)
    7860:	dec00304 	addi	sp,sp,12
    7864:	f800283a 	ret
    7868:	80c00017 	ldw	r3,0(r16)
    786c:	183ff926 	beq	r3,zero,7854 <__alt_mem_onchip_memory2_0+0xfbfe7854>
    7870:	88c00015 	stw	r3,0(r17)
    7874:	003ff706 	br	7854 <__alt_mem_onchip_memory2_0+0xfbfe7854>

00007878 <__sread>:
    7878:	defffe04 	addi	sp,sp,-8
    787c:	dc000015 	stw	r16,0(sp)
    7880:	2821883a 	mov	r16,r5
    7884:	2940038f 	ldh	r5,14(r5)
    7888:	dfc00115 	stw	ra,4(sp)
    788c:	00095d00 	call	95d0 <_read_r>
    7890:	10000716 	blt	r2,zero,78b0 <__sread+0x38>
    7894:	80c01417 	ldw	r3,80(r16)
    7898:	1887883a 	add	r3,r3,r2
    789c:	80c01415 	stw	r3,80(r16)
    78a0:	dfc00117 	ldw	ra,4(sp)
    78a4:	dc000017 	ldw	r16,0(sp)
    78a8:	dec00204 	addi	sp,sp,8
    78ac:	f800283a 	ret
    78b0:	80c0030b 	ldhu	r3,12(r16)
    78b4:	18fbffcc 	andi	r3,r3,61439
    78b8:	80c0030d 	sth	r3,12(r16)
    78bc:	dfc00117 	ldw	ra,4(sp)
    78c0:	dc000017 	ldw	r16,0(sp)
    78c4:	dec00204 	addi	sp,sp,8
    78c8:	f800283a 	ret

000078cc <__seofread>:
    78cc:	0005883a 	mov	r2,zero
    78d0:	f800283a 	ret

000078d4 <__swrite>:
    78d4:	2880030b 	ldhu	r2,12(r5)
    78d8:	defffb04 	addi	sp,sp,-20
    78dc:	dcc00315 	stw	r19,12(sp)
    78e0:	dc800215 	stw	r18,8(sp)
    78e4:	dc400115 	stw	r17,4(sp)
    78e8:	dc000015 	stw	r16,0(sp)
    78ec:	dfc00415 	stw	ra,16(sp)
    78f0:	10c0400c 	andi	r3,r2,256
    78f4:	2821883a 	mov	r16,r5
    78f8:	2027883a 	mov	r19,r4
    78fc:	3025883a 	mov	r18,r6
    7900:	3823883a 	mov	r17,r7
    7904:	18000526 	beq	r3,zero,791c <__swrite+0x48>
    7908:	2940038f 	ldh	r5,14(r5)
    790c:	000d883a 	mov	r6,zero
    7910:	01c00084 	movi	r7,2
    7914:	00095740 	call	9574 <_lseek_r>
    7918:	8080030b 	ldhu	r2,12(r16)
    791c:	8140038f 	ldh	r5,14(r16)
    7920:	10bbffcc 	andi	r2,r2,61439
    7924:	9809883a 	mov	r4,r19
    7928:	900d883a 	mov	r6,r18
    792c:	880f883a 	mov	r7,r17
    7930:	8080030d 	sth	r2,12(r16)
    7934:	dfc00417 	ldw	ra,16(sp)
    7938:	dcc00317 	ldw	r19,12(sp)
    793c:	dc800217 	ldw	r18,8(sp)
    7940:	dc400117 	ldw	r17,4(sp)
    7944:	dc000017 	ldw	r16,0(sp)
    7948:	dec00504 	addi	sp,sp,20
    794c:	00090701 	jmpi	9070 <_write_r>

00007950 <__sseek>:
    7950:	defffe04 	addi	sp,sp,-8
    7954:	dc000015 	stw	r16,0(sp)
    7958:	2821883a 	mov	r16,r5
    795c:	2940038f 	ldh	r5,14(r5)
    7960:	dfc00115 	stw	ra,4(sp)
    7964:	00095740 	call	9574 <_lseek_r>
    7968:	00ffffc4 	movi	r3,-1
    796c:	10c00826 	beq	r2,r3,7990 <__sseek+0x40>
    7970:	80c0030b 	ldhu	r3,12(r16)
    7974:	80801415 	stw	r2,80(r16)
    7978:	18c40014 	ori	r3,r3,4096
    797c:	80c0030d 	sth	r3,12(r16)
    7980:	dfc00117 	ldw	ra,4(sp)
    7984:	dc000017 	ldw	r16,0(sp)
    7988:	dec00204 	addi	sp,sp,8
    798c:	f800283a 	ret
    7990:	80c0030b 	ldhu	r3,12(r16)
    7994:	18fbffcc 	andi	r3,r3,61439
    7998:	80c0030d 	sth	r3,12(r16)
    799c:	dfc00117 	ldw	ra,4(sp)
    79a0:	dc000017 	ldw	r16,0(sp)
    79a4:	dec00204 	addi	sp,sp,8
    79a8:	f800283a 	ret

000079ac <__sclose>:
    79ac:	2940038f 	ldh	r5,14(r5)
    79b0:	00090cc1 	jmpi	90cc <_close_r>

000079b4 <strcmp>:
    79b4:	2144b03a 	or	r2,r4,r5
    79b8:	108000cc 	andi	r2,r2,3
    79bc:	1000171e 	bne	r2,zero,7a1c <strcmp+0x68>
    79c0:	20800017 	ldw	r2,0(r4)
    79c4:	28c00017 	ldw	r3,0(r5)
    79c8:	10c0141e 	bne	r2,r3,7a1c <strcmp+0x68>
    79cc:	027fbff4 	movhi	r9,65279
    79d0:	4a7fbfc4 	addi	r9,r9,-257
    79d4:	0086303a 	nor	r3,zero,r2
    79d8:	02202074 	movhi	r8,32897
    79dc:	1245883a 	add	r2,r2,r9
    79e0:	42202004 	addi	r8,r8,-32640
    79e4:	10c4703a 	and	r2,r2,r3
    79e8:	1204703a 	and	r2,r2,r8
    79ec:	10000226 	beq	r2,zero,79f8 <strcmp+0x44>
    79f0:	00001706 	br	7a50 <strcmp+0x9c>
    79f4:	1000161e 	bne	r2,zero,7a50 <strcmp+0x9c>
    79f8:	21000104 	addi	r4,r4,4
    79fc:	20c00017 	ldw	r3,0(r4)
    7a00:	29400104 	addi	r5,r5,4
    7a04:	29800017 	ldw	r6,0(r5)
    7a08:	1a4f883a 	add	r7,r3,r9
    7a0c:	00c4303a 	nor	r2,zero,r3
    7a10:	3884703a 	and	r2,r7,r2
    7a14:	1204703a 	and	r2,r2,r8
    7a18:	19bff626 	beq	r3,r6,79f4 <__alt_mem_onchip_memory2_0+0xfbfe79f4>
    7a1c:	20800007 	ldb	r2,0(r4)
    7a20:	1000051e 	bne	r2,zero,7a38 <strcmp+0x84>
    7a24:	00000606 	br	7a40 <strcmp+0x8c>
    7a28:	21000044 	addi	r4,r4,1
    7a2c:	20800007 	ldb	r2,0(r4)
    7a30:	29400044 	addi	r5,r5,1
    7a34:	10000226 	beq	r2,zero,7a40 <strcmp+0x8c>
    7a38:	28c00007 	ldb	r3,0(r5)
    7a3c:	10fffa26 	beq	r2,r3,7a28 <__alt_mem_onchip_memory2_0+0xfbfe7a28>
    7a40:	20800003 	ldbu	r2,0(r4)
    7a44:	28c00003 	ldbu	r3,0(r5)
    7a48:	10c5c83a 	sub	r2,r2,r3
    7a4c:	f800283a 	ret
    7a50:	0005883a 	mov	r2,zero
    7a54:	f800283a 	ret

00007a58 <__sprint_r.part.0>:
    7a58:	28801917 	ldw	r2,100(r5)
    7a5c:	defff604 	addi	sp,sp,-40
    7a60:	dd400515 	stw	r21,20(sp)
    7a64:	dcc00315 	stw	r19,12(sp)
    7a68:	dfc00915 	stw	ra,36(sp)
    7a6c:	df000815 	stw	fp,32(sp)
    7a70:	ddc00715 	stw	r23,28(sp)
    7a74:	dd800615 	stw	r22,24(sp)
    7a78:	dd000415 	stw	r20,16(sp)
    7a7c:	dc800215 	stw	r18,8(sp)
    7a80:	dc400115 	stw	r17,4(sp)
    7a84:	dc000015 	stw	r16,0(sp)
    7a88:	1088000c 	andi	r2,r2,8192
    7a8c:	2827883a 	mov	r19,r5
    7a90:	302b883a 	mov	r21,r6
    7a94:	10002d26 	beq	r2,zero,7b4c <__sprint_r.part.0+0xf4>
    7a98:	30800217 	ldw	r2,8(r6)
    7a9c:	35800017 	ldw	r22,0(r6)
    7aa0:	10002826 	beq	r2,zero,7b44 <__sprint_r.part.0+0xec>
    7aa4:	2029883a 	mov	r20,r4
    7aa8:	b5c00104 	addi	r23,r22,4
    7aac:	04bfffc4 	movi	r18,-1
    7ab0:	bc400017 	ldw	r17,0(r23)
    7ab4:	b4000017 	ldw	r16,0(r22)
    7ab8:	0039883a 	mov	fp,zero
    7abc:	8822d0ba 	srli	r17,r17,2
    7ac0:	04400316 	blt	zero,r17,7ad0 <__sprint_r.part.0+0x78>
    7ac4:	00001806 	br	7b28 <__sprint_r.part.0+0xd0>
    7ac8:	84000104 	addi	r16,r16,4
    7acc:	8f001526 	beq	r17,fp,7b24 <__sprint_r.part.0+0xcc>
    7ad0:	81400017 	ldw	r5,0(r16)
    7ad4:	a009883a 	mov	r4,r20
    7ad8:	980d883a 	mov	r6,r19
    7adc:	00092e80 	call	92e8 <_fputwc_r>
    7ae0:	e7000044 	addi	fp,fp,1
    7ae4:	14bff81e 	bne	r2,r18,7ac8 <__alt_mem_onchip_memory2_0+0xfbfe7ac8>
    7ae8:	9005883a 	mov	r2,r18
    7aec:	a8000215 	stw	zero,8(r21)
    7af0:	a8000115 	stw	zero,4(r21)
    7af4:	dfc00917 	ldw	ra,36(sp)
    7af8:	df000817 	ldw	fp,32(sp)
    7afc:	ddc00717 	ldw	r23,28(sp)
    7b00:	dd800617 	ldw	r22,24(sp)
    7b04:	dd400517 	ldw	r21,20(sp)
    7b08:	dd000417 	ldw	r20,16(sp)
    7b0c:	dcc00317 	ldw	r19,12(sp)
    7b10:	dc800217 	ldw	r18,8(sp)
    7b14:	dc400117 	ldw	r17,4(sp)
    7b18:	dc000017 	ldw	r16,0(sp)
    7b1c:	dec00a04 	addi	sp,sp,40
    7b20:	f800283a 	ret
    7b24:	a8800217 	ldw	r2,8(r21)
    7b28:	8c63883a 	add	r17,r17,r17
    7b2c:	8c63883a 	add	r17,r17,r17
    7b30:	1445c83a 	sub	r2,r2,r17
    7b34:	a8800215 	stw	r2,8(r21)
    7b38:	b5800204 	addi	r22,r22,8
    7b3c:	bdc00204 	addi	r23,r23,8
    7b40:	103fdb1e 	bne	r2,zero,7ab0 <__alt_mem_onchip_memory2_0+0xfbfe7ab0>
    7b44:	0005883a 	mov	r2,zero
    7b48:	003fe806 	br	7aec <__alt_mem_onchip_memory2_0+0xfbfe7aec>
    7b4c:	0004e700 	call	4e70 <__sfvwrite_r>
    7b50:	003fe606 	br	7aec <__alt_mem_onchip_memory2_0+0xfbfe7aec>

00007b54 <__sprint_r>:
    7b54:	30c00217 	ldw	r3,8(r6)
    7b58:	18000126 	beq	r3,zero,7b60 <__sprint_r+0xc>
    7b5c:	0007a581 	jmpi	7a58 <__sprint_r.part.0>
    7b60:	30000115 	stw	zero,4(r6)
    7b64:	0005883a 	mov	r2,zero
    7b68:	f800283a 	ret

00007b6c <___vfiprintf_internal_r>:
    7b6c:	deffca04 	addi	sp,sp,-216
    7b70:	dd803215 	stw	r22,200(sp)
    7b74:	dd403115 	stw	r21,196(sp)
    7b78:	dfc03515 	stw	ra,212(sp)
    7b7c:	df003415 	stw	fp,208(sp)
    7b80:	ddc03315 	stw	r23,204(sp)
    7b84:	dd003015 	stw	r20,192(sp)
    7b88:	dcc02f15 	stw	r19,188(sp)
    7b8c:	dc802e15 	stw	r18,184(sp)
    7b90:	dc402d15 	stw	r17,180(sp)
    7b94:	dc002c15 	stw	r16,176(sp)
    7b98:	d9002015 	stw	r4,128(sp)
    7b9c:	d9c02215 	stw	r7,136(sp)
    7ba0:	282b883a 	mov	r21,r5
    7ba4:	302d883a 	mov	r22,r6
    7ba8:	20000226 	beq	r4,zero,7bb4 <___vfiprintf_internal_r+0x48>
    7bac:	20800e17 	ldw	r2,56(r4)
    7bb0:	1001b126 	beq	r2,zero,8278 <___vfiprintf_internal_r+0x70c>
    7bb4:	a880030b 	ldhu	r2,12(r21)
    7bb8:	10c8000c 	andi	r3,r2,8192
    7bbc:	1800061e 	bne	r3,zero,7bd8 <___vfiprintf_internal_r+0x6c>
    7bc0:	a9001917 	ldw	r4,100(r21)
    7bc4:	00f7ffc4 	movi	r3,-8193
    7bc8:	10880014 	ori	r2,r2,8192
    7bcc:	20c6703a 	and	r3,r4,r3
    7bd0:	a880030d 	sth	r2,12(r21)
    7bd4:	a8c01915 	stw	r3,100(r21)
    7bd8:	10c0020c 	andi	r3,r2,8
    7bdc:	18018926 	beq	r3,zero,8204 <___vfiprintf_internal_r+0x698>
    7be0:	a8c00417 	ldw	r3,16(r21)
    7be4:	18018726 	beq	r3,zero,8204 <___vfiprintf_internal_r+0x698>
    7be8:	1080068c 	andi	r2,r2,26
    7bec:	00c00284 	movi	r3,10
    7bf0:	10c18c26 	beq	r2,r3,8224 <___vfiprintf_internal_r+0x6b8>
    7bf4:	d8801a04 	addi	r2,sp,104
    7bf8:	d8c019c4 	addi	r3,sp,103
    7bfc:	07000074 	movhi	fp,1
    7c00:	05c00074 	movhi	r23,1
    7c04:	10c9c83a 	sub	r4,r2,r3
    7c08:	e7000c04 	addi	fp,fp,48
    7c0c:	bdc00804 	addi	r23,r23,32
    7c10:	d8801e15 	stw	r2,120(sp)
    7c14:	d8c01f15 	stw	r3,124(sp)
    7c18:	dec01a15 	stw	sp,104(sp)
    7c1c:	d8001c15 	stw	zero,112(sp)
    7c20:	d8001b15 	stw	zero,108(sp)
    7c24:	d8002615 	stw	zero,152(sp)
    7c28:	d8002315 	stw	zero,140(sp)
    7c2c:	d9002715 	stw	r4,156(sp)
    7c30:	d811883a 	mov	r8,sp
    7c34:	dd402115 	stw	r21,132(sp)
    7c38:	b021883a 	mov	r16,r22
    7c3c:	80800007 	ldb	r2,0(r16)
    7c40:	10037226 	beq	r2,zero,8a0c <___vfiprintf_internal_r+0xea0>
    7c44:	01000944 	movi	r4,37
    7c48:	11037026 	beq	r2,r4,8a0c <___vfiprintf_internal_r+0xea0>
    7c4c:	8005883a 	mov	r2,r16
    7c50:	00000106 	br	7c58 <___vfiprintf_internal_r+0xec>
    7c54:	19000326 	beq	r3,r4,7c64 <___vfiprintf_internal_r+0xf8>
    7c58:	10800044 	addi	r2,r2,1
    7c5c:	10c00007 	ldb	r3,0(r2)
    7c60:	183ffc1e 	bne	r3,zero,7c54 <__alt_mem_onchip_memory2_0+0xfbfe7c54>
    7c64:	1425c83a 	sub	r18,r2,r16
    7c68:	1023883a 	mov	r17,r2
    7c6c:	90001026 	beq	r18,zero,7cb0 <___vfiprintf_internal_r+0x144>
    7c70:	d8c01c17 	ldw	r3,112(sp)
    7c74:	d8801b17 	ldw	r2,108(sp)
    7c78:	44000015 	stw	r16,0(r8)
    7c7c:	90c7883a 	add	r3,r18,r3
    7c80:	10800044 	addi	r2,r2,1
    7c84:	44800115 	stw	r18,4(r8)
    7c88:	d8c01c15 	stw	r3,112(sp)
    7c8c:	d8801b15 	stw	r2,108(sp)
    7c90:	010001c4 	movi	r4,7
    7c94:	2080750e 	bge	r4,r2,7e6c <___vfiprintf_internal_r+0x300>
    7c98:	18036f1e 	bne	r3,zero,8a58 <___vfiprintf_internal_r+0xeec>
    7c9c:	d8802317 	ldw	r2,140(sp)
    7ca0:	d8001b15 	stw	zero,108(sp)
    7ca4:	d811883a 	mov	r8,sp
    7ca8:	1485883a 	add	r2,r2,r18
    7cac:	d8802315 	stw	r2,140(sp)
    7cb0:	88800007 	ldb	r2,0(r17)
    7cb4:	10041026 	beq	r2,zero,8cf8 <___vfiprintf_internal_r+0x118c>
    7cb8:	88c00047 	ldb	r3,1(r17)
    7cbc:	88800044 	addi	r2,r17,1
    7cc0:	d8001d85 	stb	zero,118(sp)
    7cc4:	000f883a 	mov	r7,zero
    7cc8:	027fffc4 	movi	r9,-1
    7ccc:	0025883a 	mov	r18,zero
    7cd0:	002b883a 	mov	r21,zero
    7cd4:	01401604 	movi	r5,88
    7cd8:	01800244 	movi	r6,9
    7cdc:	03400a84 	movi	r13,42
    7ce0:	03001b04 	movi	r12,108
    7ce4:	14000044 	addi	r16,r2,1
    7ce8:	18bff804 	addi	r2,r3,-32
    7cec:	28825536 	bltu	r5,r2,8644 <___vfiprintf_internal_r+0xad8>
    7cf0:	100490ba 	slli	r2,r2,2
    7cf4:	01000034 	movhi	r4,0
    7cf8:	211f4204 	addi	r4,r4,32008
    7cfc:	1105883a 	add	r2,r2,r4
    7d00:	10800017 	ldw	r2,0(r2)
    7d04:	1000683a 	jmp	r2
    7d08:	00008408 	cmpgei	zero,zero,528
    7d0c:	00008644 	movi	zero,537
    7d10:	00008644 	movi	zero,537
    7d14:	00008428 	cmpgeui	zero,zero,528
    7d18:	00008644 	movi	zero,537
    7d1c:	00008644 	movi	zero,537
    7d20:	00008644 	movi	zero,537
    7d24:	00008644 	movi	zero,537
    7d28:	00008644 	movi	zero,537
    7d2c:	00008644 	movi	zero,537
    7d30:	00008438 	rdprs	zero,zero,528
    7d34:	00008458 	cmpnei	zero,zero,529
    7d38:	00008644 	movi	zero,537
    7d3c:	00008280 	call	828 <_puts_r>
    7d40:	0000836c 	andhi	zero,zero,525
    7d44:	00008644 	movi	zero,537
    7d48:	000082ec 	andhi	zero,zero,523
    7d4c:	000082fc 	xorhi	zero,zero,523
    7d50:	000082fc 	xorhi	zero,zero,523
    7d54:	000082fc 	xorhi	zero,zero,523
    7d58:	000082fc 	xorhi	zero,zero,523
    7d5c:	000082fc 	xorhi	zero,zero,523
    7d60:	000082fc 	xorhi	zero,zero,523
    7d64:	000082fc 	xorhi	zero,zero,523
    7d68:	000082fc 	xorhi	zero,zero,523
    7d6c:	000082fc 	xorhi	zero,zero,523
    7d70:	00008644 	movi	zero,537
    7d74:	00008644 	movi	zero,537
    7d78:	00008644 	movi	zero,537
    7d7c:	00008644 	movi	zero,537
    7d80:	00008644 	movi	zero,537
    7d84:	00008644 	movi	zero,537
    7d88:	00008644 	movi	zero,537
    7d8c:	00008644 	movi	zero,537
    7d90:	00008644 	movi	zero,537
    7d94:	00008644 	movi	zero,537
    7d98:	00008328 	cmpgeui	zero,zero,524
    7d9c:	00008644 	movi	zero,537
    7da0:	00008644 	movi	zero,537
    7da4:	00008644 	movi	zero,537
    7da8:	00008644 	movi	zero,537
    7dac:	00008644 	movi	zero,537
    7db0:	00008644 	movi	zero,537
    7db4:	00008644 	movi	zero,537
    7db8:	00008644 	movi	zero,537
    7dbc:	00008644 	movi	zero,537
    7dc0:	00008644 	movi	zero,537
    7dc4:	00007eb4 	movhi	zero,506
    7dc8:	00008644 	movi	zero,537
    7dcc:	00008644 	movi	zero,537
    7dd0:	00008644 	movi	zero,537
    7dd4:	00008644 	movi	zero,537
    7dd8:	00008644 	movi	zero,537
    7ddc:	00007e80 	call	7e8 <printf+0x1c>
    7de0:	00008644 	movi	zero,537
    7de4:	00008644 	movi	zero,537
    7de8:	000084c8 	cmpgei	zero,zero,531
    7dec:	00008644 	movi	zero,537
    7df0:	00008644 	movi	zero,537
    7df4:	00008644 	movi	zero,537
    7df8:	00008644 	movi	zero,537
    7dfc:	00008644 	movi	zero,537
    7e00:	00008644 	movi	zero,537
    7e04:	00008644 	movi	zero,537
    7e08:	00008644 	movi	zero,537
    7e0c:	00008644 	movi	zero,537
    7e10:	00008644 	movi	zero,537
    7e14:	00008468 	cmpgeui	zero,zero,529
    7e18:	00008494 	movui	zero,530
    7e1c:	00008644 	movi	zero,537
    7e20:	00008644 	movi	zero,537
    7e24:	00008644 	movi	zero,537
    7e28:	00008570 	cmpltui	zero,zero,533
    7e2c:	00008494 	movui	zero,530
    7e30:	00008644 	movi	zero,537
    7e34:	00008644 	movi	zero,537
    7e38:	00008580 	call	858 <_puts_r+0x30>
    7e3c:	00008644 	movi	zero,537
    7e40:	000083ac 	andhi	zero,zero,526
    7e44:	00007eb8 	rdprs	zero,zero,506
    7e48:	00008594 	movui	zero,534
    7e4c:	000085d4 	movui	zero,535
    7e50:	00008644 	movi	zero,537
    7e54:	0000851c 	xori	zero,zero,532
    7e58:	00008644 	movi	zero,537
    7e5c:	00007e84 	movi	zero,506
    7e60:	00008644 	movi	zero,537
    7e64:	00008644 	movi	zero,537
    7e68:	000085e4 	muli	zero,zero,535
    7e6c:	42000204 	addi	r8,r8,8
    7e70:	d8802317 	ldw	r2,140(sp)
    7e74:	1485883a 	add	r2,r2,r18
    7e78:	d8802315 	stw	r2,140(sp)
    7e7c:	003f8c06 	br	7cb0 <__alt_mem_onchip_memory2_0+0xfbfe7cb0>
    7e80:	ad400414 	ori	r21,r21,16
    7e84:	a880080c 	andi	r2,r21,32
    7e88:	1001e61e 	bne	r2,zero,8624 <___vfiprintf_internal_r+0xab8>
    7e8c:	a880040c 	andi	r2,r21,16
    7e90:	10034726 	beq	r2,zero,8bb0 <___vfiprintf_internal_r+0x1044>
    7e94:	d8802217 	ldw	r2,136(sp)
    7e98:	001b883a 	mov	r13,zero
    7e9c:	15800017 	ldw	r22,0(r2)
    7ea0:	10800104 	addi	r2,r2,4
    7ea4:	d8802215 	stw	r2,136(sp)
    7ea8:	b009883a 	mov	r4,r22
    7eac:	00800044 	movi	r2,1
    7eb0:	00000c06 	br	7ee4 <___vfiprintf_internal_r+0x378>
    7eb4:	ad400414 	ori	r21,r21,16
    7eb8:	a880080c 	andi	r2,r21,32
    7ebc:	1001491e 	bne	r2,zero,83e4 <___vfiprintf_internal_r+0x878>
    7ec0:	a880040c 	andi	r2,r21,16
    7ec4:	10032d26 	beq	r2,zero,8b7c <___vfiprintf_internal_r+0x1010>
    7ec8:	d9002217 	ldw	r4,136(sp)
    7ecc:	001b883a 	mov	r13,zero
    7ed0:	0005883a 	mov	r2,zero
    7ed4:	25800017 	ldw	r22,0(r4)
    7ed8:	21000104 	addi	r4,r4,4
    7edc:	d9002215 	stw	r4,136(sp)
    7ee0:	b009883a 	mov	r4,r22
    7ee4:	d8001d85 	stb	zero,118(sp)
    7ee8:	4827883a 	mov	r19,r9
    7eec:	001d883a 	mov	r14,zero
    7ef0:	48000216 	blt	r9,zero,7efc <___vfiprintf_internal_r+0x390>
    7ef4:	00ffdfc4 	movi	r3,-129
    7ef8:	a8ea703a 	and	r21,r21,r3
    7efc:	2002071e 	bne	r4,zero,871c <___vfiprintf_internal_r+0xbb0>
    7f00:	4802ad26 	beq	r9,zero,89b8 <___vfiprintf_internal_r+0xe4c>
    7f04:	10803fcc 	andi	r2,r2,255
    7f08:	00c00044 	movi	r3,1
    7f0c:	10c22b26 	beq	r2,r3,87bc <___vfiprintf_internal_r+0xc50>
    7f10:	00c00084 	movi	r3,2
    7f14:	dd001a04 	addi	r20,sp,104
    7f18:	10c0dd1e 	bne	r2,r3,8290 <___vfiprintf_internal_r+0x724>
    7f1c:	d9002617 	ldw	r4,152(sp)
    7f20:	b08003cc 	andi	r2,r22,15
    7f24:	6806973a 	slli	r3,r13,28
    7f28:	2085883a 	add	r2,r4,r2
    7f2c:	b02cd13a 	srli	r22,r22,4
    7f30:	10800003 	ldbu	r2,0(r2)
    7f34:	681ad13a 	srli	r13,r13,4
    7f38:	a53fffc4 	addi	r20,r20,-1
    7f3c:	1dacb03a 	or	r22,r3,r22
    7f40:	a0800005 	stb	r2,0(r20)
    7f44:	b344b03a 	or	r2,r22,r13
    7f48:	103ff51e 	bne	r2,zero,7f20 <__alt_mem_onchip_memory2_0+0xfbfe7f20>
    7f4c:	d9001e17 	ldw	r4,120(sp)
    7f50:	2527c83a 	sub	r19,r4,r20
    7f54:	9823883a 	mov	r17,r19
    7f58:	9a40010e 	bge	r19,r9,7f60 <___vfiprintf_internal_r+0x3f4>
    7f5c:	4823883a 	mov	r17,r9
    7f60:	73803fcc 	andi	r14,r14,255
    7f64:	7380201c 	xori	r14,r14,128
    7f68:	73bfe004 	addi	r14,r14,-128
    7f6c:	70000126 	beq	r14,zero,7f74 <___vfiprintf_internal_r+0x408>
    7f70:	8c400044 	addi	r17,r17,1
    7f74:	ab40008c 	andi	r13,r21,2
    7f78:	68000126 	beq	r13,zero,7f80 <___vfiprintf_internal_r+0x414>
    7f7c:	8c400084 	addi	r17,r17,2
    7f80:	ad80210c 	andi	r22,r21,132
    7f84:	b001c51e 	bne	r22,zero,869c <___vfiprintf_internal_r+0xb30>
    7f88:	9447c83a 	sub	r3,r18,r17
    7f8c:	00c1c30e 	bge	zero,r3,869c <___vfiprintf_internal_r+0xb30>
    7f90:	01c00404 	movi	r7,16
    7f94:	d8801c17 	ldw	r2,112(sp)
    7f98:	38c37b0e 	bge	r7,r3,8d88 <___vfiprintf_internal_r+0x121c>
    7f9c:	01000074 	movhi	r4,1
    7fa0:	21000c04 	addi	r4,r4,48
    7fa4:	dc002915 	stw	r16,164(sp)
    7fa8:	d9801b17 	ldw	r6,108(sp)
    7fac:	d9002415 	stw	r4,144(sp)
    7fb0:	03c001c4 	movi	r15,7
    7fb4:	da402515 	stw	r9,148(sp)
    7fb8:	db402815 	stw	r13,160(sp)
    7fbc:	1821883a 	mov	r16,r3
    7fc0:	00000506 	br	7fd8 <___vfiprintf_internal_r+0x46c>
    7fc4:	31400084 	addi	r5,r6,2
    7fc8:	42000204 	addi	r8,r8,8
    7fcc:	200d883a 	mov	r6,r4
    7fd0:	843ffc04 	addi	r16,r16,-16
    7fd4:	3c000d0e 	bge	r7,r16,800c <___vfiprintf_internal_r+0x4a0>
    7fd8:	10800404 	addi	r2,r2,16
    7fdc:	31000044 	addi	r4,r6,1
    7fe0:	47000015 	stw	fp,0(r8)
    7fe4:	41c00115 	stw	r7,4(r8)
    7fe8:	d8801c15 	stw	r2,112(sp)
    7fec:	d9001b15 	stw	r4,108(sp)
    7ff0:	793ff40e 	bge	r15,r4,7fc4 <__alt_mem_onchip_memory2_0+0xfbfe7fc4>
    7ff4:	10019b1e 	bne	r2,zero,8664 <___vfiprintf_internal_r+0xaf8>
    7ff8:	843ffc04 	addi	r16,r16,-16
    7ffc:	000d883a 	mov	r6,zero
    8000:	01400044 	movi	r5,1
    8004:	d811883a 	mov	r8,sp
    8008:	3c3ff316 	blt	r7,r16,7fd8 <__alt_mem_onchip_memory2_0+0xfbfe7fd8>
    800c:	8007883a 	mov	r3,r16
    8010:	da402517 	ldw	r9,148(sp)
    8014:	db402817 	ldw	r13,160(sp)
    8018:	dc002917 	ldw	r16,164(sp)
    801c:	d9002417 	ldw	r4,144(sp)
    8020:	1885883a 	add	r2,r3,r2
    8024:	40c00115 	stw	r3,4(r8)
    8028:	41000015 	stw	r4,0(r8)
    802c:	d8801c15 	stw	r2,112(sp)
    8030:	d9401b15 	stw	r5,108(sp)
    8034:	00c001c4 	movi	r3,7
    8038:	19426a16 	blt	r3,r5,89e4 <___vfiprintf_internal_r+0xe78>
    803c:	d8c01d87 	ldb	r3,118(sp)
    8040:	42000204 	addi	r8,r8,8
    8044:	29000044 	addi	r4,r5,1
    8048:	1801991e 	bne	r3,zero,86b0 <___vfiprintf_internal_r+0xb44>
    804c:	68000c26 	beq	r13,zero,8080 <___vfiprintf_internal_r+0x514>
    8050:	d8c01d04 	addi	r3,sp,116
    8054:	10800084 	addi	r2,r2,2
    8058:	40c00015 	stw	r3,0(r8)
    805c:	00c00084 	movi	r3,2
    8060:	40c00115 	stw	r3,4(r8)
    8064:	d8801c15 	stw	r2,112(sp)
    8068:	d9001b15 	stw	r4,108(sp)
    806c:	00c001c4 	movi	r3,7
    8070:	19024c16 	blt	r3,r4,89a4 <___vfiprintf_internal_r+0xe38>
    8074:	200b883a 	mov	r5,r4
    8078:	42000204 	addi	r8,r8,8
    807c:	21000044 	addi	r4,r4,1
    8080:	00c02004 	movi	r3,128
    8084:	b0c20126 	beq	r22,r3,888c <___vfiprintf_internal_r+0xd20>
    8088:	4cedc83a 	sub	r22,r9,r19
    808c:	0580230e 	bge	zero,r22,811c <___vfiprintf_internal_r+0x5b0>
    8090:	01c00404 	movi	r7,16
    8094:	3d83140e 	bge	r7,r22,8ce8 <___vfiprintf_internal_r+0x117c>
    8098:	01000074 	movhi	r4,1
    809c:	21000804 	addi	r4,r4,32
    80a0:	d9002415 	stw	r4,144(sp)
    80a4:	034001c4 	movi	r13,7
    80a8:	00000506 	br	80c0 <___vfiprintf_internal_r+0x554>
    80ac:	29000084 	addi	r4,r5,2
    80b0:	42000204 	addi	r8,r8,8
    80b4:	180b883a 	mov	r5,r3
    80b8:	b5bffc04 	addi	r22,r22,-16
    80bc:	3d800d0e 	bge	r7,r22,80f4 <___vfiprintf_internal_r+0x588>
    80c0:	10800404 	addi	r2,r2,16
    80c4:	28c00044 	addi	r3,r5,1
    80c8:	45c00015 	stw	r23,0(r8)
    80cc:	41c00115 	stw	r7,4(r8)
    80d0:	d8801c15 	stw	r2,112(sp)
    80d4:	d8c01b15 	stw	r3,108(sp)
    80d8:	68fff40e 	bge	r13,r3,80ac <__alt_mem_onchip_memory2_0+0xfbfe80ac>
    80dc:	1001811e 	bne	r2,zero,86e4 <___vfiprintf_internal_r+0xb78>
    80e0:	b5bffc04 	addi	r22,r22,-16
    80e4:	01000044 	movi	r4,1
    80e8:	000b883a 	mov	r5,zero
    80ec:	d811883a 	mov	r8,sp
    80f0:	3dbff316 	blt	r7,r22,80c0 <__alt_mem_onchip_memory2_0+0xfbfe80c0>
    80f4:	d8c02417 	ldw	r3,144(sp)
    80f8:	1585883a 	add	r2,r2,r22
    80fc:	45800115 	stw	r22,4(r8)
    8100:	40c00015 	stw	r3,0(r8)
    8104:	d8801c15 	stw	r2,112(sp)
    8108:	d9001b15 	stw	r4,108(sp)
    810c:	00c001c4 	movi	r3,7
    8110:	1901d016 	blt	r3,r4,8854 <___vfiprintf_internal_r+0xce8>
    8114:	42000204 	addi	r8,r8,8
    8118:	21000044 	addi	r4,r4,1
    811c:	14c5883a 	add	r2,r2,r19
    8120:	45000015 	stw	r20,0(r8)
    8124:	44c00115 	stw	r19,4(r8)
    8128:	d8801c15 	stw	r2,112(sp)
    812c:	d9001b15 	stw	r4,108(sp)
    8130:	00c001c4 	movi	r3,7
    8134:	1901cf0e 	bge	r3,r4,8874 <___vfiprintf_internal_r+0xd08>
    8138:	1002361e 	bne	r2,zero,8a14 <___vfiprintf_internal_r+0xea8>
    813c:	d8001b15 	stw	zero,108(sp)
    8140:	aac0010c 	andi	r11,r21,4
    8144:	58002826 	beq	r11,zero,81e8 <___vfiprintf_internal_r+0x67c>
    8148:	9467c83a 	sub	r19,r18,r17
    814c:	d811883a 	mov	r8,sp
    8150:	04c3340e 	bge	zero,r19,8e24 <___vfiprintf_internal_r+0x12b8>
    8154:	01c00404 	movi	r7,16
    8158:	3cc31b0e 	bge	r7,r19,8dc8 <___vfiprintf_internal_r+0x125c>
    815c:	00c00074 	movhi	r3,1
    8160:	18c00c04 	addi	r3,r3,48
    8164:	d9001b17 	ldw	r4,108(sp)
    8168:	d8c02415 	stw	r3,144(sp)
    816c:	382b883a 	mov	r21,r7
    8170:	050001c4 	movi	r20,7
    8174:	dd802017 	ldw	r22,128(sp)
    8178:	00000506 	br	8190 <___vfiprintf_internal_r+0x624>
    817c:	21400084 	addi	r5,r4,2
    8180:	42000204 	addi	r8,r8,8
    8184:	1809883a 	mov	r4,r3
    8188:	9cfffc04 	addi	r19,r19,-16
    818c:	acc00d0e 	bge	r21,r19,81c4 <___vfiprintf_internal_r+0x658>
    8190:	10800404 	addi	r2,r2,16
    8194:	20c00044 	addi	r3,r4,1
    8198:	47000015 	stw	fp,0(r8)
    819c:	45400115 	stw	r21,4(r8)
    81a0:	d8801c15 	stw	r2,112(sp)
    81a4:	d8c01b15 	stw	r3,108(sp)
    81a8:	a0fff40e 	bge	r20,r3,817c <__alt_mem_onchip_memory2_0+0xfbfe817c>
    81ac:	10019f1e 	bne	r2,zero,882c <___vfiprintf_internal_r+0xcc0>
    81b0:	9cfffc04 	addi	r19,r19,-16
    81b4:	01400044 	movi	r5,1
    81b8:	0009883a 	mov	r4,zero
    81bc:	d811883a 	mov	r8,sp
    81c0:	acfff316 	blt	r21,r19,8190 <__alt_mem_onchip_memory2_0+0xfbfe8190>
    81c4:	d8c02417 	ldw	r3,144(sp)
    81c8:	14c5883a 	add	r2,r2,r19
    81cc:	44c00115 	stw	r19,4(r8)
    81d0:	40c00015 	stw	r3,0(r8)
    81d4:	d8801c15 	stw	r2,112(sp)
    81d8:	d9401b15 	stw	r5,108(sp)
    81dc:	00c001c4 	movi	r3,7
    81e0:	1941810e 	bge	r3,r5,87e8 <___vfiprintf_internal_r+0xc7c>
    81e4:	10017a1e 	bne	r2,zero,87d0 <___vfiprintf_internal_r+0xc64>
    81e8:	8c82a416 	blt	r17,r18,8c7c <___vfiprintf_internal_r+0x1110>
    81ec:	d9002317 	ldw	r4,140(sp)
    81f0:	2449883a 	add	r4,r4,r17
    81f4:	d9002315 	stw	r4,140(sp)
    81f8:	d8001b15 	stw	zero,108(sp)
    81fc:	d811883a 	mov	r8,sp
    8200:	003e8e06 	br	7c3c <__alt_mem_onchip_memory2_0+0xfbfe7c3c>
    8204:	d9002017 	ldw	r4,128(sp)
    8208:	a80b883a 	mov	r5,r21
    820c:	00029ac0 	call	29ac <__swsetup_r>
    8210:	10000c1e 	bne	r2,zero,8244 <___vfiprintf_internal_r+0x6d8>
    8214:	a880030b 	ldhu	r2,12(r21)
    8218:	00c00284 	movi	r3,10
    821c:	1080068c 	andi	r2,r2,26
    8220:	10fe741e 	bne	r2,r3,7bf4 <__alt_mem_onchip_memory2_0+0xfbfe7bf4>
    8224:	a880038f 	ldh	r2,14(r21)
    8228:	103e7216 	blt	r2,zero,7bf4 <__alt_mem_onchip_memory2_0+0xfbfe7bf4>
    822c:	d9002017 	ldw	r4,128(sp)
    8230:	d9c02217 	ldw	r7,136(sp)
    8234:	a80b883a 	mov	r5,r21
    8238:	b00d883a 	mov	r6,r22
    823c:	0008e600 	call	8e60 <__sbprintf>
    8240:	00000106 	br	8248 <___vfiprintf_internal_r+0x6dc>
    8244:	00bfffc4 	movi	r2,-1
    8248:	dfc03517 	ldw	ra,212(sp)
    824c:	df003417 	ldw	fp,208(sp)
    8250:	ddc03317 	ldw	r23,204(sp)
    8254:	dd803217 	ldw	r22,200(sp)
    8258:	dd403117 	ldw	r21,196(sp)
    825c:	dd003017 	ldw	r20,192(sp)
    8260:	dcc02f17 	ldw	r19,188(sp)
    8264:	dc802e17 	ldw	r18,184(sp)
    8268:	dc402d17 	ldw	r17,180(sp)
    826c:	dc002c17 	ldw	r16,176(sp)
    8270:	dec03604 	addi	sp,sp,216
    8274:	f800283a 	ret
    8278:	0004a0c0 	call	4a0c <__sinit>
    827c:	003e4d06 	br	7bb4 <__alt_mem_onchip_memory2_0+0xfbfe7bb4>
    8280:	8005883a 	mov	r2,r16
    8284:	ad400114 	ori	r21,r21,4
    8288:	80c00007 	ldb	r3,0(r16)
    828c:	003e9506 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8290:	b006d0fa 	srli	r3,r22,3
    8294:	6808977a 	slli	r4,r13,29
    8298:	681ad0fa 	srli	r13,r13,3
    829c:	b58001cc 	andi	r22,r22,7
    82a0:	b0800c04 	addi	r2,r22,48
    82a4:	a53fffc4 	addi	r20,r20,-1
    82a8:	20ecb03a 	or	r22,r4,r3
    82ac:	a0800005 	stb	r2,0(r20)
    82b0:	b346b03a 	or	r3,r22,r13
    82b4:	183ff61e 	bne	r3,zero,8290 <__alt_mem_onchip_memory2_0+0xfbfe8290>
    82b8:	a8c0004c 	andi	r3,r21,1
    82bc:	a009883a 	mov	r4,r20
    82c0:	18013b26 	beq	r3,zero,87b0 <___vfiprintf_internal_r+0xc44>
    82c4:	10803fcc 	andi	r2,r2,255
    82c8:	1080201c 	xori	r2,r2,128
    82cc:	10bfe004 	addi	r2,r2,-128
    82d0:	00c00c04 	movi	r3,48
    82d4:	10ff1d26 	beq	r2,r3,7f4c <__alt_mem_onchip_memory2_0+0xfbfe7f4c>
    82d8:	d8801e17 	ldw	r2,120(sp)
    82dc:	a53fffc4 	addi	r20,r20,-1
    82e0:	20ffffc5 	stb	r3,-1(r4)
    82e4:	1527c83a 	sub	r19,r2,r20
    82e8:	003f1a06 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    82ec:	ad402014 	ori	r21,r21,128
    82f0:	8005883a 	mov	r2,r16
    82f4:	80c00007 	ldb	r3,0(r16)
    82f8:	003e7a06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    82fc:	8005883a 	mov	r2,r16
    8300:	0025883a 	mov	r18,zero
    8304:	193ff404 	addi	r4,r3,-48
    8308:	10c00007 	ldb	r3,0(r2)
    830c:	948002a4 	muli	r18,r18,10
    8310:	84000044 	addi	r16,r16,1
    8314:	8005883a 	mov	r2,r16
    8318:	9125883a 	add	r18,r18,r4
    831c:	193ff404 	addi	r4,r3,-48
    8320:	313ff92e 	bgeu	r6,r4,8308 <__alt_mem_onchip_memory2_0+0xfbfe8308>
    8324:	003e7006 	br	7ce8 <__alt_mem_onchip_memory2_0+0xfbfe7ce8>
    8328:	ad400414 	ori	r21,r21,16
    832c:	d9c01d85 	stb	r7,118(sp)
    8330:	a880080c 	andi	r2,r21,32
    8334:	d8c02217 	ldw	r3,136(sp)
    8338:	10005a26 	beq	r2,zero,84a4 <___vfiprintf_internal_r+0x938>
    833c:	d9002217 	ldw	r4,136(sp)
    8340:	18800117 	ldw	r2,4(r3)
    8344:	1d800017 	ldw	r22,0(r3)
    8348:	21000204 	addi	r4,r4,8
    834c:	d9002215 	stw	r4,136(sp)
    8350:	101b883a 	mov	r13,r2
    8354:	1001f416 	blt	r2,zero,8b28 <___vfiprintf_internal_r+0xfbc>
    8358:	db801d83 	ldbu	r14,118(sp)
    835c:	4827883a 	mov	r19,r9
    8360:	00800044 	movi	r2,1
    8364:	b348b03a 	or	r4,r22,r13
    8368:	003ee106 	br	7ef0 <__alt_mem_onchip_memory2_0+0xfbfe7ef0>
    836c:	80c00007 	ldb	r3,0(r16)
    8370:	80800044 	addi	r2,r16,1
    8374:	1b42a326 	beq	r3,r13,8e04 <___vfiprintf_internal_r+0x1298>
    8378:	193ff404 	addi	r4,r3,-48
    837c:	1021883a 	mov	r16,r2
    8380:	0013883a 	mov	r9,zero
    8384:	313e5836 	bltu	r6,r4,7ce8 <__alt_mem_onchip_memory2_0+0xfbfe7ce8>
    8388:	80c00007 	ldb	r3,0(r16)
    838c:	4a4002a4 	muli	r9,r9,10
    8390:	84000044 	addi	r16,r16,1
    8394:	2253883a 	add	r9,r4,r9
    8398:	193ff404 	addi	r4,r3,-48
    839c:	313ffa2e 	bgeu	r6,r4,8388 <__alt_mem_onchip_memory2_0+0xfbfe8388>
    83a0:	483e510e 	bge	r9,zero,7ce8 <__alt_mem_onchip_memory2_0+0xfbfe7ce8>
    83a4:	027fffc4 	movi	r9,-1
    83a8:	003e4f06 	br	7ce8 <__alt_mem_onchip_memory2_0+0xfbfe7ce8>
    83ac:	d9c01d85 	stb	r7,118(sp)
    83b0:	a880080c 	andi	r2,r21,32
    83b4:	10020826 	beq	r2,zero,8bd8 <___vfiprintf_internal_r+0x106c>
    83b8:	d8c02217 	ldw	r3,136(sp)
    83bc:	d9002317 	ldw	r4,140(sp)
    83c0:	18800017 	ldw	r2,0(r3)
    83c4:	2007d7fa 	srai	r3,r4,31
    83c8:	d9002217 	ldw	r4,136(sp)
    83cc:	10c00115 	stw	r3,4(r2)
    83d0:	21000104 	addi	r4,r4,4
    83d4:	d9002215 	stw	r4,136(sp)
    83d8:	d9002317 	ldw	r4,140(sp)
    83dc:	11000015 	stw	r4,0(r2)
    83e0:	003e1606 	br	7c3c <__alt_mem_onchip_memory2_0+0xfbfe7c3c>
    83e4:	d8802217 	ldw	r2,136(sp)
    83e8:	d8c02217 	ldw	r3,136(sp)
    83ec:	15800017 	ldw	r22,0(r2)
    83f0:	13400117 	ldw	r13,4(r2)
    83f4:	18c00204 	addi	r3,r3,8
    83f8:	0005883a 	mov	r2,zero
    83fc:	d8c02215 	stw	r3,136(sp)
    8400:	b348b03a 	or	r4,r22,r13
    8404:	003eb706 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8408:	38803fcc 	andi	r2,r7,255
    840c:	1080201c 	xori	r2,r2,128
    8410:	10bfe004 	addi	r2,r2,-128
    8414:	1001e31e 	bne	r2,zero,8ba4 <___vfiprintf_internal_r+0x1038>
    8418:	8005883a 	mov	r2,r16
    841c:	01c00804 	movi	r7,32
    8420:	80c00007 	ldb	r3,0(r16)
    8424:	003e2f06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8428:	ad400054 	ori	r21,r21,1
    842c:	8005883a 	mov	r2,r16
    8430:	80c00007 	ldb	r3,0(r16)
    8434:	003e2b06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8438:	d8c02217 	ldw	r3,136(sp)
    843c:	1c800017 	ldw	r18,0(r3)
    8440:	18c00104 	addi	r3,r3,4
    8444:	90023816 	blt	r18,zero,8d28 <___vfiprintf_internal_r+0x11bc>
    8448:	d8c02215 	stw	r3,136(sp)
    844c:	8005883a 	mov	r2,r16
    8450:	80c00007 	ldb	r3,0(r16)
    8454:	003e2306 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8458:	8005883a 	mov	r2,r16
    845c:	01c00ac4 	movi	r7,43
    8460:	80c00007 	ldb	r3,0(r16)
    8464:	003e1f06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8468:	d8c02217 	ldw	r3,136(sp)
    846c:	04400044 	movi	r17,1
    8470:	d8001d85 	stb	zero,118(sp)
    8474:	18800017 	ldw	r2,0(r3)
    8478:	18c00104 	addi	r3,r3,4
    847c:	d8c02215 	stw	r3,136(sp)
    8480:	d8801005 	stb	r2,64(sp)
    8484:	8827883a 	mov	r19,r17
    8488:	dd001004 	addi	r20,sp,64
    848c:	0013883a 	mov	r9,zero
    8490:	003eb806 	br	7f74 <__alt_mem_onchip_memory2_0+0xfbfe7f74>
    8494:	d9c01d85 	stb	r7,118(sp)
    8498:	a880080c 	andi	r2,r21,32
    849c:	d8c02217 	ldw	r3,136(sp)
    84a0:	103fa61e 	bne	r2,zero,833c <__alt_mem_onchip_memory2_0+0xfbfe833c>
    84a4:	a880040c 	andi	r2,r21,16
    84a8:	1001dd26 	beq	r2,zero,8c20 <___vfiprintf_internal_r+0x10b4>
    84ac:	1d800017 	ldw	r22,0(r3)
    84b0:	d8802217 	ldw	r2,136(sp)
    84b4:	b01bd7fa 	srai	r13,r22,31
    84b8:	10800104 	addi	r2,r2,4
    84bc:	d8802215 	stw	r2,136(sp)
    84c0:	6805883a 	mov	r2,r13
    84c4:	003fa306 	br	8354 <__alt_mem_onchip_memory2_0+0xfbfe8354>
    84c8:	00800074 	movhi	r2,1
    84cc:	10bfa204 	addi	r2,r2,-376
    84d0:	d8802615 	stw	r2,152(sp)
    84d4:	d9c01d85 	stb	r7,118(sp)
    84d8:	a880080c 	andi	r2,r21,32
    84dc:	10004726 	beq	r2,zero,85fc <___vfiprintf_internal_r+0xa90>
    84e0:	d9002217 	ldw	r4,136(sp)
    84e4:	25800017 	ldw	r22,0(r4)
    84e8:	23400117 	ldw	r13,4(r4)
    84ec:	21000204 	addi	r4,r4,8
    84f0:	d9002215 	stw	r4,136(sp)
    84f4:	a880004c 	andi	r2,r21,1
    84f8:	10014e26 	beq	r2,zero,8a34 <___vfiprintf_internal_r+0xec8>
    84fc:	b348b03a 	or	r4,r22,r13
    8500:	20019c26 	beq	r4,zero,8b74 <___vfiprintf_internal_r+0x1008>
    8504:	00800c04 	movi	r2,48
    8508:	d8801d05 	stb	r2,116(sp)
    850c:	d8c01d45 	stb	r3,117(sp)
    8510:	ad400094 	ori	r21,r21,2
    8514:	00800084 	movi	r2,2
    8518:	003e7206 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    851c:	d8c02217 	ldw	r3,136(sp)
    8520:	d8001d85 	stb	zero,118(sp)
    8524:	1d000017 	ldw	r20,0(r3)
    8528:	1d800104 	addi	r22,r3,4
    852c:	a0021c26 	beq	r20,zero,8da0 <___vfiprintf_internal_r+0x1234>
    8530:	a009883a 	mov	r4,r20
    8534:	48020016 	blt	r9,zero,8d38 <___vfiprintf_internal_r+0x11cc>
    8538:	480d883a 	mov	r6,r9
    853c:	000b883a 	mov	r5,zero
    8540:	da002a15 	stw	r8,168(sp)
    8544:	da402b15 	stw	r9,172(sp)
    8548:	0005ef80 	call	5ef8 <memchr>
    854c:	da002a17 	ldw	r8,168(sp)
    8550:	da402b17 	ldw	r9,172(sp)
    8554:	10022226 	beq	r2,zero,8de0 <___vfiprintf_internal_r+0x1274>
    8558:	1527c83a 	sub	r19,r2,r20
    855c:	4cc1c916 	blt	r9,r19,8c84 <___vfiprintf_internal_r+0x1118>
    8560:	db801d83 	ldbu	r14,118(sp)
    8564:	dd802215 	stw	r22,136(sp)
    8568:	0013883a 	mov	r9,zero
    856c:	003e7906 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    8570:	ad401014 	ori	r21,r21,64
    8574:	8005883a 	mov	r2,r16
    8578:	80c00007 	ldb	r3,0(r16)
    857c:	003dd906 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8580:	80c00007 	ldb	r3,0(r16)
    8584:	8005883a 	mov	r2,r16
    8588:	1b01e326 	beq	r3,r12,8d18 <___vfiprintf_internal_r+0x11ac>
    858c:	ad400414 	ori	r21,r21,16
    8590:	003dd406 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8594:	d9002217 	ldw	r4,136(sp)
    8598:	00800c04 	movi	r2,48
    859c:	d8801d05 	stb	r2,116(sp)
    85a0:	25800017 	ldw	r22,0(r4)
    85a4:	00801e04 	movi	r2,120
    85a8:	d8801d45 	stb	r2,117(sp)
    85ac:	00800074 	movhi	r2,1
    85b0:	21000104 	addi	r4,r4,4
    85b4:	10bfa704 	addi	r2,r2,-356
    85b8:	d9002215 	stw	r4,136(sp)
    85bc:	d8802615 	stw	r2,152(sp)
    85c0:	001b883a 	mov	r13,zero
    85c4:	ad400094 	ori	r21,r21,2
    85c8:	00800084 	movi	r2,2
    85cc:	b009883a 	mov	r4,r22
    85d0:	003e4406 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    85d4:	ad400814 	ori	r21,r21,32
    85d8:	8005883a 	mov	r2,r16
    85dc:	80c00007 	ldb	r3,0(r16)
    85e0:	003dc006 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    85e4:	00800074 	movhi	r2,1
    85e8:	10bfa704 	addi	r2,r2,-356
    85ec:	d8802615 	stw	r2,152(sp)
    85f0:	d9c01d85 	stb	r7,118(sp)
    85f4:	a880080c 	andi	r2,r21,32
    85f8:	103fb91e 	bne	r2,zero,84e0 <__alt_mem_onchip_memory2_0+0xfbfe84e0>
    85fc:	a880040c 	andi	r2,r21,16
    8600:	10010f1e 	bne	r2,zero,8a40 <___vfiprintf_internal_r+0xed4>
    8604:	a880100c 	andi	r2,r21,64
    8608:	10010d26 	beq	r2,zero,8a40 <___vfiprintf_internal_r+0xed4>
    860c:	d9002217 	ldw	r4,136(sp)
    8610:	001b883a 	mov	r13,zero
    8614:	2580000b 	ldhu	r22,0(r4)
    8618:	21000104 	addi	r4,r4,4
    861c:	d9002215 	stw	r4,136(sp)
    8620:	003fb406 	br	84f4 <__alt_mem_onchip_memory2_0+0xfbfe84f4>
    8624:	d9002217 	ldw	r4,136(sp)
    8628:	00800044 	movi	r2,1
    862c:	25800017 	ldw	r22,0(r4)
    8630:	23400117 	ldw	r13,4(r4)
    8634:	21000204 	addi	r4,r4,8
    8638:	d9002215 	stw	r4,136(sp)
    863c:	b348b03a 	or	r4,r22,r13
    8640:	003e2806 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8644:	d9c01d85 	stb	r7,118(sp)
    8648:	1801ab26 	beq	r3,zero,8cf8 <___vfiprintf_internal_r+0x118c>
    864c:	04400044 	movi	r17,1
    8650:	d8c01005 	stb	r3,64(sp)
    8654:	d8001d85 	stb	zero,118(sp)
    8658:	8827883a 	mov	r19,r17
    865c:	dd001004 	addi	r20,sp,64
    8660:	003f8a06 	br	848c <__alt_mem_onchip_memory2_0+0xfbfe848c>
    8664:	d9002017 	ldw	r4,128(sp)
    8668:	d9402117 	ldw	r5,132(sp)
    866c:	d9801a04 	addi	r6,sp,104
    8670:	d9c02b15 	stw	r7,172(sp)
    8674:	dbc02a15 	stw	r15,168(sp)
    8678:	0007a580 	call	7a58 <__sprint_r.part.0>
    867c:	d9c02b17 	ldw	r7,172(sp)
    8680:	dbc02a17 	ldw	r15,168(sp)
    8684:	1000631e 	bne	r2,zero,8814 <___vfiprintf_internal_r+0xca8>
    8688:	d9801b17 	ldw	r6,108(sp)
    868c:	d8801c17 	ldw	r2,112(sp)
    8690:	d811883a 	mov	r8,sp
    8694:	31400044 	addi	r5,r6,1
    8698:	003e4d06 	br	7fd0 <__alt_mem_onchip_memory2_0+0xfbfe7fd0>
    869c:	d9401b17 	ldw	r5,108(sp)
    86a0:	d8801c17 	ldw	r2,112(sp)
    86a4:	29000044 	addi	r4,r5,1
    86a8:	d8c01d87 	ldb	r3,118(sp)
    86ac:	183e6726 	beq	r3,zero,804c <__alt_mem_onchip_memory2_0+0xfbfe804c>
    86b0:	00c00044 	movi	r3,1
    86b4:	d9401d84 	addi	r5,sp,118
    86b8:	10c5883a 	add	r2,r2,r3
    86bc:	41400015 	stw	r5,0(r8)
    86c0:	40c00115 	stw	r3,4(r8)
    86c4:	d8801c15 	stw	r2,112(sp)
    86c8:	d9001b15 	stw	r4,108(sp)
    86cc:	014001c4 	movi	r5,7
    86d0:	2900ab16 	blt	r5,r4,8980 <___vfiprintf_internal_r+0xe14>
    86d4:	200b883a 	mov	r5,r4
    86d8:	42000204 	addi	r8,r8,8
    86dc:	21000044 	addi	r4,r4,1
    86e0:	003e5a06 	br	804c <__alt_mem_onchip_memory2_0+0xfbfe804c>
    86e4:	d9002017 	ldw	r4,128(sp)
    86e8:	d9402117 	ldw	r5,132(sp)
    86ec:	d9801a04 	addi	r6,sp,104
    86f0:	d9c02b15 	stw	r7,172(sp)
    86f4:	db402a15 	stw	r13,168(sp)
    86f8:	0007a580 	call	7a58 <__sprint_r.part.0>
    86fc:	d9c02b17 	ldw	r7,172(sp)
    8700:	db402a17 	ldw	r13,168(sp)
    8704:	1000431e 	bne	r2,zero,8814 <___vfiprintf_internal_r+0xca8>
    8708:	d9401b17 	ldw	r5,108(sp)
    870c:	d8801c17 	ldw	r2,112(sp)
    8710:	d811883a 	mov	r8,sp
    8714:	29000044 	addi	r4,r5,1
    8718:	003e6706 	br	80b8 <__alt_mem_onchip_memory2_0+0xfbfe80b8>
    871c:	10803fcc 	andi	r2,r2,255
    8720:	00c00044 	movi	r3,1
    8724:	10fdfa1e 	bne	r2,r3,7f10 <__alt_mem_onchip_memory2_0+0xfbfe7f10>
    8728:	6800021e 	bne	r13,zero,8734 <___vfiprintf_internal_r+0xbc8>
    872c:	00800244 	movi	r2,9
    8730:	1580222e 	bgeu	r2,r22,87bc <___vfiprintf_internal_r+0xc50>
    8734:	dc802415 	stw	r18,144(sp)
    8738:	dc002515 	stw	r16,148(sp)
    873c:	dc401a04 	addi	r17,sp,104
    8740:	b021883a 	mov	r16,r22
    8744:	4827883a 	mov	r19,r9
    8748:	4029883a 	mov	r20,r8
    874c:	702d883a 	mov	r22,r14
    8750:	6825883a 	mov	r18,r13
    8754:	8009883a 	mov	r4,r16
    8758:	900b883a 	mov	r5,r18
    875c:	01800284 	movi	r6,10
    8760:	000f883a 	mov	r7,zero
    8764:	0009dd40 	call	9dd4 <__umoddi3>
    8768:	10800c04 	addi	r2,r2,48
    876c:	8c7fffc4 	addi	r17,r17,-1
    8770:	8009883a 	mov	r4,r16
    8774:	900b883a 	mov	r5,r18
    8778:	01800284 	movi	r6,10
    877c:	000f883a 	mov	r7,zero
    8780:	88800005 	stb	r2,0(r17)
    8784:	00098140 	call	9814 <__udivdi3>
    8788:	1021883a 	mov	r16,r2
    878c:	10c4b03a 	or	r2,r2,r3
    8790:	1825883a 	mov	r18,r3
    8794:	103fef1e 	bne	r2,zero,8754 <__alt_mem_onchip_memory2_0+0xfbfe8754>
    8798:	dc802417 	ldw	r18,144(sp)
    879c:	dc002517 	ldw	r16,148(sp)
    87a0:	a011883a 	mov	r8,r20
    87a4:	9813883a 	mov	r9,r19
    87a8:	b01d883a 	mov	r14,r22
    87ac:	8829883a 	mov	r20,r17
    87b0:	d8c01e17 	ldw	r3,120(sp)
    87b4:	1d27c83a 	sub	r19,r3,r20
    87b8:	003de606 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    87bc:	b5800c04 	addi	r22,r22,48
    87c0:	dd8019c5 	stb	r22,103(sp)
    87c4:	dcc02717 	ldw	r19,156(sp)
    87c8:	dd0019c4 	addi	r20,sp,103
    87cc:	003de106 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    87d0:	d9002017 	ldw	r4,128(sp)
    87d4:	d9402117 	ldw	r5,132(sp)
    87d8:	d9801a04 	addi	r6,sp,104
    87dc:	0007a580 	call	7a58 <__sprint_r.part.0>
    87e0:	10000c1e 	bne	r2,zero,8814 <___vfiprintf_internal_r+0xca8>
    87e4:	d8801c17 	ldw	r2,112(sp)
    87e8:	8c80010e 	bge	r17,r18,87f0 <___vfiprintf_internal_r+0xc84>
    87ec:	9023883a 	mov	r17,r18
    87f0:	d8c02317 	ldw	r3,140(sp)
    87f4:	1c47883a 	add	r3,r3,r17
    87f8:	d8c02315 	stw	r3,140(sp)
    87fc:	103e7e26 	beq	r2,zero,81f8 <__alt_mem_onchip_memory2_0+0xfbfe81f8>
    8800:	d9002017 	ldw	r4,128(sp)
    8804:	d9402117 	ldw	r5,132(sp)
    8808:	d9801a04 	addi	r6,sp,104
    880c:	0007a580 	call	7a58 <__sprint_r.part.0>
    8810:	103e7926 	beq	r2,zero,81f8 <__alt_mem_onchip_memory2_0+0xfbfe81f8>
    8814:	dd402117 	ldw	r21,132(sp)
    8818:	a880030b 	ldhu	r2,12(r21)
    881c:	1080100c 	andi	r2,r2,64
    8820:	103e881e 	bne	r2,zero,8244 <__alt_mem_onchip_memory2_0+0xfbfe8244>
    8824:	d8802317 	ldw	r2,140(sp)
    8828:	003e8706 	br	8248 <__alt_mem_onchip_memory2_0+0xfbfe8248>
    882c:	d9402117 	ldw	r5,132(sp)
    8830:	b009883a 	mov	r4,r22
    8834:	d9801a04 	addi	r6,sp,104
    8838:	0007a580 	call	7a58 <__sprint_r.part.0>
    883c:	103ff51e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8840:	d9001b17 	ldw	r4,108(sp)
    8844:	d8801c17 	ldw	r2,112(sp)
    8848:	d811883a 	mov	r8,sp
    884c:	21400044 	addi	r5,r4,1
    8850:	003e4d06 	br	8188 <__alt_mem_onchip_memory2_0+0xfbfe8188>
    8854:	1000aa1e 	bne	r2,zero,8b00 <___vfiprintf_internal_r+0xf94>
    8858:	00c00044 	movi	r3,1
    885c:	9805883a 	mov	r2,r19
    8860:	dd000015 	stw	r20,0(sp)
    8864:	dcc00115 	stw	r19,4(sp)
    8868:	dcc01c15 	stw	r19,112(sp)
    886c:	d8c01b15 	stw	r3,108(sp)
    8870:	d811883a 	mov	r8,sp
    8874:	42000204 	addi	r8,r8,8
    8878:	aac0010c 	andi	r11,r21,4
    887c:	583fda26 	beq	r11,zero,87e8 <__alt_mem_onchip_memory2_0+0xfbfe87e8>
    8880:	9467c83a 	sub	r19,r18,r17
    8884:	04fe3316 	blt	zero,r19,8154 <__alt_mem_onchip_memory2_0+0xfbfe8154>
    8888:	003fd706 	br	87e8 <__alt_mem_onchip_memory2_0+0xfbfe87e8>
    888c:	946dc83a 	sub	r22,r18,r17
    8890:	05bdfd0e 	bge	zero,r22,8088 <__alt_mem_onchip_memory2_0+0xfbfe8088>
    8894:	00c00074 	movhi	r3,1
    8898:	18c00804 	addi	r3,r3,32
    889c:	01c00404 	movi	r7,16
    88a0:	d8c02415 	stw	r3,144(sp)
    88a4:	3d81530e 	bge	r7,r22,8df4 <___vfiprintf_internal_r+0x1288>
    88a8:	8007883a 	mov	r3,r16
    88ac:	034001c4 	movi	r13,7
    88b0:	b021883a 	mov	r16,r22
    88b4:	da402515 	stw	r9,148(sp)
    88b8:	182d883a 	mov	r22,r3
    88bc:	00000506 	br	88d4 <___vfiprintf_internal_r+0xd68>
    88c0:	29800084 	addi	r6,r5,2
    88c4:	42000204 	addi	r8,r8,8
    88c8:	180b883a 	mov	r5,r3
    88cc:	843ffc04 	addi	r16,r16,-16
    88d0:	3c000d0e 	bge	r7,r16,8908 <___vfiprintf_internal_r+0xd9c>
    88d4:	10800404 	addi	r2,r2,16
    88d8:	28c00044 	addi	r3,r5,1
    88dc:	45c00015 	stw	r23,0(r8)
    88e0:	41c00115 	stw	r7,4(r8)
    88e4:	d8801c15 	stw	r2,112(sp)
    88e8:	d8c01b15 	stw	r3,108(sp)
    88ec:	68fff40e 	bge	r13,r3,88c0 <__alt_mem_onchip_memory2_0+0xfbfe88c0>
    88f0:	1000151e 	bne	r2,zero,8948 <___vfiprintf_internal_r+0xddc>
    88f4:	843ffc04 	addi	r16,r16,-16
    88f8:	01800044 	movi	r6,1
    88fc:	000b883a 	mov	r5,zero
    8900:	d811883a 	mov	r8,sp
    8904:	3c3ff316 	blt	r7,r16,88d4 <__alt_mem_onchip_memory2_0+0xfbfe88d4>
    8908:	da402517 	ldw	r9,148(sp)
    890c:	b007883a 	mov	r3,r22
    8910:	802d883a 	mov	r22,r16
    8914:	1821883a 	mov	r16,r3
    8918:	d8c02417 	ldw	r3,144(sp)
    891c:	1585883a 	add	r2,r2,r22
    8920:	45800115 	stw	r22,4(r8)
    8924:	40c00015 	stw	r3,0(r8)
    8928:	d8801c15 	stw	r2,112(sp)
    892c:	d9801b15 	stw	r6,108(sp)
    8930:	00c001c4 	movi	r3,7
    8934:	19806d16 	blt	r3,r6,8aec <___vfiprintf_internal_r+0xf80>
    8938:	42000204 	addi	r8,r8,8
    893c:	31000044 	addi	r4,r6,1
    8940:	300b883a 	mov	r5,r6
    8944:	003dd006 	br	8088 <__alt_mem_onchip_memory2_0+0xfbfe8088>
    8948:	d9002017 	ldw	r4,128(sp)
    894c:	d9402117 	ldw	r5,132(sp)
    8950:	d9801a04 	addi	r6,sp,104
    8954:	d9c02b15 	stw	r7,172(sp)
    8958:	db402a15 	stw	r13,168(sp)
    895c:	0007a580 	call	7a58 <__sprint_r.part.0>
    8960:	d9c02b17 	ldw	r7,172(sp)
    8964:	db402a17 	ldw	r13,168(sp)
    8968:	103faa1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    896c:	d9401b17 	ldw	r5,108(sp)
    8970:	d8801c17 	ldw	r2,112(sp)
    8974:	d811883a 	mov	r8,sp
    8978:	29800044 	addi	r6,r5,1
    897c:	003fd306 	br	88cc <__alt_mem_onchip_memory2_0+0xfbfe88cc>
    8980:	1000401e 	bne	r2,zero,8a84 <___vfiprintf_internal_r+0xf18>
    8984:	68003b26 	beq	r13,zero,8a74 <___vfiprintf_internal_r+0xf08>
    8988:	d9001d04 	addi	r4,sp,116
    898c:	00800084 	movi	r2,2
    8990:	d9000015 	stw	r4,0(sp)
    8994:	d8800115 	stw	r2,4(sp)
    8998:	1809883a 	mov	r4,r3
    899c:	d811883a 	mov	r8,sp
    89a0:	003db406 	br	8074 <__alt_mem_onchip_memory2_0+0xfbfe8074>
    89a4:	1000451e 	bne	r2,zero,8abc <___vfiprintf_internal_r+0xf50>
    89a8:	01000044 	movi	r4,1
    89ac:	000b883a 	mov	r5,zero
    89b0:	d811883a 	mov	r8,sp
    89b4:	003db206 	br	8080 <__alt_mem_onchip_memory2_0+0xfbfe8080>
    89b8:	10803fcc 	andi	r2,r2,255
    89bc:	1000071e 	bne	r2,zero,89dc <___vfiprintf_internal_r+0xe70>
    89c0:	a880004c 	andi	r2,r21,1
    89c4:	10000526 	beq	r2,zero,89dc <___vfiprintf_internal_r+0xe70>
    89c8:	00800c04 	movi	r2,48
    89cc:	d88019c5 	stb	r2,103(sp)
    89d0:	dcc02717 	ldw	r19,156(sp)
    89d4:	dd0019c4 	addi	r20,sp,103
    89d8:	003d5e06 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    89dc:	dd001a04 	addi	r20,sp,104
    89e0:	003d5c06 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    89e4:	1000971e 	bne	r2,zero,8c44 <___vfiprintf_internal_r+0x10d8>
    89e8:	d8c01d87 	ldb	r3,118(sp)
    89ec:	18005826 	beq	r3,zero,8b50 <___vfiprintf_internal_r+0xfe4>
    89f0:	00800044 	movi	r2,1
    89f4:	d8c01d84 	addi	r3,sp,118
    89f8:	1009883a 	mov	r4,r2
    89fc:	d8c00015 	stw	r3,0(sp)
    8a00:	d8800115 	stw	r2,4(sp)
    8a04:	d811883a 	mov	r8,sp
    8a08:	003f3206 	br	86d4 <__alt_mem_onchip_memory2_0+0xfbfe86d4>
    8a0c:	8023883a 	mov	r17,r16
    8a10:	003ca706 	br	7cb0 <__alt_mem_onchip_memory2_0+0xfbfe7cb0>
    8a14:	d9002017 	ldw	r4,128(sp)
    8a18:	d9402117 	ldw	r5,132(sp)
    8a1c:	d9801a04 	addi	r6,sp,104
    8a20:	0007a580 	call	7a58 <__sprint_r.part.0>
    8a24:	103f7b1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8a28:	d8801c17 	ldw	r2,112(sp)
    8a2c:	d811883a 	mov	r8,sp
    8a30:	003f9106 	br	8878 <__alt_mem_onchip_memory2_0+0xfbfe8878>
    8a34:	00800084 	movi	r2,2
    8a38:	b348b03a 	or	r4,r22,r13
    8a3c:	003d2906 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8a40:	d8802217 	ldw	r2,136(sp)
    8a44:	001b883a 	mov	r13,zero
    8a48:	15800017 	ldw	r22,0(r2)
    8a4c:	10800104 	addi	r2,r2,4
    8a50:	d8802215 	stw	r2,136(sp)
    8a54:	003ea706 	br	84f4 <__alt_mem_onchip_memory2_0+0xfbfe84f4>
    8a58:	d9002017 	ldw	r4,128(sp)
    8a5c:	d9402117 	ldw	r5,132(sp)
    8a60:	d9801a04 	addi	r6,sp,104
    8a64:	0007a580 	call	7a58 <__sprint_r.part.0>
    8a68:	103f6a1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8a6c:	d811883a 	mov	r8,sp
    8a70:	003cff06 	br	7e70 <__alt_mem_onchip_memory2_0+0xfbfe7e70>
    8a74:	000b883a 	mov	r5,zero
    8a78:	1809883a 	mov	r4,r3
    8a7c:	d811883a 	mov	r8,sp
    8a80:	003d7f06 	br	8080 <__alt_mem_onchip_memory2_0+0xfbfe8080>
    8a84:	d9002017 	ldw	r4,128(sp)
    8a88:	d9402117 	ldw	r5,132(sp)
    8a8c:	d9801a04 	addi	r6,sp,104
    8a90:	da402b15 	stw	r9,172(sp)
    8a94:	db402a15 	stw	r13,168(sp)
    8a98:	0007a580 	call	7a58 <__sprint_r.part.0>
    8a9c:	da402b17 	ldw	r9,172(sp)
    8aa0:	db402a17 	ldw	r13,168(sp)
    8aa4:	103f5b1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8aa8:	d9401b17 	ldw	r5,108(sp)
    8aac:	d8801c17 	ldw	r2,112(sp)
    8ab0:	d811883a 	mov	r8,sp
    8ab4:	29000044 	addi	r4,r5,1
    8ab8:	003d6406 	br	804c <__alt_mem_onchip_memory2_0+0xfbfe804c>
    8abc:	d9002017 	ldw	r4,128(sp)
    8ac0:	d9402117 	ldw	r5,132(sp)
    8ac4:	d9801a04 	addi	r6,sp,104
    8ac8:	da402b15 	stw	r9,172(sp)
    8acc:	0007a580 	call	7a58 <__sprint_r.part.0>
    8ad0:	da402b17 	ldw	r9,172(sp)
    8ad4:	103f4f1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8ad8:	d9401b17 	ldw	r5,108(sp)
    8adc:	d8801c17 	ldw	r2,112(sp)
    8ae0:	d811883a 	mov	r8,sp
    8ae4:	29000044 	addi	r4,r5,1
    8ae8:	003d6506 	br	8080 <__alt_mem_onchip_memory2_0+0xfbfe8080>
    8aec:	10009a1e 	bne	r2,zero,8d58 <___vfiprintf_internal_r+0x11ec>
    8af0:	01000044 	movi	r4,1
    8af4:	000b883a 	mov	r5,zero
    8af8:	d811883a 	mov	r8,sp
    8afc:	003d6206 	br	8088 <__alt_mem_onchip_memory2_0+0xfbfe8088>
    8b00:	d9002017 	ldw	r4,128(sp)
    8b04:	d9402117 	ldw	r5,132(sp)
    8b08:	d9801a04 	addi	r6,sp,104
    8b0c:	0007a580 	call	7a58 <__sprint_r.part.0>
    8b10:	103f401e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8b14:	d9001b17 	ldw	r4,108(sp)
    8b18:	d8801c17 	ldw	r2,112(sp)
    8b1c:	d811883a 	mov	r8,sp
    8b20:	21000044 	addi	r4,r4,1
    8b24:	003d7d06 	br	811c <__alt_mem_onchip_memory2_0+0xfbfe811c>
    8b28:	05adc83a 	sub	r22,zero,r22
    8b2c:	b004c03a 	cmpne	r2,r22,zero
    8b30:	035bc83a 	sub	r13,zero,r13
    8b34:	689bc83a 	sub	r13,r13,r2
    8b38:	03800b44 	movi	r14,45
    8b3c:	db801d85 	stb	r14,118(sp)
    8b40:	4827883a 	mov	r19,r9
    8b44:	00800044 	movi	r2,1
    8b48:	b348b03a 	or	r4,r22,r13
    8b4c:	003ce806 	br	7ef0 <__alt_mem_onchip_memory2_0+0xfbfe7ef0>
    8b50:	000b883a 	mov	r5,zero
    8b54:	01000044 	movi	r4,1
    8b58:	d811883a 	mov	r8,sp
    8b5c:	683d4826 	beq	r13,zero,8080 <__alt_mem_onchip_memory2_0+0xfbfe8080>
    8b60:	00800084 	movi	r2,2
    8b64:	d8c01d04 	addi	r3,sp,116
    8b68:	d8c00015 	stw	r3,0(sp)
    8b6c:	d8800115 	stw	r2,4(sp)
    8b70:	003d4006 	br	8074 <__alt_mem_onchip_memory2_0+0xfbfe8074>
    8b74:	00800084 	movi	r2,2
    8b78:	003cda06 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8b7c:	a880100c 	andi	r2,r21,64
    8b80:	10004226 	beq	r2,zero,8c8c <___vfiprintf_internal_r+0x1120>
    8b84:	d8802217 	ldw	r2,136(sp)
    8b88:	001b883a 	mov	r13,zero
    8b8c:	1580000b 	ldhu	r22,0(r2)
    8b90:	10800104 	addi	r2,r2,4
    8b94:	d8802215 	stw	r2,136(sp)
    8b98:	b009883a 	mov	r4,r22
    8b9c:	0005883a 	mov	r2,zero
    8ba0:	003cd006 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8ba4:	80c00007 	ldb	r3,0(r16)
    8ba8:	8005883a 	mov	r2,r16
    8bac:	003c4d06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8bb0:	a880100c 	andi	r2,r21,64
    8bb4:	10004426 	beq	r2,zero,8cc8 <___vfiprintf_internal_r+0x115c>
    8bb8:	d8c02217 	ldw	r3,136(sp)
    8bbc:	001b883a 	mov	r13,zero
    8bc0:	00800044 	movi	r2,1
    8bc4:	1d80000b 	ldhu	r22,0(r3)
    8bc8:	18c00104 	addi	r3,r3,4
    8bcc:	d8c02215 	stw	r3,136(sp)
    8bd0:	b009883a 	mov	r4,r22
    8bd4:	003cc306 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8bd8:	a880040c 	andi	r2,r21,16
    8bdc:	1000091e 	bne	r2,zero,8c04 <___vfiprintf_internal_r+0x1098>
    8be0:	aac0100c 	andi	r11,r21,64
    8be4:	58000726 	beq	r11,zero,8c04 <___vfiprintf_internal_r+0x1098>
    8be8:	d8c02217 	ldw	r3,136(sp)
    8bec:	d9002317 	ldw	r4,140(sp)
    8bf0:	18800017 	ldw	r2,0(r3)
    8bf4:	18c00104 	addi	r3,r3,4
    8bf8:	d8c02215 	stw	r3,136(sp)
    8bfc:	1100000d 	sth	r4,0(r2)
    8c00:	003c0e06 	br	7c3c <__alt_mem_onchip_memory2_0+0xfbfe7c3c>
    8c04:	d8c02217 	ldw	r3,136(sp)
    8c08:	d9002317 	ldw	r4,140(sp)
    8c0c:	18800017 	ldw	r2,0(r3)
    8c10:	18c00104 	addi	r3,r3,4
    8c14:	d8c02215 	stw	r3,136(sp)
    8c18:	11000015 	stw	r4,0(r2)
    8c1c:	003c0706 	br	7c3c <__alt_mem_onchip_memory2_0+0xfbfe7c3c>
    8c20:	a880100c 	andi	r2,r21,64
    8c24:	10002126 	beq	r2,zero,8cac <___vfiprintf_internal_r+0x1140>
    8c28:	1d80000f 	ldh	r22,0(r3)
    8c2c:	d8c02217 	ldw	r3,136(sp)
    8c30:	b01bd7fa 	srai	r13,r22,31
    8c34:	18c00104 	addi	r3,r3,4
    8c38:	d8c02215 	stw	r3,136(sp)
    8c3c:	6805883a 	mov	r2,r13
    8c40:	003dc406 	br	8354 <__alt_mem_onchip_memory2_0+0xfbfe8354>
    8c44:	d9002017 	ldw	r4,128(sp)
    8c48:	d9402117 	ldw	r5,132(sp)
    8c4c:	d9801a04 	addi	r6,sp,104
    8c50:	da402b15 	stw	r9,172(sp)
    8c54:	db402a15 	stw	r13,168(sp)
    8c58:	0007a580 	call	7a58 <__sprint_r.part.0>
    8c5c:	da402b17 	ldw	r9,172(sp)
    8c60:	db402a17 	ldw	r13,168(sp)
    8c64:	103eeb1e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8c68:	d9401b17 	ldw	r5,108(sp)
    8c6c:	d8801c17 	ldw	r2,112(sp)
    8c70:	d811883a 	mov	r8,sp
    8c74:	29000044 	addi	r4,r5,1
    8c78:	003e8b06 	br	86a8 <__alt_mem_onchip_memory2_0+0xfbfe86a8>
    8c7c:	9023883a 	mov	r17,r18
    8c80:	003d5a06 	br	81ec <__alt_mem_onchip_memory2_0+0xfbfe81ec>
    8c84:	4827883a 	mov	r19,r9
    8c88:	003e3506 	br	8560 <__alt_mem_onchip_memory2_0+0xfbfe8560>
    8c8c:	d8c02217 	ldw	r3,136(sp)
    8c90:	001b883a 	mov	r13,zero
    8c94:	0005883a 	mov	r2,zero
    8c98:	1d800017 	ldw	r22,0(r3)
    8c9c:	18c00104 	addi	r3,r3,4
    8ca0:	d8c02215 	stw	r3,136(sp)
    8ca4:	b009883a 	mov	r4,r22
    8ca8:	003c8e06 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8cac:	1d800017 	ldw	r22,0(r3)
    8cb0:	d9002217 	ldw	r4,136(sp)
    8cb4:	b01bd7fa 	srai	r13,r22,31
    8cb8:	21000104 	addi	r4,r4,4
    8cbc:	d9002215 	stw	r4,136(sp)
    8cc0:	6805883a 	mov	r2,r13
    8cc4:	003da306 	br	8354 <__alt_mem_onchip_memory2_0+0xfbfe8354>
    8cc8:	d9002217 	ldw	r4,136(sp)
    8ccc:	001b883a 	mov	r13,zero
    8cd0:	00800044 	movi	r2,1
    8cd4:	25800017 	ldw	r22,0(r4)
    8cd8:	21000104 	addi	r4,r4,4
    8cdc:	d9002215 	stw	r4,136(sp)
    8ce0:	b009883a 	mov	r4,r22
    8ce4:	003c7f06 	br	7ee4 <__alt_mem_onchip_memory2_0+0xfbfe7ee4>
    8ce8:	00c00074 	movhi	r3,1
    8cec:	18c00804 	addi	r3,r3,32
    8cf0:	d8c02415 	stw	r3,144(sp)
    8cf4:	003cff06 	br	80f4 <__alt_mem_onchip_memory2_0+0xfbfe80f4>
    8cf8:	d8801c17 	ldw	r2,112(sp)
    8cfc:	dd402117 	ldw	r21,132(sp)
    8d00:	103ec526 	beq	r2,zero,8818 <__alt_mem_onchip_memory2_0+0xfbfe8818>
    8d04:	d9002017 	ldw	r4,128(sp)
    8d08:	a80b883a 	mov	r5,r21
    8d0c:	d9801a04 	addi	r6,sp,104
    8d10:	0007a580 	call	7a58 <__sprint_r.part.0>
    8d14:	003ec006 	br	8818 <__alt_mem_onchip_memory2_0+0xfbfe8818>
    8d18:	80800044 	addi	r2,r16,1
    8d1c:	ad400814 	ori	r21,r21,32
    8d20:	80c00047 	ldb	r3,1(r16)
    8d24:	003bef06 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8d28:	04a5c83a 	sub	r18,zero,r18
    8d2c:	8005883a 	mov	r2,r16
    8d30:	d8c02215 	stw	r3,136(sp)
    8d34:	003d5306 	br	8284 <__alt_mem_onchip_memory2_0+0xfbfe8284>
    8d38:	da002a15 	stw	r8,168(sp)
    8d3c:	00008e40 	call	8e4 <strlen>
    8d40:	1027883a 	mov	r19,r2
    8d44:	db801d83 	ldbu	r14,118(sp)
    8d48:	dd802215 	stw	r22,136(sp)
    8d4c:	0013883a 	mov	r9,zero
    8d50:	da002a17 	ldw	r8,168(sp)
    8d54:	003c7f06 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    8d58:	d9002017 	ldw	r4,128(sp)
    8d5c:	d9402117 	ldw	r5,132(sp)
    8d60:	d9801a04 	addi	r6,sp,104
    8d64:	da402b15 	stw	r9,172(sp)
    8d68:	0007a580 	call	7a58 <__sprint_r.part.0>
    8d6c:	da402b17 	ldw	r9,172(sp)
    8d70:	103ea81e 	bne	r2,zero,8814 <__alt_mem_onchip_memory2_0+0xfbfe8814>
    8d74:	d9401b17 	ldw	r5,108(sp)
    8d78:	d8801c17 	ldw	r2,112(sp)
    8d7c:	d811883a 	mov	r8,sp
    8d80:	29000044 	addi	r4,r5,1
    8d84:	003cc006 	br	8088 <__alt_mem_onchip_memory2_0+0xfbfe8088>
    8d88:	d9401b17 	ldw	r5,108(sp)
    8d8c:	01000074 	movhi	r4,1
    8d90:	21000c04 	addi	r4,r4,48
    8d94:	d9002415 	stw	r4,144(sp)
    8d98:	29400044 	addi	r5,r5,1
    8d9c:	003c9f06 	br	801c <__alt_mem_onchip_memory2_0+0xfbfe801c>
    8da0:	00800184 	movi	r2,6
    8da4:	1240012e 	bgeu	r2,r9,8dac <___vfiprintf_internal_r+0x1240>
    8da8:	1013883a 	mov	r9,r2
    8dac:	4827883a 	mov	r19,r9
    8db0:	4823883a 	mov	r17,r9
    8db4:	48001116 	blt	r9,zero,8dfc <___vfiprintf_internal_r+0x1290>
    8db8:	05000074 	movhi	r20,1
    8dbc:	dd802215 	stw	r22,136(sp)
    8dc0:	a53fac04 	addi	r20,r20,-336
    8dc4:	003db106 	br	848c <__alt_mem_onchip_memory2_0+0xfbfe848c>
    8dc8:	d9401b17 	ldw	r5,108(sp)
    8dcc:	01000074 	movhi	r4,1
    8dd0:	21000c04 	addi	r4,r4,48
    8dd4:	d9002415 	stw	r4,144(sp)
    8dd8:	29400044 	addi	r5,r5,1
    8ddc:	003cf906 	br	81c4 <__alt_mem_onchip_memory2_0+0xfbfe81c4>
    8de0:	4827883a 	mov	r19,r9
    8de4:	db801d83 	ldbu	r14,118(sp)
    8de8:	dd802215 	stw	r22,136(sp)
    8dec:	0013883a 	mov	r9,zero
    8df0:	003c5806 	br	7f54 <__alt_mem_onchip_memory2_0+0xfbfe7f54>
    8df4:	200d883a 	mov	r6,r4
    8df8:	003ec706 	br	8918 <__alt_mem_onchip_memory2_0+0xfbfe8918>
    8dfc:	0023883a 	mov	r17,zero
    8e00:	003fed06 	br	8db8 <__alt_mem_onchip_memory2_0+0xfbfe8db8>
    8e04:	d9002217 	ldw	r4,136(sp)
    8e08:	22400017 	ldw	r9,0(r4)
    8e0c:	20c00104 	addi	r3,r4,4
    8e10:	d8c02215 	stw	r3,136(sp)
    8e14:	483fc20e 	bge	r9,zero,8d20 <__alt_mem_onchip_memory2_0+0xfbfe8d20>
    8e18:	027fffc4 	movi	r9,-1
    8e1c:	80c00047 	ldb	r3,1(r16)
    8e20:	003bb006 	br	7ce4 <__alt_mem_onchip_memory2_0+0xfbfe7ce4>
    8e24:	8c80010e 	bge	r17,r18,8e2c <___vfiprintf_internal_r+0x12c0>
    8e28:	9023883a 	mov	r17,r18
    8e2c:	d8802317 	ldw	r2,140(sp)
    8e30:	1445883a 	add	r2,r2,r17
    8e34:	d8802315 	stw	r2,140(sp)
    8e38:	003cef06 	br	81f8 <__alt_mem_onchip_memory2_0+0xfbfe81f8>

00008e3c <__vfiprintf_internal>:
    8e3c:	2007883a 	mov	r3,r4
    8e40:	01000074 	movhi	r4,1
    8e44:	21074e04 	addi	r4,r4,7480
    8e48:	21000017 	ldw	r4,0(r4)
    8e4c:	2805883a 	mov	r2,r5
    8e50:	300f883a 	mov	r7,r6
    8e54:	180b883a 	mov	r5,r3
    8e58:	100d883a 	mov	r6,r2
    8e5c:	0007b6c1 	jmpi	7b6c <___vfiprintf_internal_r>

00008e60 <__sbprintf>:
    8e60:	2880030b 	ldhu	r2,12(r5)
    8e64:	2ac01917 	ldw	r11,100(r5)
    8e68:	2a80038b 	ldhu	r10,14(r5)
    8e6c:	2a400717 	ldw	r9,28(r5)
    8e70:	2a000917 	ldw	r8,36(r5)
    8e74:	defee204 	addi	sp,sp,-1144
    8e78:	00c10004 	movi	r3,1024
    8e7c:	dc011a15 	stw	r16,1128(sp)
    8e80:	10bfff4c 	andi	r2,r2,65533
    8e84:	2821883a 	mov	r16,r5
    8e88:	d8cb883a 	add	r5,sp,r3
    8e8c:	dc811c15 	stw	r18,1136(sp)
    8e90:	dc411b15 	stw	r17,1132(sp)
    8e94:	dfc11d15 	stw	ra,1140(sp)
    8e98:	2025883a 	mov	r18,r4
    8e9c:	d881030d 	sth	r2,1036(sp)
    8ea0:	dac11915 	stw	r11,1124(sp)
    8ea4:	da81038d 	sth	r10,1038(sp)
    8ea8:	da410715 	stw	r9,1052(sp)
    8eac:	da010915 	stw	r8,1060(sp)
    8eb0:	dec10015 	stw	sp,1024(sp)
    8eb4:	dec10415 	stw	sp,1040(sp)
    8eb8:	d8c10215 	stw	r3,1032(sp)
    8ebc:	d8c10515 	stw	r3,1044(sp)
    8ec0:	d8010615 	stw	zero,1048(sp)
    8ec4:	0007b6c0 	call	7b6c <___vfiprintf_internal_r>
    8ec8:	1023883a 	mov	r17,r2
    8ecc:	10000416 	blt	r2,zero,8ee0 <__sbprintf+0x80>
    8ed0:	9009883a 	mov	r4,r18
    8ed4:	d9410004 	addi	r5,sp,1024
    8ed8:	00046300 	call	4630 <_fflush_r>
    8edc:	10000d1e 	bne	r2,zero,8f14 <__sbprintf+0xb4>
    8ee0:	d8c1030b 	ldhu	r3,1036(sp)
    8ee4:	18c0100c 	andi	r3,r3,64
    8ee8:	18000326 	beq	r3,zero,8ef8 <__sbprintf+0x98>
    8eec:	8080030b 	ldhu	r2,12(r16)
    8ef0:	10801014 	ori	r2,r2,64
    8ef4:	8080030d 	sth	r2,12(r16)
    8ef8:	8805883a 	mov	r2,r17
    8efc:	dfc11d17 	ldw	ra,1140(sp)
    8f00:	dc811c17 	ldw	r18,1136(sp)
    8f04:	dc411b17 	ldw	r17,1132(sp)
    8f08:	dc011a17 	ldw	r16,1128(sp)
    8f0c:	dec11e04 	addi	sp,sp,1144
    8f10:	f800283a 	ret
    8f14:	047fffc4 	movi	r17,-1
    8f18:	003ff106 	br	8ee0 <__alt_mem_onchip_memory2_0+0xfbfe8ee0>

00008f1c <__swbuf_r>:
    8f1c:	defffc04 	addi	sp,sp,-16
    8f20:	dc800215 	stw	r18,8(sp)
    8f24:	dc400115 	stw	r17,4(sp)
    8f28:	dc000015 	stw	r16,0(sp)
    8f2c:	dfc00315 	stw	ra,12(sp)
    8f30:	2025883a 	mov	r18,r4
    8f34:	2823883a 	mov	r17,r5
    8f38:	3021883a 	mov	r16,r6
    8f3c:	20000226 	beq	r4,zero,8f48 <__swbuf_r+0x2c>
    8f40:	20800e17 	ldw	r2,56(r4)
    8f44:	10004126 	beq	r2,zero,904c <__swbuf_r+0x130>
    8f48:	80c00617 	ldw	r3,24(r16)
    8f4c:	8180030b 	ldhu	r6,12(r16)
    8f50:	80c00215 	stw	r3,8(r16)
    8f54:	30c0020c 	andi	r3,r6,8
    8f58:	18003526 	beq	r3,zero,9030 <__swbuf_r+0x114>
    8f5c:	80c00417 	ldw	r3,16(r16)
    8f60:	18003326 	beq	r3,zero,9030 <__swbuf_r+0x114>
    8f64:	3088000c 	andi	r2,r6,8192
    8f68:	8c403fcc 	andi	r17,r17,255
    8f6c:	10001726 	beq	r2,zero,8fcc <__swbuf_r+0xb0>
    8f70:	80800017 	ldw	r2,0(r16)
    8f74:	81000517 	ldw	r4,20(r16)
    8f78:	10c7c83a 	sub	r3,r2,r3
    8f7c:	19001d0e 	bge	r3,r4,8ff4 <__swbuf_r+0xd8>
    8f80:	18c00044 	addi	r3,r3,1
    8f84:	81400217 	ldw	r5,8(r16)
    8f88:	11000044 	addi	r4,r2,1
    8f8c:	81000015 	stw	r4,0(r16)
    8f90:	297fffc4 	addi	r5,r5,-1
    8f94:	81400215 	stw	r5,8(r16)
    8f98:	14400005 	stb	r17,0(r2)
    8f9c:	80800517 	ldw	r2,20(r16)
    8fa0:	10c01d26 	beq	r2,r3,9018 <__swbuf_r+0xfc>
    8fa4:	8080030b 	ldhu	r2,12(r16)
    8fa8:	1080004c 	andi	r2,r2,1
    8fac:	1000181e 	bne	r2,zero,9010 <__swbuf_r+0xf4>
    8fb0:	8805883a 	mov	r2,r17
    8fb4:	dfc00317 	ldw	ra,12(sp)
    8fb8:	dc800217 	ldw	r18,8(sp)
    8fbc:	dc400117 	ldw	r17,4(sp)
    8fc0:	dc000017 	ldw	r16,0(sp)
    8fc4:	dec00404 	addi	sp,sp,16
    8fc8:	f800283a 	ret
    8fcc:	81001917 	ldw	r4,100(r16)
    8fd0:	00b7ffc4 	movi	r2,-8193
    8fd4:	31880014 	ori	r6,r6,8192
    8fd8:	2084703a 	and	r2,r4,r2
    8fdc:	80801915 	stw	r2,100(r16)
    8fe0:	80800017 	ldw	r2,0(r16)
    8fe4:	81000517 	ldw	r4,20(r16)
    8fe8:	8180030d 	sth	r6,12(r16)
    8fec:	10c7c83a 	sub	r3,r2,r3
    8ff0:	193fe316 	blt	r3,r4,8f80 <__alt_mem_onchip_memory2_0+0xfbfe8f80>
    8ff4:	9009883a 	mov	r4,r18
    8ff8:	800b883a 	mov	r5,r16
    8ffc:	00046300 	call	4630 <_fflush_r>
    9000:	1000091e 	bne	r2,zero,9028 <__swbuf_r+0x10c>
    9004:	80800017 	ldw	r2,0(r16)
    9008:	00c00044 	movi	r3,1
    900c:	003fdd06 	br	8f84 <__alt_mem_onchip_memory2_0+0xfbfe8f84>
    9010:	00800284 	movi	r2,10
    9014:	88bfe61e 	bne	r17,r2,8fb0 <__alt_mem_onchip_memory2_0+0xfbfe8fb0>
    9018:	9009883a 	mov	r4,r18
    901c:	800b883a 	mov	r5,r16
    9020:	00046300 	call	4630 <_fflush_r>
    9024:	103fe226 	beq	r2,zero,8fb0 <__alt_mem_onchip_memory2_0+0xfbfe8fb0>
    9028:	00bfffc4 	movi	r2,-1
    902c:	003fe106 	br	8fb4 <__alt_mem_onchip_memory2_0+0xfbfe8fb4>
    9030:	9009883a 	mov	r4,r18
    9034:	800b883a 	mov	r5,r16
    9038:	00029ac0 	call	29ac <__swsetup_r>
    903c:	103ffa1e 	bne	r2,zero,9028 <__alt_mem_onchip_memory2_0+0xfbfe9028>
    9040:	8180030b 	ldhu	r6,12(r16)
    9044:	80c00417 	ldw	r3,16(r16)
    9048:	003fc606 	br	8f64 <__alt_mem_onchip_memory2_0+0xfbfe8f64>
    904c:	0004a0c0 	call	4a0c <__sinit>
    9050:	003fbd06 	br	8f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>

00009054 <__swbuf>:
    9054:	00c00074 	movhi	r3,1
    9058:	18c74e04 	addi	r3,r3,7480
    905c:	2005883a 	mov	r2,r4
    9060:	19000017 	ldw	r4,0(r3)
    9064:	280d883a 	mov	r6,r5
    9068:	100b883a 	mov	r5,r2
    906c:	0008f1c1 	jmpi	8f1c <__swbuf_r>

00009070 <_write_r>:
    9070:	defffd04 	addi	sp,sp,-12
    9074:	dc000015 	stw	r16,0(sp)
    9078:	04000074 	movhi	r16,1
    907c:	dc400115 	stw	r17,4(sp)
    9080:	840e2604 	addi	r16,r16,14488
    9084:	2023883a 	mov	r17,r4
    9088:	2809883a 	mov	r4,r5
    908c:	300b883a 	mov	r5,r6
    9090:	380d883a 	mov	r6,r7
    9094:	dfc00215 	stw	ra,8(sp)
    9098:	80000015 	stw	zero,0(r16)
    909c:	000d33c0 	call	d33c <write>
    90a0:	00ffffc4 	movi	r3,-1
    90a4:	10c00526 	beq	r2,r3,90bc <_write_r+0x4c>
    90a8:	dfc00217 	ldw	ra,8(sp)
    90ac:	dc400117 	ldw	r17,4(sp)
    90b0:	dc000017 	ldw	r16,0(sp)
    90b4:	dec00304 	addi	sp,sp,12
    90b8:	f800283a 	ret
    90bc:	80c00017 	ldw	r3,0(r16)
    90c0:	183ff926 	beq	r3,zero,90a8 <__alt_mem_onchip_memory2_0+0xfbfe90a8>
    90c4:	88c00015 	stw	r3,0(r17)
    90c8:	003ff706 	br	90a8 <__alt_mem_onchip_memory2_0+0xfbfe90a8>

000090cc <_close_r>:
    90cc:	defffd04 	addi	sp,sp,-12
    90d0:	dc000015 	stw	r16,0(sp)
    90d4:	04000074 	movhi	r16,1
    90d8:	dc400115 	stw	r17,4(sp)
    90dc:	840e2604 	addi	r16,r16,14488
    90e0:	2023883a 	mov	r17,r4
    90e4:	2809883a 	mov	r4,r5
    90e8:	dfc00215 	stw	ra,8(sp)
    90ec:	80000015 	stw	zero,0(r16)
    90f0:	000cae00 	call	cae0 <close>
    90f4:	00ffffc4 	movi	r3,-1
    90f8:	10c00526 	beq	r2,r3,9110 <_close_r+0x44>
    90fc:	dfc00217 	ldw	ra,8(sp)
    9100:	dc400117 	ldw	r17,4(sp)
    9104:	dc000017 	ldw	r16,0(sp)
    9108:	dec00304 	addi	sp,sp,12
    910c:	f800283a 	ret
    9110:	80c00017 	ldw	r3,0(r16)
    9114:	183ff926 	beq	r3,zero,90fc <__alt_mem_onchip_memory2_0+0xfbfe90fc>
    9118:	88c00015 	stw	r3,0(r17)
    911c:	003ff706 	br	90fc <__alt_mem_onchip_memory2_0+0xfbfe90fc>

00009120 <_calloc_r>:
    9120:	298b383a 	mul	r5,r5,r6
    9124:	defffe04 	addi	sp,sp,-8
    9128:	dc000015 	stw	r16,0(sp)
    912c:	dfc00115 	stw	ra,4(sp)
    9130:	00057500 	call	5750 <_malloc_r>
    9134:	1021883a 	mov	r16,r2
    9138:	10002826 	beq	r2,zero,91dc <_calloc_r+0xbc>
    913c:	11bfff17 	ldw	r6,-4(r2)
    9140:	00bfff04 	movi	r2,-4
    9144:	00c00904 	movi	r3,36
    9148:	308c703a 	and	r6,r6,r2
    914c:	308d883a 	add	r6,r6,r2
    9150:	19801436 	bltu	r3,r6,91a4 <_calloc_r+0x84>
    9154:	008004c4 	movi	r2,19
    9158:	11800936 	bltu	r2,r6,9180 <_calloc_r+0x60>
    915c:	8005883a 	mov	r2,r16
    9160:	10000015 	stw	zero,0(r2)
    9164:	10000115 	stw	zero,4(r2)
    9168:	10000215 	stw	zero,8(r2)
    916c:	8005883a 	mov	r2,r16
    9170:	dfc00117 	ldw	ra,4(sp)
    9174:	dc000017 	ldw	r16,0(sp)
    9178:	dec00204 	addi	sp,sp,8
    917c:	f800283a 	ret
    9180:	80000015 	stw	zero,0(r16)
    9184:	80000115 	stw	zero,4(r16)
    9188:	008006c4 	movi	r2,27
    918c:	11800d2e 	bgeu	r2,r6,91c4 <_calloc_r+0xa4>
    9190:	80000215 	stw	zero,8(r16)
    9194:	80000315 	stw	zero,12(r16)
    9198:	30c00c26 	beq	r6,r3,91cc <_calloc_r+0xac>
    919c:	80800404 	addi	r2,r16,16
    91a0:	003fef06 	br	9160 <__alt_mem_onchip_memory2_0+0xfbfe9160>
    91a4:	8009883a 	mov	r4,r16
    91a8:	000b883a 	mov	r5,zero
    91ac:	000067c0 	call	67c <memset>
    91b0:	8005883a 	mov	r2,r16
    91b4:	dfc00117 	ldw	ra,4(sp)
    91b8:	dc000017 	ldw	r16,0(sp)
    91bc:	dec00204 	addi	sp,sp,8
    91c0:	f800283a 	ret
    91c4:	80800204 	addi	r2,r16,8
    91c8:	003fe506 	br	9160 <__alt_mem_onchip_memory2_0+0xfbfe9160>
    91cc:	80000415 	stw	zero,16(r16)
    91d0:	80800604 	addi	r2,r16,24
    91d4:	80000515 	stw	zero,20(r16)
    91d8:	003fe106 	br	9160 <__alt_mem_onchip_memory2_0+0xfbfe9160>
    91dc:	0005883a 	mov	r2,zero
    91e0:	003fe306 	br	9170 <__alt_mem_onchip_memory2_0+0xfbfe9170>

000091e4 <_fclose_r>:
    91e4:	28003926 	beq	r5,zero,92cc <_fclose_r+0xe8>
    91e8:	defffc04 	addi	sp,sp,-16
    91ec:	dc400115 	stw	r17,4(sp)
    91f0:	dc000015 	stw	r16,0(sp)
    91f4:	dfc00315 	stw	ra,12(sp)
    91f8:	dc800215 	stw	r18,8(sp)
    91fc:	2023883a 	mov	r17,r4
    9200:	2821883a 	mov	r16,r5
    9204:	20000226 	beq	r4,zero,9210 <_fclose_r+0x2c>
    9208:	20800e17 	ldw	r2,56(r4)
    920c:	10002726 	beq	r2,zero,92ac <_fclose_r+0xc8>
    9210:	8080030f 	ldh	r2,12(r16)
    9214:	1000071e 	bne	r2,zero,9234 <_fclose_r+0x50>
    9218:	0005883a 	mov	r2,zero
    921c:	dfc00317 	ldw	ra,12(sp)
    9220:	dc800217 	ldw	r18,8(sp)
    9224:	dc400117 	ldw	r17,4(sp)
    9228:	dc000017 	ldw	r16,0(sp)
    922c:	dec00404 	addi	sp,sp,16
    9230:	f800283a 	ret
    9234:	8809883a 	mov	r4,r17
    9238:	800b883a 	mov	r5,r16
    923c:	00044280 	call	4428 <__sflush_r>
    9240:	1025883a 	mov	r18,r2
    9244:	80800b17 	ldw	r2,44(r16)
    9248:	10000426 	beq	r2,zero,925c <_fclose_r+0x78>
    924c:	81400717 	ldw	r5,28(r16)
    9250:	8809883a 	mov	r4,r17
    9254:	103ee83a 	callr	r2
    9258:	10001616 	blt	r2,zero,92b4 <_fclose_r+0xd0>
    925c:	8080030b 	ldhu	r2,12(r16)
    9260:	1080200c 	andi	r2,r2,128
    9264:	1000151e 	bne	r2,zero,92bc <_fclose_r+0xd8>
    9268:	81400c17 	ldw	r5,48(r16)
    926c:	28000526 	beq	r5,zero,9284 <_fclose_r+0xa0>
    9270:	80801004 	addi	r2,r16,64
    9274:	28800226 	beq	r5,r2,9280 <_fclose_r+0x9c>
    9278:	8809883a 	mov	r4,r17
    927c:	0004b800 	call	4b80 <_free_r>
    9280:	80000c15 	stw	zero,48(r16)
    9284:	81401117 	ldw	r5,68(r16)
    9288:	28000326 	beq	r5,zero,9298 <_fclose_r+0xb4>
    928c:	8809883a 	mov	r4,r17
    9290:	0004b800 	call	4b80 <_free_r>
    9294:	80001115 	stw	zero,68(r16)
    9298:	0004a1c0 	call	4a1c <__sfp_lock_acquire>
    929c:	8000030d 	sth	zero,12(r16)
    92a0:	0004a200 	call	4a20 <__sfp_lock_release>
    92a4:	9005883a 	mov	r2,r18
    92a8:	003fdc06 	br	921c <__alt_mem_onchip_memory2_0+0xfbfe921c>
    92ac:	0004a0c0 	call	4a0c <__sinit>
    92b0:	003fd706 	br	9210 <__alt_mem_onchip_memory2_0+0xfbfe9210>
    92b4:	04bfffc4 	movi	r18,-1
    92b8:	003fe806 	br	925c <__alt_mem_onchip_memory2_0+0xfbfe925c>
    92bc:	81400417 	ldw	r5,16(r16)
    92c0:	8809883a 	mov	r4,r17
    92c4:	0004b800 	call	4b80 <_free_r>
    92c8:	003fe706 	br	9268 <__alt_mem_onchip_memory2_0+0xfbfe9268>
    92cc:	0005883a 	mov	r2,zero
    92d0:	f800283a 	ret

000092d4 <fclose>:
    92d4:	00800074 	movhi	r2,1
    92d8:	10874e04 	addi	r2,r2,7480
    92dc:	200b883a 	mov	r5,r4
    92e0:	11000017 	ldw	r4,0(r2)
    92e4:	00091e41 	jmpi	91e4 <_fclose_r>

000092e8 <_fputwc_r>:
    92e8:	3080030b 	ldhu	r2,12(r6)
    92ec:	defff804 	addi	sp,sp,-32
    92f0:	dcc00415 	stw	r19,16(sp)
    92f4:	dc800315 	stw	r18,12(sp)
    92f8:	dc000115 	stw	r16,4(sp)
    92fc:	dfc00715 	stw	ra,28(sp)
    9300:	dd400615 	stw	r21,24(sp)
    9304:	dd000515 	stw	r20,20(sp)
    9308:	dc400215 	stw	r17,8(sp)
    930c:	10c8000c 	andi	r3,r2,8192
    9310:	3021883a 	mov	r16,r6
    9314:	2027883a 	mov	r19,r4
    9318:	2825883a 	mov	r18,r5
    931c:	1800051e 	bne	r3,zero,9334 <_fputwc_r+0x4c>
    9320:	30c01917 	ldw	r3,100(r6)
    9324:	10880014 	ori	r2,r2,8192
    9328:	3080030d 	sth	r2,12(r6)
    932c:	18880014 	ori	r2,r3,8192
    9330:	30801915 	stw	r2,100(r6)
    9334:	00055400 	call	5540 <__locale_mb_cur_max>
    9338:	00c00044 	movi	r3,1
    933c:	10c03e26 	beq	r2,r3,9438 <_fputwc_r+0x150>
    9340:	9809883a 	mov	r4,r19
    9344:	d80b883a 	mov	r5,sp
    9348:	900d883a 	mov	r6,r18
    934c:	81c01704 	addi	r7,r16,92
    9350:	000962c0 	call	962c <_wcrtomb_r>
    9354:	1029883a 	mov	r20,r2
    9358:	00bfffc4 	movi	r2,-1
    935c:	a0802026 	beq	r20,r2,93e0 <_fputwc_r+0xf8>
    9360:	d9400003 	ldbu	r5,0(sp)
    9364:	a0001c26 	beq	r20,zero,93d8 <_fputwc_r+0xf0>
    9368:	0023883a 	mov	r17,zero
    936c:	05400284 	movi	r21,10
    9370:	00000906 	br	9398 <_fputwc_r+0xb0>
    9374:	80800017 	ldw	r2,0(r16)
    9378:	11400005 	stb	r5,0(r2)
    937c:	80c00017 	ldw	r3,0(r16)
    9380:	18c00044 	addi	r3,r3,1
    9384:	80c00015 	stw	r3,0(r16)
    9388:	8c400044 	addi	r17,r17,1
    938c:	dc45883a 	add	r2,sp,r17
    9390:	8d00112e 	bgeu	r17,r20,93d8 <_fputwc_r+0xf0>
    9394:	11400003 	ldbu	r5,0(r2)
    9398:	80c00217 	ldw	r3,8(r16)
    939c:	18ffffc4 	addi	r3,r3,-1
    93a0:	80c00215 	stw	r3,8(r16)
    93a4:	183ff30e 	bge	r3,zero,9374 <__alt_mem_onchip_memory2_0+0xfbfe9374>
    93a8:	80800617 	ldw	r2,24(r16)
    93ac:	18801916 	blt	r3,r2,9414 <_fputwc_r+0x12c>
    93b0:	80800017 	ldw	r2,0(r16)
    93b4:	11400005 	stb	r5,0(r2)
    93b8:	80800017 	ldw	r2,0(r16)
    93bc:	10c00003 	ldbu	r3,0(r2)
    93c0:	10800044 	addi	r2,r2,1
    93c4:	1d402326 	beq	r3,r21,9454 <_fputwc_r+0x16c>
    93c8:	80800015 	stw	r2,0(r16)
    93cc:	8c400044 	addi	r17,r17,1
    93d0:	dc45883a 	add	r2,sp,r17
    93d4:	8d3fef36 	bltu	r17,r20,9394 <__alt_mem_onchip_memory2_0+0xfbfe9394>
    93d8:	9005883a 	mov	r2,r18
    93dc:	00000406 	br	93f0 <_fputwc_r+0x108>
    93e0:	80c0030b 	ldhu	r3,12(r16)
    93e4:	a005883a 	mov	r2,r20
    93e8:	18c01014 	ori	r3,r3,64
    93ec:	80c0030d 	sth	r3,12(r16)
    93f0:	dfc00717 	ldw	ra,28(sp)
    93f4:	dd400617 	ldw	r21,24(sp)
    93f8:	dd000517 	ldw	r20,20(sp)
    93fc:	dcc00417 	ldw	r19,16(sp)
    9400:	dc800317 	ldw	r18,12(sp)
    9404:	dc400217 	ldw	r17,8(sp)
    9408:	dc000117 	ldw	r16,4(sp)
    940c:	dec00804 	addi	sp,sp,32
    9410:	f800283a 	ret
    9414:	9809883a 	mov	r4,r19
    9418:	29403fcc 	andi	r5,r5,255
    941c:	800d883a 	mov	r6,r16
    9420:	0008f1c0 	call	8f1c <__swbuf_r>
    9424:	10bfffe0 	cmpeqi	r2,r2,-1
    9428:	10803fcc 	andi	r2,r2,255
    942c:	103fd626 	beq	r2,zero,9388 <__alt_mem_onchip_memory2_0+0xfbfe9388>
    9430:	00bfffc4 	movi	r2,-1
    9434:	003fee06 	br	93f0 <__alt_mem_onchip_memory2_0+0xfbfe93f0>
    9438:	90ffffc4 	addi	r3,r18,-1
    943c:	01003f84 	movi	r4,254
    9440:	20ffbf36 	bltu	r4,r3,9340 <__alt_mem_onchip_memory2_0+0xfbfe9340>
    9444:	900b883a 	mov	r5,r18
    9448:	dc800005 	stb	r18,0(sp)
    944c:	1029883a 	mov	r20,r2
    9450:	003fc506 	br	9368 <__alt_mem_onchip_memory2_0+0xfbfe9368>
    9454:	9809883a 	mov	r4,r19
    9458:	a80b883a 	mov	r5,r21
    945c:	800d883a 	mov	r6,r16
    9460:	0008f1c0 	call	8f1c <__swbuf_r>
    9464:	10bfffe0 	cmpeqi	r2,r2,-1
    9468:	003fef06 	br	9428 <__alt_mem_onchip_memory2_0+0xfbfe9428>

0000946c <fputwc>:
    946c:	00800074 	movhi	r2,1
    9470:	defffc04 	addi	sp,sp,-16
    9474:	10874e04 	addi	r2,r2,7480
    9478:	dc000115 	stw	r16,4(sp)
    947c:	14000017 	ldw	r16,0(r2)
    9480:	dc400215 	stw	r17,8(sp)
    9484:	dfc00315 	stw	ra,12(sp)
    9488:	2023883a 	mov	r17,r4
    948c:	280d883a 	mov	r6,r5
    9490:	80000626 	beq	r16,zero,94ac <fputwc+0x40>
    9494:	80800e17 	ldw	r2,56(r16)
    9498:	1000041e 	bne	r2,zero,94ac <fputwc+0x40>
    949c:	8009883a 	mov	r4,r16
    94a0:	d9400015 	stw	r5,0(sp)
    94a4:	0004a0c0 	call	4a0c <__sinit>
    94a8:	d9800017 	ldw	r6,0(sp)
    94ac:	8009883a 	mov	r4,r16
    94b0:	880b883a 	mov	r5,r17
    94b4:	dfc00317 	ldw	ra,12(sp)
    94b8:	dc400217 	ldw	r17,8(sp)
    94bc:	dc000117 	ldw	r16,4(sp)
    94c0:	dec00404 	addi	sp,sp,16
    94c4:	00092e81 	jmpi	92e8 <_fputwc_r>

000094c8 <_fstat_r>:
    94c8:	defffd04 	addi	sp,sp,-12
    94cc:	dc000015 	stw	r16,0(sp)
    94d0:	04000074 	movhi	r16,1
    94d4:	dc400115 	stw	r17,4(sp)
    94d8:	840e2604 	addi	r16,r16,14488
    94dc:	2023883a 	mov	r17,r4
    94e0:	2809883a 	mov	r4,r5
    94e4:	300b883a 	mov	r5,r6
    94e8:	dfc00215 	stw	ra,8(sp)
    94ec:	80000015 	stw	zero,0(r16)
    94f0:	000cc2c0 	call	cc2c <fstat>
    94f4:	00ffffc4 	movi	r3,-1
    94f8:	10c00526 	beq	r2,r3,9510 <_fstat_r+0x48>
    94fc:	dfc00217 	ldw	ra,8(sp)
    9500:	dc400117 	ldw	r17,4(sp)
    9504:	dc000017 	ldw	r16,0(sp)
    9508:	dec00304 	addi	sp,sp,12
    950c:	f800283a 	ret
    9510:	80c00017 	ldw	r3,0(r16)
    9514:	183ff926 	beq	r3,zero,94fc <__alt_mem_onchip_memory2_0+0xfbfe94fc>
    9518:	88c00015 	stw	r3,0(r17)
    951c:	003ff706 	br	94fc <__alt_mem_onchip_memory2_0+0xfbfe94fc>

00009520 <_isatty_r>:
    9520:	defffd04 	addi	sp,sp,-12
    9524:	dc000015 	stw	r16,0(sp)
    9528:	04000074 	movhi	r16,1
    952c:	dc400115 	stw	r17,4(sp)
    9530:	840e2604 	addi	r16,r16,14488
    9534:	2023883a 	mov	r17,r4
    9538:	2809883a 	mov	r4,r5
    953c:	dfc00215 	stw	ra,8(sp)
    9540:	80000015 	stw	zero,0(r16)
    9544:	000cd2c0 	call	cd2c <isatty>
    9548:	00ffffc4 	movi	r3,-1
    954c:	10c00526 	beq	r2,r3,9564 <_isatty_r+0x44>
    9550:	dfc00217 	ldw	ra,8(sp)
    9554:	dc400117 	ldw	r17,4(sp)
    9558:	dc000017 	ldw	r16,0(sp)
    955c:	dec00304 	addi	sp,sp,12
    9560:	f800283a 	ret
    9564:	80c00017 	ldw	r3,0(r16)
    9568:	183ff926 	beq	r3,zero,9550 <__alt_mem_onchip_memory2_0+0xfbfe9550>
    956c:	88c00015 	stw	r3,0(r17)
    9570:	003ff706 	br	9550 <__alt_mem_onchip_memory2_0+0xfbfe9550>

00009574 <_lseek_r>:
    9574:	defffd04 	addi	sp,sp,-12
    9578:	dc000015 	stw	r16,0(sp)
    957c:	04000074 	movhi	r16,1
    9580:	dc400115 	stw	r17,4(sp)
    9584:	840e2604 	addi	r16,r16,14488
    9588:	2023883a 	mov	r17,r4
    958c:	2809883a 	mov	r4,r5
    9590:	300b883a 	mov	r5,r6
    9594:	380d883a 	mov	r6,r7
    9598:	dfc00215 	stw	ra,8(sp)
    959c:	80000015 	stw	zero,0(r16)
    95a0:	000cf040 	call	cf04 <lseek>
    95a4:	00ffffc4 	movi	r3,-1
    95a8:	10c00526 	beq	r2,r3,95c0 <_lseek_r+0x4c>
    95ac:	dfc00217 	ldw	ra,8(sp)
    95b0:	dc400117 	ldw	r17,4(sp)
    95b4:	dc000017 	ldw	r16,0(sp)
    95b8:	dec00304 	addi	sp,sp,12
    95bc:	f800283a 	ret
    95c0:	80c00017 	ldw	r3,0(r16)
    95c4:	183ff926 	beq	r3,zero,95ac <__alt_mem_onchip_memory2_0+0xfbfe95ac>
    95c8:	88c00015 	stw	r3,0(r17)
    95cc:	003ff706 	br	95ac <__alt_mem_onchip_memory2_0+0xfbfe95ac>

000095d0 <_read_r>:
    95d0:	defffd04 	addi	sp,sp,-12
    95d4:	dc000015 	stw	r16,0(sp)
    95d8:	04000074 	movhi	r16,1
    95dc:	dc400115 	stw	r17,4(sp)
    95e0:	840e2604 	addi	r16,r16,14488
    95e4:	2023883a 	mov	r17,r4
    95e8:	2809883a 	mov	r4,r5
    95ec:	300b883a 	mov	r5,r6
    95f0:	380d883a 	mov	r6,r7
    95f4:	dfc00215 	stw	ra,8(sp)
    95f8:	80000015 	stw	zero,0(r16)
    95fc:	000d0e00 	call	d0e0 <read>
    9600:	00ffffc4 	movi	r3,-1
    9604:	10c00526 	beq	r2,r3,961c <_read_r+0x4c>
    9608:	dfc00217 	ldw	ra,8(sp)
    960c:	dc400117 	ldw	r17,4(sp)
    9610:	dc000017 	ldw	r16,0(sp)
    9614:	dec00304 	addi	sp,sp,12
    9618:	f800283a 	ret
    961c:	80c00017 	ldw	r3,0(r16)
    9620:	183ff926 	beq	r3,zero,9608 <__alt_mem_onchip_memory2_0+0xfbfe9608>
    9624:	88c00015 	stw	r3,0(r17)
    9628:	003ff706 	br	9608 <__alt_mem_onchip_memory2_0+0xfbfe9608>

0000962c <_wcrtomb_r>:
    962c:	defff604 	addi	sp,sp,-40
    9630:	00800074 	movhi	r2,1
    9634:	dc800815 	stw	r18,32(sp)
    9638:	dc400715 	stw	r17,28(sp)
    963c:	dc000615 	stw	r16,24(sp)
    9640:	10875204 	addi	r2,r2,7496
    9644:	dfc00915 	stw	ra,36(sp)
    9648:	2021883a 	mov	r16,r4
    964c:	3823883a 	mov	r17,r7
    9650:	14800017 	ldw	r18,0(r2)
    9654:	28001426 	beq	r5,zero,96a8 <_wcrtomb_r+0x7c>
    9658:	d9400415 	stw	r5,16(sp)
    965c:	d9800515 	stw	r6,20(sp)
    9660:	00055340 	call	5534 <__locale_charset>
    9664:	d9400417 	ldw	r5,16(sp)
    9668:	d9800517 	ldw	r6,20(sp)
    966c:	8009883a 	mov	r4,r16
    9670:	dc400015 	stw	r17,0(sp)
    9674:	100f883a 	mov	r7,r2
    9678:	903ee83a 	callr	r18
    967c:	00ffffc4 	movi	r3,-1
    9680:	10c0031e 	bne	r2,r3,9690 <_wcrtomb_r+0x64>
    9684:	88000015 	stw	zero,0(r17)
    9688:	00c02284 	movi	r3,138
    968c:	80c00015 	stw	r3,0(r16)
    9690:	dfc00917 	ldw	ra,36(sp)
    9694:	dc800817 	ldw	r18,32(sp)
    9698:	dc400717 	ldw	r17,28(sp)
    969c:	dc000617 	ldw	r16,24(sp)
    96a0:	dec00a04 	addi	sp,sp,40
    96a4:	f800283a 	ret
    96a8:	00055340 	call	5534 <__locale_charset>
    96ac:	8009883a 	mov	r4,r16
    96b0:	dc400015 	stw	r17,0(sp)
    96b4:	d9400104 	addi	r5,sp,4
    96b8:	000d883a 	mov	r6,zero
    96bc:	100f883a 	mov	r7,r2
    96c0:	903ee83a 	callr	r18
    96c4:	003fed06 	br	967c <__alt_mem_onchip_memory2_0+0xfbfe967c>

000096c8 <wcrtomb>:
    96c8:	defff604 	addi	sp,sp,-40
    96cc:	00800074 	movhi	r2,1
    96d0:	dc800615 	stw	r18,24(sp)
    96d4:	dc400515 	stw	r17,20(sp)
    96d8:	dc000415 	stw	r16,16(sp)
    96dc:	10874e04 	addi	r2,r2,7480
    96e0:	dfc00915 	stw	ra,36(sp)
    96e4:	dd000815 	stw	r20,32(sp)
    96e8:	dcc00715 	stw	r19,28(sp)
    96ec:	2021883a 	mov	r16,r4
    96f0:	3025883a 	mov	r18,r6
    96f4:	14400017 	ldw	r17,0(r2)
    96f8:	20001826 	beq	r4,zero,975c <wcrtomb+0x94>
    96fc:	00800074 	movhi	r2,1
    9700:	10875204 	addi	r2,r2,7496
    9704:	15000017 	ldw	r20,0(r2)
    9708:	2827883a 	mov	r19,r5
    970c:	00055340 	call	5534 <__locale_charset>
    9710:	8809883a 	mov	r4,r17
    9714:	dc800015 	stw	r18,0(sp)
    9718:	800b883a 	mov	r5,r16
    971c:	980d883a 	mov	r6,r19
    9720:	100f883a 	mov	r7,r2
    9724:	a03ee83a 	callr	r20
    9728:	00ffffc4 	movi	r3,-1
    972c:	10c0031e 	bne	r2,r3,973c <wcrtomb+0x74>
    9730:	90000015 	stw	zero,0(r18)
    9734:	00c02284 	movi	r3,138
    9738:	88c00015 	stw	r3,0(r17)
    973c:	dfc00917 	ldw	ra,36(sp)
    9740:	dd000817 	ldw	r20,32(sp)
    9744:	dcc00717 	ldw	r19,28(sp)
    9748:	dc800617 	ldw	r18,24(sp)
    974c:	dc400517 	ldw	r17,20(sp)
    9750:	dc000417 	ldw	r16,16(sp)
    9754:	dec00a04 	addi	sp,sp,40
    9758:	f800283a 	ret
    975c:	00800074 	movhi	r2,1
    9760:	10875204 	addi	r2,r2,7496
    9764:	14000017 	ldw	r16,0(r2)
    9768:	00055340 	call	5534 <__locale_charset>
    976c:	8809883a 	mov	r4,r17
    9770:	dc800015 	stw	r18,0(sp)
    9774:	d9400104 	addi	r5,sp,4
    9778:	000d883a 	mov	r6,zero
    977c:	100f883a 	mov	r7,r2
    9780:	803ee83a 	callr	r16
    9784:	003fe806 	br	9728 <__alt_mem_onchip_memory2_0+0xfbfe9728>

00009788 <__ascii_wctomb>:
    9788:	28000526 	beq	r5,zero,97a0 <__ascii_wctomb+0x18>
    978c:	00803fc4 	movi	r2,255
    9790:	11800536 	bltu	r2,r6,97a8 <__ascii_wctomb+0x20>
    9794:	29800005 	stb	r6,0(r5)
    9798:	00800044 	movi	r2,1
    979c:	f800283a 	ret
    97a0:	0005883a 	mov	r2,zero
    97a4:	f800283a 	ret
    97a8:	00802284 	movi	r2,138
    97ac:	20800015 	stw	r2,0(r4)
    97b0:	00bfffc4 	movi	r2,-1
    97b4:	f800283a 	ret

000097b8 <_wctomb_r>:
    97b8:	00800074 	movhi	r2,1
    97bc:	defff904 	addi	sp,sp,-28
    97c0:	10875204 	addi	r2,r2,7496
    97c4:	dfc00615 	stw	ra,24(sp)
    97c8:	dc400515 	stw	r17,20(sp)
    97cc:	dc000415 	stw	r16,16(sp)
    97d0:	3823883a 	mov	r17,r7
    97d4:	14000017 	ldw	r16,0(r2)
    97d8:	d9000115 	stw	r4,4(sp)
    97dc:	d9400215 	stw	r5,8(sp)
    97e0:	d9800315 	stw	r6,12(sp)
    97e4:	00055340 	call	5534 <__locale_charset>
    97e8:	d9000117 	ldw	r4,4(sp)
    97ec:	d9400217 	ldw	r5,8(sp)
    97f0:	d9800317 	ldw	r6,12(sp)
    97f4:	dc400015 	stw	r17,0(sp)
    97f8:	100f883a 	mov	r7,r2
    97fc:	803ee83a 	callr	r16
    9800:	dfc00617 	ldw	ra,24(sp)
    9804:	dc400517 	ldw	r17,20(sp)
    9808:	dc000417 	ldw	r16,16(sp)
    980c:	dec00704 	addi	sp,sp,28
    9810:	f800283a 	ret

00009814 <__udivdi3>:
    9814:	defff504 	addi	sp,sp,-44
    9818:	dcc00415 	stw	r19,16(sp)
    981c:	dc000115 	stw	r16,4(sp)
    9820:	dfc00a15 	stw	ra,40(sp)
    9824:	df000915 	stw	fp,36(sp)
    9828:	ddc00815 	stw	r23,32(sp)
    982c:	dd800715 	stw	r22,28(sp)
    9830:	dd400615 	stw	r21,24(sp)
    9834:	dd000515 	stw	r20,20(sp)
    9838:	dc800315 	stw	r18,12(sp)
    983c:	dc400215 	stw	r17,8(sp)
    9840:	2027883a 	mov	r19,r4
    9844:	2821883a 	mov	r16,r5
    9848:	3800421e 	bne	r7,zero,9954 <__udivdi3+0x140>
    984c:	3025883a 	mov	r18,r6
    9850:	2023883a 	mov	r17,r4
    9854:	2980542e 	bgeu	r5,r6,99a8 <__udivdi3+0x194>
    9858:	00bfffd4 	movui	r2,65535
    985c:	282d883a 	mov	r22,r5
    9860:	1180a836 	bltu	r2,r6,9b04 <__udivdi3+0x2f0>
    9864:	00803fc4 	movi	r2,255
    9868:	1181422e 	bgeu	r2,r6,9d74 <__udivdi3+0x560>
    986c:	00800204 	movi	r2,8
    9870:	1007883a 	mov	r3,r2
    9874:	3084d83a 	srl	r2,r6,r2
    9878:	01000074 	movhi	r4,1
    987c:	21001004 	addi	r4,r4,64
    9880:	2085883a 	add	r2,r4,r2
    9884:	10800003 	ldbu	r2,0(r2)
    9888:	10c7883a 	add	r3,r2,r3
    988c:	00800804 	movi	r2,32
    9890:	10c5c83a 	sub	r2,r2,r3
    9894:	10000526 	beq	r2,zero,98ac <__udivdi3+0x98>
    9898:	80a0983a 	sll	r16,r16,r2
    989c:	98c6d83a 	srl	r3,r19,r3
    98a0:	30a4983a 	sll	r18,r6,r2
    98a4:	98a2983a 	sll	r17,r19,r2
    98a8:	80ecb03a 	or	r22,r16,r3
    98ac:	902ad43a 	srli	r21,r18,16
    98b0:	b009883a 	mov	r4,r22
    98b4:	953fffcc 	andi	r20,r18,65535
    98b8:	a80b883a 	mov	r5,r21
    98bc:	000a4880 	call	a488 <__umodsi3>
    98c0:	b009883a 	mov	r4,r22
    98c4:	a80b883a 	mov	r5,r21
    98c8:	1027883a 	mov	r19,r2
    98cc:	000a4800 	call	a480 <__udivsi3>
    98d0:	1021883a 	mov	r16,r2
    98d4:	8806d43a 	srli	r3,r17,16
    98d8:	9804943a 	slli	r2,r19,16
    98dc:	8527383a 	mul	r19,r16,r20
    98e0:	10c4b03a 	or	r2,r2,r3
    98e4:	14c0052e 	bgeu	r2,r19,98fc <__udivdi3+0xe8>
    98e8:	1485883a 	add	r2,r2,r18
    98ec:	80ffffc4 	addi	r3,r16,-1
    98f0:	14800136 	bltu	r2,r18,98f8 <__udivdi3+0xe4>
    98f4:	14c13436 	bltu	r2,r19,9dc8 <__udivdi3+0x5b4>
    98f8:	1821883a 	mov	r16,r3
    98fc:	14e7c83a 	sub	r19,r2,r19
    9900:	9809883a 	mov	r4,r19
    9904:	a80b883a 	mov	r5,r21
    9908:	000a4880 	call	a488 <__umodsi3>
    990c:	102d883a 	mov	r22,r2
    9910:	9809883a 	mov	r4,r19
    9914:	a80b883a 	mov	r5,r21
    9918:	000a4800 	call	a480 <__udivsi3>
    991c:	b02c943a 	slli	r22,r22,16
    9920:	1529383a 	mul	r20,r2,r20
    9924:	8c7fffcc 	andi	r17,r17,65535
    9928:	b462b03a 	or	r17,r22,r17
    992c:	8d00052e 	bgeu	r17,r20,9944 <__udivdi3+0x130>
    9930:	8ca3883a 	add	r17,r17,r18
    9934:	10ffffc4 	addi	r3,r2,-1
    9938:	8c80f636 	bltu	r17,r18,9d14 <__udivdi3+0x500>
    993c:	8d00f52e 	bgeu	r17,r20,9d14 <__udivdi3+0x500>
    9940:	10bfff84 	addi	r2,r2,-2
    9944:	8020943a 	slli	r16,r16,16
    9948:	0007883a 	mov	r3,zero
    994c:	1404b03a 	or	r2,r2,r16
    9950:	00005b06 	br	9ac0 <__udivdi3+0x2ac>
    9954:	29c05836 	bltu	r5,r7,9ab8 <__udivdi3+0x2a4>
    9958:	00bfffd4 	movui	r2,65535
    995c:	11c0642e 	bgeu	r2,r7,9af0 <__udivdi3+0x2dc>
    9960:	00804034 	movhi	r2,256
    9964:	10bfffc4 	addi	r2,r2,-1
    9968:	11c0f32e 	bgeu	r2,r7,9d38 <__udivdi3+0x524>
    996c:	00c00604 	movi	r3,24
    9970:	180b883a 	mov	r5,r3
    9974:	38c6d83a 	srl	r3,r7,r3
    9978:	00800074 	movhi	r2,1
    997c:	10801004 	addi	r2,r2,64
    9980:	10c7883a 	add	r3,r2,r3
    9984:	18c00003 	ldbu	r3,0(r3)
    9988:	01000804 	movi	r4,32
    998c:	1947883a 	add	r3,r3,r5
    9990:	20e5c83a 	sub	r18,r4,r3
    9994:	9000661e 	bne	r18,zero,9b30 <__udivdi3+0x31c>
    9998:	3c00f936 	bltu	r7,r16,9d80 <__udivdi3+0x56c>
    999c:	9985403a 	cmpgeu	r2,r19,r6
    99a0:	0007883a 	mov	r3,zero
    99a4:	00004606 	br	9ac0 <__udivdi3+0x2ac>
    99a8:	3000041e 	bne	r6,zero,99bc <__udivdi3+0x1a8>
    99ac:	01000044 	movi	r4,1
    99b0:	000b883a 	mov	r5,zero
    99b4:	000a4800 	call	a480 <__udivsi3>
    99b8:	1025883a 	mov	r18,r2
    99bc:	00bfffd4 	movui	r2,65535
    99c0:	1480562e 	bgeu	r2,r18,9b1c <__udivdi3+0x308>
    99c4:	00804034 	movhi	r2,256
    99c8:	10bfffc4 	addi	r2,r2,-1
    99cc:	1480e32e 	bgeu	r2,r18,9d5c <__udivdi3+0x548>
    99d0:	00800604 	movi	r2,24
    99d4:	1007883a 	mov	r3,r2
    99d8:	9084d83a 	srl	r2,r18,r2
    99dc:	01000074 	movhi	r4,1
    99e0:	21001004 	addi	r4,r4,64
    99e4:	2085883a 	add	r2,r4,r2
    99e8:	10800003 	ldbu	r2,0(r2)
    99ec:	10c5883a 	add	r2,r2,r3
    99f0:	00c00804 	movi	r3,32
    99f4:	1887c83a 	sub	r3,r3,r2
    99f8:	1800911e 	bne	r3,zero,9c40 <__udivdi3+0x42c>
    99fc:	9028d43a 	srli	r20,r18,16
    9a00:	84a1c83a 	sub	r16,r16,r18
    9a04:	957fffcc 	andi	r21,r18,65535
    9a08:	00c00044 	movi	r3,1
    9a0c:	8009883a 	mov	r4,r16
    9a10:	a00b883a 	mov	r5,r20
    9a14:	d8c00015 	stw	r3,0(sp)
    9a18:	000a4880 	call	a488 <__umodsi3>
    9a1c:	8009883a 	mov	r4,r16
    9a20:	a00b883a 	mov	r5,r20
    9a24:	1027883a 	mov	r19,r2
    9a28:	000a4800 	call	a480 <__udivsi3>
    9a2c:	1021883a 	mov	r16,r2
    9a30:	880cd43a 	srli	r6,r17,16
    9a34:	9804943a 	slli	r2,r19,16
    9a38:	8567383a 	mul	r19,r16,r21
    9a3c:	d8c00017 	ldw	r3,0(sp)
    9a40:	1188b03a 	or	r4,r2,r6
    9a44:	24c0052e 	bgeu	r4,r19,9a5c <__udivdi3+0x248>
    9a48:	2489883a 	add	r4,r4,r18
    9a4c:	80bfffc4 	addi	r2,r16,-1
    9a50:	24800136 	bltu	r4,r18,9a58 <__udivdi3+0x244>
    9a54:	24c0d936 	bltu	r4,r19,9dbc <__udivdi3+0x5a8>
    9a58:	1021883a 	mov	r16,r2
    9a5c:	24e7c83a 	sub	r19,r4,r19
    9a60:	9809883a 	mov	r4,r19
    9a64:	a00b883a 	mov	r5,r20
    9a68:	d8c00015 	stw	r3,0(sp)
    9a6c:	000a4880 	call	a488 <__umodsi3>
    9a70:	102d883a 	mov	r22,r2
    9a74:	9809883a 	mov	r4,r19
    9a78:	a00b883a 	mov	r5,r20
    9a7c:	000a4800 	call	a480 <__udivsi3>
    9a80:	b02c943a 	slli	r22,r22,16
    9a84:	156b383a 	mul	r21,r2,r21
    9a88:	8c7fffcc 	andi	r17,r17,65535
    9a8c:	b462b03a 	or	r17,r22,r17
    9a90:	d8c00017 	ldw	r3,0(sp)
    9a94:	8d40052e 	bgeu	r17,r21,9aac <__udivdi3+0x298>
    9a98:	8ca3883a 	add	r17,r17,r18
    9a9c:	113fffc4 	addi	r4,r2,-1
    9aa0:	8c809a36 	bltu	r17,r18,9d0c <__udivdi3+0x4f8>
    9aa4:	8d40992e 	bgeu	r17,r21,9d0c <__udivdi3+0x4f8>
    9aa8:	10bfff84 	addi	r2,r2,-2
    9aac:	8020943a 	slli	r16,r16,16
    9ab0:	1404b03a 	or	r2,r2,r16
    9ab4:	00000206 	br	9ac0 <__udivdi3+0x2ac>
    9ab8:	0007883a 	mov	r3,zero
    9abc:	0005883a 	mov	r2,zero
    9ac0:	dfc00a17 	ldw	ra,40(sp)
    9ac4:	df000917 	ldw	fp,36(sp)
    9ac8:	ddc00817 	ldw	r23,32(sp)
    9acc:	dd800717 	ldw	r22,28(sp)
    9ad0:	dd400617 	ldw	r21,24(sp)
    9ad4:	dd000517 	ldw	r20,20(sp)
    9ad8:	dcc00417 	ldw	r19,16(sp)
    9adc:	dc800317 	ldw	r18,12(sp)
    9ae0:	dc400217 	ldw	r17,8(sp)
    9ae4:	dc000117 	ldw	r16,4(sp)
    9ae8:	dec00b04 	addi	sp,sp,44
    9aec:	f800283a 	ret
    9af0:	00803fc4 	movi	r2,255
    9af4:	11c0932e 	bgeu	r2,r7,9d44 <__udivdi3+0x530>
    9af8:	00c00204 	movi	r3,8
    9afc:	180b883a 	mov	r5,r3
    9b00:	003f9c06 	br	9974 <__alt_mem_onchip_memory2_0+0xfbfe9974>
    9b04:	00804034 	movhi	r2,256
    9b08:	10bfffc4 	addi	r2,r2,-1
    9b0c:	1180902e 	bgeu	r2,r6,9d50 <__udivdi3+0x53c>
    9b10:	00800604 	movi	r2,24
    9b14:	1007883a 	mov	r3,r2
    9b18:	003f5606 	br	9874 <__alt_mem_onchip_memory2_0+0xfbfe9874>
    9b1c:	00803fc4 	movi	r2,255
    9b20:	1480912e 	bgeu	r2,r18,9d68 <__udivdi3+0x554>
    9b24:	00800204 	movi	r2,8
    9b28:	1007883a 	mov	r3,r2
    9b2c:	003faa06 	br	99d8 <__alt_mem_onchip_memory2_0+0xfbfe99d8>
    9b30:	30eed83a 	srl	r23,r6,r3
    9b34:	3c8e983a 	sll	r7,r7,r18
    9b38:	80f8d83a 	srl	fp,r16,r3
    9b3c:	98c6d83a 	srl	r3,r19,r3
    9b40:	3deeb03a 	or	r23,r7,r23
    9b44:	b828d43a 	srli	r20,r23,16
    9b48:	84a0983a 	sll	r16,r16,r18
    9b4c:	e009883a 	mov	r4,fp
    9b50:	a00b883a 	mov	r5,r20
    9b54:	80e2b03a 	or	r17,r16,r3
    9b58:	34aa983a 	sll	r21,r6,r18
    9b5c:	000a4880 	call	a488 <__umodsi3>
    9b60:	e009883a 	mov	r4,fp
    9b64:	a00b883a 	mov	r5,r20
    9b68:	102d883a 	mov	r22,r2
    9b6c:	000a4800 	call	a480 <__udivsi3>
    9b70:	1021883a 	mov	r16,r2
    9b74:	bf3fffcc 	andi	fp,r23,65535
    9b78:	b004943a 	slli	r2,r22,16
    9b7c:	8808d43a 	srli	r4,r17,16
    9b80:	872d383a 	mul	r22,r16,fp
    9b84:	1104b03a 	or	r2,r2,r4
    9b88:	1580042e 	bgeu	r2,r22,9b9c <__udivdi3+0x388>
    9b8c:	15c5883a 	add	r2,r2,r23
    9b90:	80ffffc4 	addi	r3,r16,-1
    9b94:	15c0812e 	bgeu	r2,r23,9d9c <__udivdi3+0x588>
    9b98:	1821883a 	mov	r16,r3
    9b9c:	15adc83a 	sub	r22,r2,r22
    9ba0:	b009883a 	mov	r4,r22
    9ba4:	a00b883a 	mov	r5,r20
    9ba8:	000a4880 	call	a488 <__umodsi3>
    9bac:	a00b883a 	mov	r5,r20
    9bb0:	b009883a 	mov	r4,r22
    9bb4:	d8800015 	stw	r2,0(sp)
    9bb8:	000a4800 	call	a480 <__udivsi3>
    9bbc:	d8c00017 	ldw	r3,0(sp)
    9bc0:	170b383a 	mul	r5,r2,fp
    9bc4:	8c7fffcc 	andi	r17,r17,65535
    9bc8:	1806943a 	slli	r3,r3,16
    9bcc:	1c46b03a 	or	r3,r3,r17
    9bd0:	1940042e 	bgeu	r3,r5,9be4 <__udivdi3+0x3d0>
    9bd4:	1dc7883a 	add	r3,r3,r23
    9bd8:	113fffc4 	addi	r4,r2,-1
    9bdc:	1dc06b2e 	bgeu	r3,r23,9d8c <__udivdi3+0x578>
    9be0:	2005883a 	mov	r2,r4
    9be4:	8020943a 	slli	r16,r16,16
    9be8:	a9ffffcc 	andi	r7,r21,65535
    9bec:	a82ad43a 	srli	r21,r21,16
    9bf0:	1404b03a 	or	r2,r2,r16
    9bf4:	113fffcc 	andi	r4,r2,65535
    9bf8:	100cd43a 	srli	r6,r2,16
    9bfc:	21d3383a 	mul	r9,r4,r7
    9c00:	2549383a 	mul	r4,r4,r21
    9c04:	31cf383a 	mul	r7,r6,r7
    9c08:	4810d43a 	srli	r8,r9,16
    9c0c:	1947c83a 	sub	r3,r3,r5
    9c10:	3909883a 	add	r4,r7,r4
    9c14:	2209883a 	add	r4,r4,r8
    9c18:	354d383a 	mul	r6,r6,r21
    9c1c:	21c0022e 	bgeu	r4,r7,9c28 <__udivdi3+0x414>
    9c20:	01400074 	movhi	r5,1
    9c24:	314d883a 	add	r6,r6,r5
    9c28:	202ad43a 	srli	r21,r4,16
    9c2c:	354d883a 	add	r6,r6,r21
    9c30:	19803f36 	bltu	r3,r6,9d30 <__udivdi3+0x51c>
    9c34:	19803926 	beq	r3,r6,9d1c <__udivdi3+0x508>
    9c38:	0007883a 	mov	r3,zero
    9c3c:	003fa006 	br	9ac0 <__alt_mem_onchip_memory2_0+0xfbfe9ac0>
    9c40:	90e4983a 	sll	r18,r18,r3
    9c44:	80aad83a 	srl	r21,r16,r2
    9c48:	80e0983a 	sll	r16,r16,r3
    9c4c:	9028d43a 	srli	r20,r18,16
    9c50:	9884d83a 	srl	r2,r19,r2
    9c54:	a809883a 	mov	r4,r21
    9c58:	a00b883a 	mov	r5,r20
    9c5c:	80acb03a 	or	r22,r16,r2
    9c60:	98e2983a 	sll	r17,r19,r3
    9c64:	000a4880 	call	a488 <__umodsi3>
    9c68:	a809883a 	mov	r4,r21
    9c6c:	a00b883a 	mov	r5,r20
    9c70:	1021883a 	mov	r16,r2
    9c74:	000a4800 	call	a480 <__udivsi3>
    9c78:	957fffcc 	andi	r21,r18,65535
    9c7c:	8020943a 	slli	r16,r16,16
    9c80:	b00ad43a 	srli	r5,r22,16
    9c84:	1567383a 	mul	r19,r2,r21
    9c88:	102f883a 	mov	r23,r2
    9c8c:	8148b03a 	or	r4,r16,r5
    9c90:	24c0062e 	bgeu	r4,r19,9cac <__udivdi3+0x498>
    9c94:	2489883a 	add	r4,r4,r18
    9c98:	10bfffc4 	addi	r2,r2,-1
    9c9c:	24804536 	bltu	r4,r18,9db4 <__udivdi3+0x5a0>
    9ca0:	24c0442e 	bgeu	r4,r19,9db4 <__udivdi3+0x5a0>
    9ca4:	bdffff84 	addi	r23,r23,-2
    9ca8:	2489883a 	add	r4,r4,r18
    9cac:	24e7c83a 	sub	r19,r4,r19
    9cb0:	9809883a 	mov	r4,r19
    9cb4:	a00b883a 	mov	r5,r20
    9cb8:	000a4880 	call	a488 <__umodsi3>
    9cbc:	1021883a 	mov	r16,r2
    9cc0:	9809883a 	mov	r4,r19
    9cc4:	a00b883a 	mov	r5,r20
    9cc8:	000a4800 	call	a480 <__udivsi3>
    9ccc:	8020943a 	slli	r16,r16,16
    9cd0:	1007883a 	mov	r3,r2
    9cd4:	1545383a 	mul	r2,r2,r21
    9cd8:	b13fffcc 	andi	r4,r22,65535
    9cdc:	8108b03a 	or	r4,r16,r4
    9ce0:	2080062e 	bgeu	r4,r2,9cfc <__udivdi3+0x4e8>
    9ce4:	2489883a 	add	r4,r4,r18
    9ce8:	197fffc4 	addi	r5,r3,-1
    9cec:	24802f36 	bltu	r4,r18,9dac <__udivdi3+0x598>
    9cf0:	20802e2e 	bgeu	r4,r2,9dac <__udivdi3+0x598>
    9cf4:	18ffff84 	addi	r3,r3,-2
    9cf8:	2489883a 	add	r4,r4,r18
    9cfc:	b82e943a 	slli	r23,r23,16
    9d00:	20a1c83a 	sub	r16,r4,r2
    9d04:	1dc6b03a 	or	r3,r3,r23
    9d08:	003f4006 	br	9a0c <__alt_mem_onchip_memory2_0+0xfbfe9a0c>
    9d0c:	2005883a 	mov	r2,r4
    9d10:	003f6606 	br	9aac <__alt_mem_onchip_memory2_0+0xfbfe9aac>
    9d14:	1805883a 	mov	r2,r3
    9d18:	003f0a06 	br	9944 <__alt_mem_onchip_memory2_0+0xfbfe9944>
    9d1c:	2006943a 	slli	r3,r4,16
    9d20:	9c88983a 	sll	r4,r19,r18
    9d24:	4a7fffcc 	andi	r9,r9,65535
    9d28:	1a47883a 	add	r3,r3,r9
    9d2c:	20ffc22e 	bgeu	r4,r3,9c38 <__alt_mem_onchip_memory2_0+0xfbfe9c38>
    9d30:	10bfffc4 	addi	r2,r2,-1
    9d34:	003fc006 	br	9c38 <__alt_mem_onchip_memory2_0+0xfbfe9c38>
    9d38:	00c00404 	movi	r3,16
    9d3c:	180b883a 	mov	r5,r3
    9d40:	003f0c06 	br	9974 <__alt_mem_onchip_memory2_0+0xfbfe9974>
    9d44:	0007883a 	mov	r3,zero
    9d48:	000b883a 	mov	r5,zero
    9d4c:	003f0906 	br	9974 <__alt_mem_onchip_memory2_0+0xfbfe9974>
    9d50:	00800404 	movi	r2,16
    9d54:	1007883a 	mov	r3,r2
    9d58:	003ec606 	br	9874 <__alt_mem_onchip_memory2_0+0xfbfe9874>
    9d5c:	00800404 	movi	r2,16
    9d60:	1007883a 	mov	r3,r2
    9d64:	003f1c06 	br	99d8 <__alt_mem_onchip_memory2_0+0xfbfe99d8>
    9d68:	0005883a 	mov	r2,zero
    9d6c:	0007883a 	mov	r3,zero
    9d70:	003f1906 	br	99d8 <__alt_mem_onchip_memory2_0+0xfbfe99d8>
    9d74:	0005883a 	mov	r2,zero
    9d78:	0007883a 	mov	r3,zero
    9d7c:	003ebd06 	br	9874 <__alt_mem_onchip_memory2_0+0xfbfe9874>
    9d80:	0007883a 	mov	r3,zero
    9d84:	00800044 	movi	r2,1
    9d88:	003f4d06 	br	9ac0 <__alt_mem_onchip_memory2_0+0xfbfe9ac0>
    9d8c:	197f942e 	bgeu	r3,r5,9be0 <__alt_mem_onchip_memory2_0+0xfbfe9be0>
    9d90:	10bfff84 	addi	r2,r2,-2
    9d94:	1dc7883a 	add	r3,r3,r23
    9d98:	003f9206 	br	9be4 <__alt_mem_onchip_memory2_0+0xfbfe9be4>
    9d9c:	15bf7e2e 	bgeu	r2,r22,9b98 <__alt_mem_onchip_memory2_0+0xfbfe9b98>
    9da0:	843fff84 	addi	r16,r16,-2
    9da4:	15c5883a 	add	r2,r2,r23
    9da8:	003f7c06 	br	9b9c <__alt_mem_onchip_memory2_0+0xfbfe9b9c>
    9dac:	2807883a 	mov	r3,r5
    9db0:	003fd206 	br	9cfc <__alt_mem_onchip_memory2_0+0xfbfe9cfc>
    9db4:	102f883a 	mov	r23,r2
    9db8:	003fbc06 	br	9cac <__alt_mem_onchip_memory2_0+0xfbfe9cac>
    9dbc:	843fff84 	addi	r16,r16,-2
    9dc0:	2489883a 	add	r4,r4,r18
    9dc4:	003f2506 	br	9a5c <__alt_mem_onchip_memory2_0+0xfbfe9a5c>
    9dc8:	843fff84 	addi	r16,r16,-2
    9dcc:	1485883a 	add	r2,r2,r18
    9dd0:	003eca06 	br	98fc <__alt_mem_onchip_memory2_0+0xfbfe98fc>

00009dd4 <__umoddi3>:
    9dd4:	defff404 	addi	sp,sp,-48
    9dd8:	ddc00915 	stw	r23,36(sp)
    9ddc:	dc400315 	stw	r17,12(sp)
    9de0:	dc000215 	stw	r16,8(sp)
    9de4:	dfc00b15 	stw	ra,44(sp)
    9de8:	df000a15 	stw	fp,40(sp)
    9dec:	dd800815 	stw	r22,32(sp)
    9df0:	dd400715 	stw	r21,28(sp)
    9df4:	dd000615 	stw	r20,24(sp)
    9df8:	dcc00515 	stw	r19,20(sp)
    9dfc:	dc800415 	stw	r18,16(sp)
    9e00:	2021883a 	mov	r16,r4
    9e04:	2823883a 	mov	r17,r5
    9e08:	282f883a 	mov	r23,r5
    9e0c:	3800381e 	bne	r7,zero,9ef0 <__umoddi3+0x11c>
    9e10:	3027883a 	mov	r19,r6
    9e14:	2029883a 	mov	r20,r4
    9e18:	29804e2e 	bgeu	r5,r6,9f54 <__umoddi3+0x180>
    9e1c:	00bfffd4 	movui	r2,65535
    9e20:	11809c36 	bltu	r2,r6,a094 <__umoddi3+0x2c0>
    9e24:	00803fc4 	movi	r2,255
    9e28:	11813b2e 	bgeu	r2,r6,a318 <__umoddi3+0x544>
    9e2c:	01400204 	movi	r5,8
    9e30:	2805883a 	mov	r2,r5
    9e34:	314ad83a 	srl	r5,r6,r5
    9e38:	00c00074 	movhi	r3,1
    9e3c:	18c01004 	addi	r3,r3,64
    9e40:	194b883a 	add	r5,r3,r5
    9e44:	29000003 	ldbu	r4,0(r5)
    9e48:	2089883a 	add	r4,r4,r2
    9e4c:	00800804 	movi	r2,32
    9e50:	1105c83a 	sub	r2,r2,r4
    9e54:	1000ec26 	beq	r2,zero,a208 <__umoddi3+0x434>
    9e58:	88a2983a 	sll	r17,r17,r2
    9e5c:	8108d83a 	srl	r4,r16,r4
    9e60:	30a6983a 	sll	r19,r6,r2
    9e64:	80a8983a 	sll	r20,r16,r2
    9e68:	1025883a 	mov	r18,r2
    9e6c:	892eb03a 	or	r23,r17,r4
    9e70:	982cd43a 	srli	r22,r19,16
    9e74:	b809883a 	mov	r4,r23
    9e78:	9d7fffcc 	andi	r21,r19,65535
    9e7c:	b00b883a 	mov	r5,r22
    9e80:	000a4880 	call	a488 <__umodsi3>
    9e84:	b809883a 	mov	r4,r23
    9e88:	b00b883a 	mov	r5,r22
    9e8c:	1021883a 	mov	r16,r2
    9e90:	000a4800 	call	a480 <__udivsi3>
    9e94:	8020943a 	slli	r16,r16,16
    9e98:	a00cd43a 	srli	r6,r20,16
    9e9c:	1545383a 	mul	r2,r2,r21
    9ea0:	8188b03a 	or	r4,r16,r6
    9ea4:	2080042e 	bgeu	r4,r2,9eb8 <__umoddi3+0xe4>
    9ea8:	24c9883a 	add	r4,r4,r19
    9eac:	24c00236 	bltu	r4,r19,9eb8 <__umoddi3+0xe4>
    9eb0:	2080012e 	bgeu	r4,r2,9eb8 <__umoddi3+0xe4>
    9eb4:	24c9883a 	add	r4,r4,r19
    9eb8:	20a3c83a 	sub	r17,r4,r2
    9ebc:	8809883a 	mov	r4,r17
    9ec0:	b00b883a 	mov	r5,r22
    9ec4:	000a4880 	call	a488 <__umodsi3>
    9ec8:	8809883a 	mov	r4,r17
    9ecc:	b00b883a 	mov	r5,r22
    9ed0:	1021883a 	mov	r16,r2
    9ed4:	000a4800 	call	a480 <__udivsi3>
    9ed8:	8006943a 	slli	r3,r16,16
    9edc:	1545383a 	mul	r2,r2,r21
    9ee0:	a13fffcc 	andi	r4,r20,65535
    9ee4:	1906b03a 	or	r3,r3,r4
    9ee8:	1880532e 	bgeu	r3,r2,a038 <__umoddi3+0x264>
    9eec:	00004e06 	br	a028 <__umoddi3+0x254>
    9ef0:	29c05536 	bltu	r5,r7,a048 <__umoddi3+0x274>
    9ef4:	00bfffd4 	movui	r2,65535
    9ef8:	11c0612e 	bgeu	r2,r7,a080 <__umoddi3+0x2ac>
    9efc:	00804034 	movhi	r2,256
    9f00:	10bfffc4 	addi	r2,r2,-1
    9f04:	11c0f82e 	bgeu	r2,r7,a2e8 <__umoddi3+0x514>
    9f08:	01400604 	movi	r5,24
    9f0c:	282b883a 	mov	r21,r5
    9f10:	394ad83a 	srl	r5,r7,r5
    9f14:	00c00074 	movhi	r3,1
    9f18:	18c01004 	addi	r3,r3,64
    9f1c:	194b883a 	add	r5,r3,r5
    9f20:	28800003 	ldbu	r2,0(r5)
    9f24:	00c00804 	movi	r3,32
    9f28:	156b883a 	add	r21,r2,r21
    9f2c:	1d69c83a 	sub	r20,r3,r21
    9f30:	a000631e 	bne	r20,zero,a0c0 <__umoddi3+0x2ec>
    9f34:	3c400136 	bltu	r7,r17,9f3c <__umoddi3+0x168>
    9f38:	81810436 	bltu	r16,r6,a34c <__umoddi3+0x578>
    9f3c:	8185c83a 	sub	r2,r16,r6
    9f40:	89e3c83a 	sub	r17,r17,r7
    9f44:	8087803a 	cmpltu	r3,r16,r2
    9f48:	88efc83a 	sub	r23,r17,r3
    9f4c:	b807883a 	mov	r3,r23
    9f50:	00003f06 	br	a050 <__umoddi3+0x27c>
    9f54:	3000041e 	bne	r6,zero,9f68 <__umoddi3+0x194>
    9f58:	01000044 	movi	r4,1
    9f5c:	000b883a 	mov	r5,zero
    9f60:	000a4800 	call	a480 <__udivsi3>
    9f64:	1027883a 	mov	r19,r2
    9f68:	00bfffd4 	movui	r2,65535
    9f6c:	14c04f2e 	bgeu	r2,r19,a0ac <__umoddi3+0x2d8>
    9f70:	00804034 	movhi	r2,256
    9f74:	10bfffc4 	addi	r2,r2,-1
    9f78:	14c0e42e 	bgeu	r2,r19,a30c <__umoddi3+0x538>
    9f7c:	00800604 	movi	r2,24
    9f80:	1007883a 	mov	r3,r2
    9f84:	9884d83a 	srl	r2,r19,r2
    9f88:	01000074 	movhi	r4,1
    9f8c:	21001004 	addi	r4,r4,64
    9f90:	2085883a 	add	r2,r4,r2
    9f94:	11000003 	ldbu	r4,0(r2)
    9f98:	00800804 	movi	r2,32
    9f9c:	20c7883a 	add	r3,r4,r3
    9fa0:	10c5c83a 	sub	r2,r2,r3
    9fa4:	10009a1e 	bne	r2,zero,a210 <__umoddi3+0x43c>
    9fa8:	982cd43a 	srli	r22,r19,16
    9fac:	8ce3c83a 	sub	r17,r17,r19
    9fb0:	9c3fffcc 	andi	r16,r19,65535
    9fb4:	0025883a 	mov	r18,zero
    9fb8:	8809883a 	mov	r4,r17
    9fbc:	b00b883a 	mov	r5,r22
    9fc0:	000a4880 	call	a488 <__umodsi3>
    9fc4:	8809883a 	mov	r4,r17
    9fc8:	b00b883a 	mov	r5,r22
    9fcc:	102b883a 	mov	r21,r2
    9fd0:	000a4800 	call	a480 <__udivsi3>
    9fd4:	a806943a 	slli	r3,r21,16
    9fd8:	a008d43a 	srli	r4,r20,16
    9fdc:	1405383a 	mul	r2,r2,r16
    9fe0:	190cb03a 	or	r6,r3,r4
    9fe4:	3080032e 	bgeu	r6,r2,9ff4 <__umoddi3+0x220>
    9fe8:	34cd883a 	add	r6,r6,r19
    9fec:	34c00136 	bltu	r6,r19,9ff4 <__umoddi3+0x220>
    9ff0:	3080d436 	bltu	r6,r2,a344 <__umoddi3+0x570>
    9ff4:	30abc83a 	sub	r21,r6,r2
    9ff8:	a809883a 	mov	r4,r21
    9ffc:	b00b883a 	mov	r5,r22
    a000:	000a4880 	call	a488 <__umodsi3>
    a004:	1023883a 	mov	r17,r2
    a008:	a809883a 	mov	r4,r21
    a00c:	b00b883a 	mov	r5,r22
    a010:	000a4800 	call	a480 <__udivsi3>
    a014:	8822943a 	slli	r17,r17,16
    a018:	1405383a 	mul	r2,r2,r16
    a01c:	a13fffcc 	andi	r4,r20,65535
    a020:	8906b03a 	or	r3,r17,r4
    a024:	1880042e 	bgeu	r3,r2,a038 <__umoddi3+0x264>
    a028:	1cc7883a 	add	r3,r3,r19
    a02c:	1cc00236 	bltu	r3,r19,a038 <__umoddi3+0x264>
    a030:	1880012e 	bgeu	r3,r2,a038 <__umoddi3+0x264>
    a034:	1cc7883a 	add	r3,r3,r19
    a038:	1887c83a 	sub	r3,r3,r2
    a03c:	1c84d83a 	srl	r2,r3,r18
    a040:	0007883a 	mov	r3,zero
    a044:	00000206 	br	a050 <__umoddi3+0x27c>
    a048:	2005883a 	mov	r2,r4
    a04c:	2807883a 	mov	r3,r5
    a050:	dfc00b17 	ldw	ra,44(sp)
    a054:	df000a17 	ldw	fp,40(sp)
    a058:	ddc00917 	ldw	r23,36(sp)
    a05c:	dd800817 	ldw	r22,32(sp)
    a060:	dd400717 	ldw	r21,28(sp)
    a064:	dd000617 	ldw	r20,24(sp)
    a068:	dcc00517 	ldw	r19,20(sp)
    a06c:	dc800417 	ldw	r18,16(sp)
    a070:	dc400317 	ldw	r17,12(sp)
    a074:	dc000217 	ldw	r16,8(sp)
    a078:	dec00c04 	addi	sp,sp,48
    a07c:	f800283a 	ret
    a080:	00803fc4 	movi	r2,255
    a084:	11c0952e 	bgeu	r2,r7,a2dc <__umoddi3+0x508>
    a088:	01400204 	movi	r5,8
    a08c:	282b883a 	mov	r21,r5
    a090:	003f9f06 	br	9f10 <__alt_mem_onchip_memory2_0+0xfbfe9f10>
    a094:	00804034 	movhi	r2,256
    a098:	10bfffc4 	addi	r2,r2,-1
    a09c:	1180952e 	bgeu	r2,r6,a2f4 <__umoddi3+0x520>
    a0a0:	01400604 	movi	r5,24
    a0a4:	2805883a 	mov	r2,r5
    a0a8:	003f6206 	br	9e34 <__alt_mem_onchip_memory2_0+0xfbfe9e34>
    a0ac:	00803fc4 	movi	r2,255
    a0b0:	14c0932e 	bgeu	r2,r19,a300 <__umoddi3+0x52c>
    a0b4:	00800204 	movi	r2,8
    a0b8:	1007883a 	mov	r3,r2
    a0bc:	003fb106 	br	9f84 <__alt_mem_onchip_memory2_0+0xfbfe9f84>
    a0c0:	3548d83a 	srl	r4,r6,r21
    a0c4:	3d0e983a 	sll	r7,r7,r20
    a0c8:	8d10983a 	sll	r8,r17,r20
    a0cc:	8d6cd83a 	srl	r22,r17,r21
    a0d0:	3922b03a 	or	r17,r7,r4
    a0d4:	882ed43a 	srli	r23,r17,16
    a0d8:	8564d83a 	srl	r18,r16,r21
    a0dc:	b009883a 	mov	r4,r22
    a0e0:	b80b883a 	mov	r5,r23
    a0e4:	44a4b03a 	or	r18,r8,r18
    a0e8:	3526983a 	sll	r19,r6,r20
    a0ec:	000a4880 	call	a488 <__umodsi3>
    a0f0:	b009883a 	mov	r4,r22
    a0f4:	b80b883a 	mov	r5,r23
    a0f8:	1039883a 	mov	fp,r2
    a0fc:	000a4800 	call	a480 <__udivsi3>
    a100:	102d883a 	mov	r22,r2
    a104:	8a3fffcc 	andi	r8,r17,65535
    a108:	e004943a 	slli	r2,fp,16
    a10c:	900cd43a 	srli	r6,r18,16
    a110:	b239383a 	mul	fp,r22,r8
    a114:	8520983a 	sll	r16,r16,r20
    a118:	118ab03a 	or	r5,r2,r6
    a11c:	2f00042e 	bgeu	r5,fp,a130 <__umoddi3+0x35c>
    a120:	2c4b883a 	add	r5,r5,r17
    a124:	b0bfffc4 	addi	r2,r22,-1
    a128:	2c40822e 	bgeu	r5,r17,a334 <__umoddi3+0x560>
    a12c:	102d883a 	mov	r22,r2
    a130:	2f39c83a 	sub	fp,r5,fp
    a134:	e009883a 	mov	r4,fp
    a138:	b80b883a 	mov	r5,r23
    a13c:	da000115 	stw	r8,4(sp)
    a140:	000a4880 	call	a488 <__umodsi3>
    a144:	e009883a 	mov	r4,fp
    a148:	b80b883a 	mov	r5,r23
    a14c:	d8800015 	stw	r2,0(sp)
    a150:	000a4800 	call	a480 <__udivsi3>
    a154:	d9800017 	ldw	r6,0(sp)
    a158:	da000117 	ldw	r8,4(sp)
    a15c:	94bfffcc 	andi	r18,r18,65535
    a160:	300c943a 	slli	r6,r6,16
    a164:	1209383a 	mul	r4,r2,r8
    a168:	3490b03a 	or	r8,r6,r18
    a16c:	4100042e 	bgeu	r8,r4,a180 <__umoddi3+0x3ac>
    a170:	4451883a 	add	r8,r8,r17
    a174:	10ffffc4 	addi	r3,r2,-1
    a178:	44406a2e 	bgeu	r8,r17,a324 <__umoddi3+0x550>
    a17c:	1805883a 	mov	r2,r3
    a180:	b012943a 	slli	r9,r22,16
    a184:	9abfffcc 	andi	r10,r19,65535
    a188:	980ed43a 	srli	r7,r19,16
    a18c:	124ab03a 	or	r5,r2,r9
    a190:	2a7fffcc 	andi	r9,r5,65535
    a194:	280ad43a 	srli	r5,r5,16
    a198:	4a8d383a 	mul	r6,r9,r10
    a19c:	49d3383a 	mul	r9,r9,r7
    a1a0:	2a95383a 	mul	r10,r5,r10
    a1a4:	3004d43a 	srli	r2,r6,16
    a1a8:	4111c83a 	sub	r8,r8,r4
    a1ac:	5253883a 	add	r9,r10,r9
    a1b0:	4893883a 	add	r9,r9,r2
    a1b4:	29cb383a 	mul	r5,r5,r7
    a1b8:	4a80022e 	bgeu	r9,r10,a1c4 <__umoddi3+0x3f0>
    a1bc:	00800074 	movhi	r2,1
    a1c0:	288b883a 	add	r5,r5,r2
    a1c4:	4808d43a 	srli	r4,r9,16
    a1c8:	4812943a 	slli	r9,r9,16
    a1cc:	31bfffcc 	andi	r6,r6,65535
    a1d0:	290b883a 	add	r5,r5,r4
    a1d4:	498d883a 	add	r6,r9,r6
    a1d8:	41403a36 	bltu	r8,r5,a2c4 <__umoddi3+0x4f0>
    a1dc:	41405d26 	beq	r8,r5,a354 <__umoddi3+0x580>
    a1e0:	4149c83a 	sub	r4,r8,r5
    a1e4:	300f883a 	mov	r7,r6
    a1e8:	81cfc83a 	sub	r7,r16,r7
    a1ec:	81c7803a 	cmpltu	r3,r16,r7
    a1f0:	20c7c83a 	sub	r3,r4,r3
    a1f4:	1d44983a 	sll	r2,r3,r21
    a1f8:	3d0ed83a 	srl	r7,r7,r20
    a1fc:	1d06d83a 	srl	r3,r3,r20
    a200:	11c4b03a 	or	r2,r2,r7
    a204:	003f9206 	br	a050 <__alt_mem_onchip_memory2_0+0xfbfea050>
    a208:	0025883a 	mov	r18,zero
    a20c:	003f1806 	br	9e70 <__alt_mem_onchip_memory2_0+0xfbfe9e70>
    a210:	98a6983a 	sll	r19,r19,r2
    a214:	88e8d83a 	srl	r20,r17,r3
    a218:	80c6d83a 	srl	r3,r16,r3
    a21c:	982cd43a 	srli	r22,r19,16
    a220:	88a2983a 	sll	r17,r17,r2
    a224:	a009883a 	mov	r4,r20
    a228:	b00b883a 	mov	r5,r22
    a22c:	88eab03a 	or	r21,r17,r3
    a230:	1025883a 	mov	r18,r2
    a234:	000a4880 	call	a488 <__umodsi3>
    a238:	a009883a 	mov	r4,r20
    a23c:	b00b883a 	mov	r5,r22
    a240:	1023883a 	mov	r17,r2
    a244:	000a4800 	call	a480 <__udivsi3>
    a248:	9f3fffcc 	andi	fp,r19,65535
    a24c:	8822943a 	slli	r17,r17,16
    a250:	a80ad43a 	srli	r5,r21,16
    a254:	1705383a 	mul	r2,r2,fp
    a258:	84a8983a 	sll	r20,r16,r18
    a25c:	8948b03a 	or	r4,r17,r5
    a260:	2080042e 	bgeu	r4,r2,a274 <__umoddi3+0x4a0>
    a264:	24c9883a 	add	r4,r4,r19
    a268:	24c00236 	bltu	r4,r19,a274 <__umoddi3+0x4a0>
    a26c:	2080012e 	bgeu	r4,r2,a274 <__umoddi3+0x4a0>
    a270:	24c9883a 	add	r4,r4,r19
    a274:	20afc83a 	sub	r23,r4,r2
    a278:	b809883a 	mov	r4,r23
    a27c:	b00b883a 	mov	r5,r22
    a280:	000a4880 	call	a488 <__umodsi3>
    a284:	1023883a 	mov	r17,r2
    a288:	b809883a 	mov	r4,r23
    a28c:	b00b883a 	mov	r5,r22
    a290:	000a4800 	call	a480 <__udivsi3>
    a294:	8822943a 	slli	r17,r17,16
    a298:	1705383a 	mul	r2,r2,fp
    a29c:	a93fffcc 	andi	r4,r21,65535
    a2a0:	8908b03a 	or	r4,r17,r4
    a2a4:	2080042e 	bgeu	r4,r2,a2b8 <__umoddi3+0x4e4>
    a2a8:	24c9883a 	add	r4,r4,r19
    a2ac:	24c00236 	bltu	r4,r19,a2b8 <__umoddi3+0x4e4>
    a2b0:	2080012e 	bgeu	r4,r2,a2b8 <__umoddi3+0x4e4>
    a2b4:	24c9883a 	add	r4,r4,r19
    a2b8:	20a3c83a 	sub	r17,r4,r2
    a2bc:	e021883a 	mov	r16,fp
    a2c0:	003f3d06 	br	9fb8 <__alt_mem_onchip_memory2_0+0xfbfe9fb8>
    a2c4:	34cfc83a 	sub	r7,r6,r19
    a2c8:	2c4bc83a 	sub	r5,r5,r17
    a2cc:	31cd803a 	cmpltu	r6,r6,r7
    a2d0:	298dc83a 	sub	r6,r5,r6
    a2d4:	4189c83a 	sub	r4,r8,r6
    a2d8:	003fc306 	br	a1e8 <__alt_mem_onchip_memory2_0+0xfbfea1e8>
    a2dc:	000b883a 	mov	r5,zero
    a2e0:	002b883a 	mov	r21,zero
    a2e4:	003f0a06 	br	9f10 <__alt_mem_onchip_memory2_0+0xfbfe9f10>
    a2e8:	01400404 	movi	r5,16
    a2ec:	282b883a 	mov	r21,r5
    a2f0:	003f0706 	br	9f10 <__alt_mem_onchip_memory2_0+0xfbfe9f10>
    a2f4:	01400404 	movi	r5,16
    a2f8:	2805883a 	mov	r2,r5
    a2fc:	003ecd06 	br	9e34 <__alt_mem_onchip_memory2_0+0xfbfe9e34>
    a300:	0005883a 	mov	r2,zero
    a304:	0007883a 	mov	r3,zero
    a308:	003f1e06 	br	9f84 <__alt_mem_onchip_memory2_0+0xfbfe9f84>
    a30c:	00800404 	movi	r2,16
    a310:	1007883a 	mov	r3,r2
    a314:	003f1b06 	br	9f84 <__alt_mem_onchip_memory2_0+0xfbfe9f84>
    a318:	000b883a 	mov	r5,zero
    a31c:	0005883a 	mov	r2,zero
    a320:	003ec406 	br	9e34 <__alt_mem_onchip_memory2_0+0xfbfe9e34>
    a324:	413f952e 	bgeu	r8,r4,a17c <__alt_mem_onchip_memory2_0+0xfbfea17c>
    a328:	10bfff84 	addi	r2,r2,-2
    a32c:	4451883a 	add	r8,r8,r17
    a330:	003f9306 	br	a180 <__alt_mem_onchip_memory2_0+0xfbfea180>
    a334:	2f3f7d2e 	bgeu	r5,fp,a12c <__alt_mem_onchip_memory2_0+0xfbfea12c>
    a338:	b5bfff84 	addi	r22,r22,-2
    a33c:	2c4b883a 	add	r5,r5,r17
    a340:	003f7b06 	br	a130 <__alt_mem_onchip_memory2_0+0xfbfea130>
    a344:	34cd883a 	add	r6,r6,r19
    a348:	003f2a06 	br	9ff4 <__alt_mem_onchip_memory2_0+0xfbfe9ff4>
    a34c:	8005883a 	mov	r2,r16
    a350:	003efe06 	br	9f4c <__alt_mem_onchip_memory2_0+0xfbfe9f4c>
    a354:	81bfdb36 	bltu	r16,r6,a2c4 <__alt_mem_onchip_memory2_0+0xfbfea2c4>
    a358:	300f883a 	mov	r7,r6
    a35c:	0009883a 	mov	r4,zero
    a360:	003fa106 	br	a1e8 <__alt_mem_onchip_memory2_0+0xfbfea1e8>

0000a364 <udivmodsi4>:
    a364:	2900182e 	bgeu	r5,r4,a3c8 <udivmodsi4+0x64>
    a368:	28001716 	blt	r5,zero,a3c8 <udivmodsi4+0x64>
    a36c:	00800804 	movi	r2,32
    a370:	00c00044 	movi	r3,1
    a374:	00000206 	br	a380 <udivmodsi4+0x1c>
    a378:	10001126 	beq	r2,zero,a3c0 <udivmodsi4+0x5c>
    a37c:	28000516 	blt	r5,zero,a394 <udivmodsi4+0x30>
    a380:	294b883a 	add	r5,r5,r5
    a384:	10bfffc4 	addi	r2,r2,-1
    a388:	18c7883a 	add	r3,r3,r3
    a38c:	293ffa36 	bltu	r5,r4,a378 <__alt_mem_onchip_memory2_0+0xfbfea378>
    a390:	18000b26 	beq	r3,zero,a3c0 <udivmodsi4+0x5c>
    a394:	0005883a 	mov	r2,zero
    a398:	21400236 	bltu	r4,r5,a3a4 <udivmodsi4+0x40>
    a39c:	2149c83a 	sub	r4,r4,r5
    a3a0:	10c4b03a 	or	r2,r2,r3
    a3a4:	1806d07a 	srli	r3,r3,1
    a3a8:	280ad07a 	srli	r5,r5,1
    a3ac:	183ffa1e 	bne	r3,zero,a398 <__alt_mem_onchip_memory2_0+0xfbfea398>
    a3b0:	3000011e 	bne	r6,zero,a3b8 <udivmodsi4+0x54>
    a3b4:	f800283a 	ret
    a3b8:	2005883a 	mov	r2,r4
    a3bc:	f800283a 	ret
    a3c0:	0005883a 	mov	r2,zero
    a3c4:	003ffa06 	br	a3b0 <__alt_mem_onchip_memory2_0+0xfbfea3b0>
    a3c8:	00c00044 	movi	r3,1
    a3cc:	003ff106 	br	a394 <__alt_mem_onchip_memory2_0+0xfbfea394>

0000a3d0 <__divsi3>:
    a3d0:	defffe04 	addi	sp,sp,-8
    a3d4:	dfc00115 	stw	ra,4(sp)
    a3d8:	dc000015 	stw	r16,0(sp)
    a3dc:	20000b16 	blt	r4,zero,a40c <__divsi3+0x3c>
    a3e0:	0021883a 	mov	r16,zero
    a3e4:	28000c16 	blt	r5,zero,a418 <__divsi3+0x48>
    a3e8:	000d883a 	mov	r6,zero
    a3ec:	000a3640 	call	a364 <udivmodsi4>
    a3f0:	0407c83a 	sub	r3,zero,r16
    a3f4:	1884f03a 	xor	r2,r3,r2
    a3f8:	1405883a 	add	r2,r2,r16
    a3fc:	dfc00117 	ldw	ra,4(sp)
    a400:	dc000017 	ldw	r16,0(sp)
    a404:	dec00204 	addi	sp,sp,8
    a408:	f800283a 	ret
    a40c:	0109c83a 	sub	r4,zero,r4
    a410:	04000044 	movi	r16,1
    a414:	283ff40e 	bge	r5,zero,a3e8 <__alt_mem_onchip_memory2_0+0xfbfea3e8>
    a418:	014bc83a 	sub	r5,zero,r5
    a41c:	8400005c 	xori	r16,r16,1
    a420:	003ff106 	br	a3e8 <__alt_mem_onchip_memory2_0+0xfbfea3e8>

0000a424 <__modsi3>:
    a424:	defffd04 	addi	sp,sp,-12
    a428:	dfc00215 	stw	ra,8(sp)
    a42c:	dc400115 	stw	r17,4(sp)
    a430:	dc000015 	stw	r16,0(sp)
    a434:	20000c16 	blt	r4,zero,a468 <__modsi3+0x44>
    a438:	0023883a 	mov	r17,zero
    a43c:	0021883a 	mov	r16,zero
    a440:	28000d16 	blt	r5,zero,a478 <__modsi3+0x54>
    a444:	01800044 	movi	r6,1
    a448:	000a3640 	call	a364 <udivmodsi4>
    a44c:	1404f03a 	xor	r2,r2,r16
    a450:	8885883a 	add	r2,r17,r2
    a454:	dfc00217 	ldw	ra,8(sp)
    a458:	dc400117 	ldw	r17,4(sp)
    a45c:	dc000017 	ldw	r16,0(sp)
    a460:	dec00304 	addi	sp,sp,12
    a464:	f800283a 	ret
    a468:	0109c83a 	sub	r4,zero,r4
    a46c:	04400044 	movi	r17,1
    a470:	043fffc4 	movi	r16,-1
    a474:	283ff30e 	bge	r5,zero,a444 <__alt_mem_onchip_memory2_0+0xfbfea444>
    a478:	014bc83a 	sub	r5,zero,r5
    a47c:	003ff106 	br	a444 <__alt_mem_onchip_memory2_0+0xfbfea444>

0000a480 <__udivsi3>:
    a480:	000d883a 	mov	r6,zero
    a484:	000a3641 	jmpi	a364 <udivmodsi4>

0000a488 <__umodsi3>:
    a488:	01800044 	movi	r6,1
    a48c:	000a3641 	jmpi	a364 <udivmodsi4>

0000a490 <__adddf3>:
    a490:	02000434 	movhi	r8,16
    a494:	423fffc4 	addi	r8,r8,-1
    a498:	defffb04 	addi	sp,sp,-20
    a49c:	2a12703a 	and	r9,r5,r8
    a4a0:	2806d7fa 	srli	r3,r5,31
    a4a4:	3a10703a 	and	r8,r7,r8
    a4a8:	3804d53a 	srli	r2,r7,20
    a4ac:	3014d77a 	srli	r10,r6,29
    a4b0:	dc000015 	stw	r16,0(sp)
    a4b4:	481290fa 	slli	r9,r9,3
    a4b8:	2820d53a 	srli	r16,r5,20
    a4bc:	401090fa 	slli	r8,r8,3
    a4c0:	200ad77a 	srli	r5,r4,29
    a4c4:	380ed7fa 	srli	r7,r7,31
    a4c8:	dc800215 	stw	r18,8(sp)
    a4cc:	dc400115 	stw	r17,4(sp)
    a4d0:	dfc00415 	stw	ra,16(sp)
    a4d4:	dcc00315 	stw	r19,12(sp)
    a4d8:	1c803fcc 	andi	r18,r3,255
    a4dc:	8401ffcc 	andi	r16,r16,2047
    a4e0:	494ab03a 	or	r5,r9,r5
    a4e4:	202290fa 	slli	r17,r4,3
    a4e8:	1081ffcc 	andi	r2,r2,2047
    a4ec:	4290b03a 	or	r8,r8,r10
    a4f0:	300c90fa 	slli	r6,r6,3
    a4f4:	91c07026 	beq	r18,r7,a6b8 <__adddf3+0x228>
    a4f8:	8087c83a 	sub	r3,r16,r2
    a4fc:	00c0b30e 	bge	zero,r3,a7cc <__adddf3+0x33c>
    a500:	10002a1e 	bne	r2,zero,a5ac <__adddf3+0x11c>
    a504:	4184b03a 	or	r2,r8,r6
    a508:	1000991e 	bne	r2,zero,a770 <__adddf3+0x2e0>
    a50c:	888001cc 	andi	r2,r17,7
    a510:	10005b26 	beq	r2,zero,a680 <__adddf3+0x1f0>
    a514:	88c003cc 	andi	r3,r17,15
    a518:	00800104 	movi	r2,4
    a51c:	18805826 	beq	r3,r2,a680 <__adddf3+0x1f0>
    a520:	89800104 	addi	r6,r17,4
    a524:	3463803a 	cmpltu	r17,r6,r17
    a528:	2c4b883a 	add	r5,r5,r17
    a52c:	2880202c 	andhi	r2,r5,128
    a530:	9007883a 	mov	r3,r18
    a534:	3023883a 	mov	r17,r6
    a538:	10005426 	beq	r2,zero,a68c <__adddf3+0x1fc>
    a53c:	84000044 	addi	r16,r16,1
    a540:	0081ffc4 	movi	r2,2047
    a544:	8080c126 	beq	r16,r2,a84c <__adddf3+0x3bc>
    a548:	013fe034 	movhi	r4,65408
    a54c:	213fffc4 	addi	r4,r4,-1
    a550:	290a703a 	and	r5,r5,r4
    a554:	2804977a 	slli	r2,r5,29
    a558:	280a927a 	slli	r5,r5,9
    a55c:	8822d0fa 	srli	r17,r17,3
    a560:	8401ffcc 	andi	r16,r16,2047
    a564:	2808d33a 	srli	r4,r5,12
    a568:	1444b03a 	or	r2,r2,r17
    a56c:	8401ffcc 	andi	r16,r16,2047
    a570:	800a953a 	slli	r5,r16,20
    a574:	18c03fcc 	andi	r3,r3,255
    a578:	04000434 	movhi	r16,16
    a57c:	180697fa 	slli	r3,r3,31
    a580:	843fffc4 	addi	r16,r16,-1
    a584:	2420703a 	and	r16,r4,r16
    a588:	8160b03a 	or	r16,r16,r5
    a58c:	80c6b03a 	or	r3,r16,r3
    a590:	dfc00417 	ldw	ra,16(sp)
    a594:	dcc00317 	ldw	r19,12(sp)
    a598:	dc800217 	ldw	r18,8(sp)
    a59c:	dc400117 	ldw	r17,4(sp)
    a5a0:	dc000017 	ldw	r16,0(sp)
    a5a4:	dec00504 	addi	sp,sp,20
    a5a8:	f800283a 	ret
    a5ac:	0081ffc4 	movi	r2,2047
    a5b0:	80bfd626 	beq	r16,r2,a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a5b4:	42002034 	orhi	r8,r8,128
    a5b8:	00800e04 	movi	r2,56
    a5bc:	10c0a616 	blt	r2,r3,a858 <__adddf3+0x3c8>
    a5c0:	008007c4 	movi	r2,31
    a5c4:	10c0c916 	blt	r2,r3,a8ec <__adddf3+0x45c>
    a5c8:	00800804 	movi	r2,32
    a5cc:	10c5c83a 	sub	r2,r2,r3
    a5d0:	408e983a 	sll	r7,r8,r2
    a5d4:	30c8d83a 	srl	r4,r6,r3
    a5d8:	3084983a 	sll	r2,r6,r2
    a5dc:	40c6d83a 	srl	r3,r8,r3
    a5e0:	390cb03a 	or	r6,r7,r4
    a5e4:	1004c03a 	cmpne	r2,r2,zero
    a5e8:	308cb03a 	or	r6,r6,r2
    a5ec:	898dc83a 	sub	r6,r17,r6
    a5f0:	89a3803a 	cmpltu	r17,r17,r6
    a5f4:	28cbc83a 	sub	r5,r5,r3
    a5f8:	2c4bc83a 	sub	r5,r5,r17
    a5fc:	3023883a 	mov	r17,r6
    a600:	2880202c 	andhi	r2,r5,128
    a604:	10006d26 	beq	r2,zero,a7bc <__adddf3+0x32c>
    a608:	04c02034 	movhi	r19,128
    a60c:	9cffffc4 	addi	r19,r19,-1
    a610:	2ce6703a 	and	r19,r5,r19
    a614:	98007e26 	beq	r19,zero,a810 <__adddf3+0x380>
    a618:	9809883a 	mov	r4,r19
    a61c:	000ca2c0 	call	ca2c <__clzsi2>
    a620:	10fffe04 	addi	r3,r2,-8
    a624:	010007c4 	movi	r4,31
    a628:	20c07f16 	blt	r4,r3,a828 <__adddf3+0x398>
    a62c:	01400a04 	movi	r5,40
    a630:	2885c83a 	sub	r2,r5,r2
    a634:	888ad83a 	srl	r5,r17,r2
    a638:	98e6983a 	sll	r19,r19,r3
    a63c:	88e2983a 	sll	r17,r17,r3
    a640:	2ce6b03a 	or	r19,r5,r19
    a644:	1c007c16 	blt	r3,r16,a838 <__adddf3+0x3a8>
    a648:	1c21c83a 	sub	r16,r3,r16
    a64c:	81400044 	addi	r5,r16,1
    a650:	00c007c4 	movi	r3,31
    a654:	19409816 	blt	r3,r5,a8b8 <__adddf3+0x428>
    a658:	1c21c83a 	sub	r16,r3,r16
    a65c:	8c08983a 	sll	r4,r17,r16
    a660:	8946d83a 	srl	r3,r17,r5
    a664:	9c20983a 	sll	r16,r19,r16
    a668:	2008c03a 	cmpne	r4,r4,zero
    a66c:	994ad83a 	srl	r5,r19,r5
    a670:	1c06b03a 	or	r3,r3,r16
    a674:	1922b03a 	or	r17,r3,r4
    a678:	0021883a 	mov	r16,zero
    a67c:	003fa306 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a680:	2880202c 	andhi	r2,r5,128
    a684:	9007883a 	mov	r3,r18
    a688:	103fac1e 	bne	r2,zero,a53c <__alt_mem_onchip_memory2_0+0xfbfea53c>
    a68c:	2804977a 	slli	r2,r5,29
    a690:	8822d0fa 	srli	r17,r17,3
    a694:	0101ffc4 	movi	r4,2047
    a698:	280ad0fa 	srli	r5,r5,3
    a69c:	1444b03a 	or	r2,r2,r17
    a6a0:	81002c26 	beq	r16,r4,a754 <__adddf3+0x2c4>
    a6a4:	8120703a 	and	r16,r16,r4
    a6a8:	01000434 	movhi	r4,16
    a6ac:	213fffc4 	addi	r4,r4,-1
    a6b0:	2908703a 	and	r4,r5,r4
    a6b4:	003fad06 	br	a56c <__alt_mem_onchip_memory2_0+0xfbfea56c>
    a6b8:	8089c83a 	sub	r4,r16,r2
    a6bc:	01006a0e 	bge	zero,r4,a868 <__adddf3+0x3d8>
    a6c0:	10003326 	beq	r2,zero,a790 <__adddf3+0x300>
    a6c4:	0081ffc4 	movi	r2,2047
    a6c8:	80bf9026 	beq	r16,r2,a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a6cc:	42002034 	orhi	r8,r8,128
    a6d0:	00800e04 	movi	r2,56
    a6d4:	1100b116 	blt	r2,r4,a99c <__adddf3+0x50c>
    a6d8:	008007c4 	movi	r2,31
    a6dc:	1100e216 	blt	r2,r4,aa68 <__adddf3+0x5d8>
    a6e0:	00800804 	movi	r2,32
    a6e4:	1105c83a 	sub	r2,r2,r4
    a6e8:	4092983a 	sll	r9,r8,r2
    a6ec:	310ed83a 	srl	r7,r6,r4
    a6f0:	3084983a 	sll	r2,r6,r2
    a6f4:	4110d83a 	srl	r8,r8,r4
    a6f8:	49ccb03a 	or	r6,r9,r7
    a6fc:	1004c03a 	cmpne	r2,r2,zero
    a700:	308cb03a 	or	r6,r6,r2
    a704:	344d883a 	add	r6,r6,r17
    a708:	3463803a 	cmpltu	r17,r6,r17
    a70c:	414b883a 	add	r5,r8,r5
    a710:	2c4b883a 	add	r5,r5,r17
    a714:	3023883a 	mov	r17,r6
    a718:	2880202c 	andhi	r2,r5,128
    a71c:	10002726 	beq	r2,zero,a7bc <__adddf3+0x32c>
    a720:	84000044 	addi	r16,r16,1
    a724:	0081ffc4 	movi	r2,2047
    a728:	8080ae26 	beq	r16,r2,a9e4 <__adddf3+0x554>
    a72c:	00bfe034 	movhi	r2,65408
    a730:	10bfffc4 	addi	r2,r2,-1
    a734:	288a703a 	and	r5,r5,r2
    a738:	880cd07a 	srli	r6,r17,1
    a73c:	280897fa 	slli	r4,r5,31
    a740:	88c0004c 	andi	r3,r17,1
    a744:	30e2b03a 	or	r17,r6,r3
    a748:	280ad07a 	srli	r5,r5,1
    a74c:	8922b03a 	or	r17,r17,r4
    a750:	003f6e06 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a754:	1148b03a 	or	r4,r2,r5
    a758:	20003c26 	beq	r4,zero,a84c <__adddf3+0x3bc>
    a75c:	29000234 	orhi	r4,r5,8
    a760:	01400434 	movhi	r5,16
    a764:	297fffc4 	addi	r5,r5,-1
    a768:	2148703a 	and	r4,r4,r5
    a76c:	003f7f06 	br	a56c <__alt_mem_onchip_memory2_0+0xfbfea56c>
    a770:	18ffffc4 	addi	r3,r3,-1
    a774:	18004d1e 	bne	r3,zero,a8ac <__adddf3+0x41c>
    a778:	898dc83a 	sub	r6,r17,r6
    a77c:	89a3803a 	cmpltu	r17,r17,r6
    a780:	2a0bc83a 	sub	r5,r5,r8
    a784:	2c4bc83a 	sub	r5,r5,r17
    a788:	3023883a 	mov	r17,r6
    a78c:	003f9c06 	br	a600 <__alt_mem_onchip_memory2_0+0xfbfea600>
    a790:	4184b03a 	or	r2,r8,r6
    a794:	103f5d26 	beq	r2,zero,a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a798:	213fffc4 	addi	r4,r4,-1
    a79c:	203fd926 	beq	r4,zero,a704 <__alt_mem_onchip_memory2_0+0xfbfea704>
    a7a0:	0081ffc4 	movi	r2,2047
    a7a4:	80bfca1e 	bne	r16,r2,a6d0 <__alt_mem_onchip_memory2_0+0xfbfea6d0>
    a7a8:	003f5806 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a7ac:	10c8b03a 	or	r4,r2,r3
    a7b0:	20008b26 	beq	r4,zero,a9e0 <__adddf3+0x550>
    a7b4:	100b883a 	mov	r5,r2
    a7b8:	1823883a 	mov	r17,r3
    a7bc:	888001cc 	andi	r2,r17,7
    a7c0:	103f541e 	bne	r2,zero,a514 <__alt_mem_onchip_memory2_0+0xfbfea514>
    a7c4:	9007883a 	mov	r3,r18
    a7c8:	003fb006 	br	a68c <__alt_mem_onchip_memory2_0+0xfbfea68c>
    a7cc:	1800531e 	bne	r3,zero,a91c <__adddf3+0x48c>
    a7d0:	80800044 	addi	r2,r16,1
    a7d4:	1081ffcc 	andi	r2,r2,2047
    a7d8:	00c00044 	movi	r3,1
    a7dc:	1880990e 	bge	r3,r2,aa44 <__adddf3+0x5b4>
    a7e0:	8985c83a 	sub	r2,r17,r6
    a7e4:	8887803a 	cmpltu	r3,r17,r2
    a7e8:	2a27c83a 	sub	r19,r5,r8
    a7ec:	98e7c83a 	sub	r19,r19,r3
    a7f0:	98c0202c 	andhi	r3,r19,128
    a7f4:	18006226 	beq	r3,zero,a980 <__adddf3+0x4f0>
    a7f8:	3463c83a 	sub	r17,r6,r17
    a7fc:	4151c83a 	sub	r8,r8,r5
    a800:	344d803a 	cmpltu	r6,r6,r17
    a804:	41a7c83a 	sub	r19,r8,r6
    a808:	3825883a 	mov	r18,r7
    a80c:	983f821e 	bne	r19,zero,a618 <__alt_mem_onchip_memory2_0+0xfbfea618>
    a810:	8809883a 	mov	r4,r17
    a814:	000ca2c0 	call	ca2c <__clzsi2>
    a818:	10800804 	addi	r2,r2,32
    a81c:	10fffe04 	addi	r3,r2,-8
    a820:	010007c4 	movi	r4,31
    a824:	20ff810e 	bge	r4,r3,a62c <__alt_mem_onchip_memory2_0+0xfbfea62c>
    a828:	14fff604 	addi	r19,r2,-40
    a82c:	8ce6983a 	sll	r19,r17,r19
    a830:	0023883a 	mov	r17,zero
    a834:	1c3f840e 	bge	r3,r16,a648 <__alt_mem_onchip_memory2_0+0xfbfea648>
    a838:	017fe034 	movhi	r5,65408
    a83c:	297fffc4 	addi	r5,r5,-1
    a840:	80e1c83a 	sub	r16,r16,r3
    a844:	994a703a 	and	r5,r19,r5
    a848:	003f3006 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a84c:	0009883a 	mov	r4,zero
    a850:	0005883a 	mov	r2,zero
    a854:	003f4506 	br	a56c <__alt_mem_onchip_memory2_0+0xfbfea56c>
    a858:	418cb03a 	or	r6,r8,r6
    a85c:	300cc03a 	cmpne	r6,r6,zero
    a860:	0007883a 	mov	r3,zero
    a864:	003f6106 	br	a5ec <__alt_mem_onchip_memory2_0+0xfbfea5ec>
    a868:	2000921e 	bne	r4,zero,aab4 <__adddf3+0x624>
    a86c:	80800044 	addi	r2,r16,1
    a870:	11c1ffcc 	andi	r7,r2,2047
    a874:	01000044 	movi	r4,1
    a878:	21c0610e 	bge	r4,r7,aa00 <__adddf3+0x570>
    a87c:	0101ffc4 	movi	r4,2047
    a880:	1100a326 	beq	r2,r4,ab10 <__adddf3+0x680>
    a884:	344d883a 	add	r6,r6,r17
    a888:	3463803a 	cmpltu	r17,r6,r17
    a88c:	414b883a 	add	r5,r8,r5
    a890:	2c4b883a 	add	r5,r5,r17
    a894:	282297fa 	slli	r17,r5,31
    a898:	300cd07a 	srli	r6,r6,1
    a89c:	280ad07a 	srli	r5,r5,1
    a8a0:	1021883a 	mov	r16,r2
    a8a4:	89a2b03a 	or	r17,r17,r6
    a8a8:	003f1806 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a8ac:	0081ffc4 	movi	r2,2047
    a8b0:	80bf411e 	bne	r16,r2,a5b8 <__alt_mem_onchip_memory2_0+0xfbfea5b8>
    a8b4:	003f1506 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    a8b8:	80bff844 	addi	r2,r16,-31
    a8bc:	00c00804 	movi	r3,32
    a8c0:	9884d83a 	srl	r2,r19,r2
    a8c4:	28c04a26 	beq	r5,r3,a9f0 <__adddf3+0x560>
    a8c8:	00c00fc4 	movi	r3,63
    a8cc:	1c21c83a 	sub	r16,r3,r16
    a8d0:	9c26983a 	sll	r19,r19,r16
    a8d4:	9c62b03a 	or	r17,r19,r17
    a8d8:	8822c03a 	cmpne	r17,r17,zero
    a8dc:	88a2b03a 	or	r17,r17,r2
    a8e0:	000b883a 	mov	r5,zero
    a8e4:	0021883a 	mov	r16,zero
    a8e8:	003fb406 	br	a7bc <__alt_mem_onchip_memory2_0+0xfbfea7bc>
    a8ec:	18bff804 	addi	r2,r3,-32
    a8f0:	01000804 	movi	r4,32
    a8f4:	4084d83a 	srl	r2,r8,r2
    a8f8:	19003f26 	beq	r3,r4,a9f8 <__adddf3+0x568>
    a8fc:	01001004 	movi	r4,64
    a900:	20c7c83a 	sub	r3,r4,r3
    a904:	40d0983a 	sll	r8,r8,r3
    a908:	418cb03a 	or	r6,r8,r6
    a90c:	300cc03a 	cmpne	r6,r6,zero
    a910:	308cb03a 	or	r6,r6,r2
    a914:	0007883a 	mov	r3,zero
    a918:	003f3406 	br	a5ec <__alt_mem_onchip_memory2_0+0xfbfea5ec>
    a91c:	80002326 	beq	r16,zero,a9ac <__adddf3+0x51c>
    a920:	0101ffc4 	movi	r4,2047
    a924:	11005e26 	beq	r2,r4,aaa0 <__adddf3+0x610>
    a928:	00c7c83a 	sub	r3,zero,r3
    a92c:	29402034 	orhi	r5,r5,128
    a930:	01000e04 	movi	r4,56
    a934:	20c07216 	blt	r4,r3,ab00 <__adddf3+0x670>
    a938:	010007c4 	movi	r4,31
    a93c:	20c0ce16 	blt	r4,r3,ac78 <__adddf3+0x7e8>
    a940:	01000804 	movi	r4,32
    a944:	20c9c83a 	sub	r4,r4,r3
    a948:	2914983a 	sll	r10,r5,r4
    a94c:	88d2d83a 	srl	r9,r17,r3
    a950:	8908983a 	sll	r4,r17,r4
    a954:	28c6d83a 	srl	r3,r5,r3
    a958:	5262b03a 	or	r17,r10,r9
    a95c:	2008c03a 	cmpne	r4,r4,zero
    a960:	8922b03a 	or	r17,r17,r4
    a964:	3463c83a 	sub	r17,r6,r17
    a968:	40c7c83a 	sub	r3,r8,r3
    a96c:	344d803a 	cmpltu	r6,r6,r17
    a970:	198bc83a 	sub	r5,r3,r6
    a974:	1021883a 	mov	r16,r2
    a978:	3825883a 	mov	r18,r7
    a97c:	003f2006 	br	a600 <__alt_mem_onchip_memory2_0+0xfbfea600>
    a980:	9886b03a 	or	r3,r19,r2
    a984:	1800141e 	bne	r3,zero,a9d8 <__adddf3+0x548>
    a988:	0007883a 	mov	r3,zero
    a98c:	000b883a 	mov	r5,zero
    a990:	0023883a 	mov	r17,zero
    a994:	0021883a 	mov	r16,zero
    a998:	003f3c06 	br	a68c <__alt_mem_onchip_memory2_0+0xfbfea68c>
    a99c:	418cb03a 	or	r6,r8,r6
    a9a0:	300cc03a 	cmpne	r6,r6,zero
    a9a4:	0011883a 	mov	r8,zero
    a9a8:	003f5606 	br	a704 <__alt_mem_onchip_memory2_0+0xfbfea704>
    a9ac:	2c48b03a 	or	r4,r5,r17
    a9b0:	20003b26 	beq	r4,zero,aaa0 <__adddf3+0x610>
    a9b4:	00c6303a 	nor	r3,zero,r3
    a9b8:	1800371e 	bne	r3,zero,aa98 <__adddf3+0x608>
    a9bc:	3463c83a 	sub	r17,r6,r17
    a9c0:	414bc83a 	sub	r5,r8,r5
    a9c4:	344d803a 	cmpltu	r6,r6,r17
    a9c8:	298bc83a 	sub	r5,r5,r6
    a9cc:	1021883a 	mov	r16,r2
    a9d0:	3825883a 	mov	r18,r7
    a9d4:	003f0a06 	br	a600 <__alt_mem_onchip_memory2_0+0xfbfea600>
    a9d8:	1023883a 	mov	r17,r2
    a9dc:	003f0d06 	br	a614 <__alt_mem_onchip_memory2_0+0xfbfea614>
    a9e0:	0007883a 	mov	r3,zero
    a9e4:	000b883a 	mov	r5,zero
    a9e8:	0023883a 	mov	r17,zero
    a9ec:	003f2706 	br	a68c <__alt_mem_onchip_memory2_0+0xfbfea68c>
    a9f0:	0027883a 	mov	r19,zero
    a9f4:	003fb706 	br	a8d4 <__alt_mem_onchip_memory2_0+0xfbfea8d4>
    a9f8:	0011883a 	mov	r8,zero
    a9fc:	003fc206 	br	a908 <__alt_mem_onchip_memory2_0+0xfbfea908>
    aa00:	2c44b03a 	or	r2,r5,r17
    aa04:	8000871e 	bne	r16,zero,ac24 <__adddf3+0x794>
    aa08:	1000b126 	beq	r2,zero,acd0 <__adddf3+0x840>
    aa0c:	4184b03a 	or	r2,r8,r6
    aa10:	103ebe26 	beq	r2,zero,a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    aa14:	3445883a 	add	r2,r6,r17
    aa18:	1463803a 	cmpltu	r17,r2,r17
    aa1c:	414b883a 	add	r5,r8,r5
    aa20:	2c4b883a 	add	r5,r5,r17
    aa24:	28c0202c 	andhi	r3,r5,128
    aa28:	1023883a 	mov	r17,r2
    aa2c:	183f6326 	beq	r3,zero,a7bc <__alt_mem_onchip_memory2_0+0xfbfea7bc>
    aa30:	00bfe034 	movhi	r2,65408
    aa34:	10bfffc4 	addi	r2,r2,-1
    aa38:	2021883a 	mov	r16,r4
    aa3c:	288a703a 	and	r5,r5,r2
    aa40:	003eb206 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    aa44:	2c44b03a 	or	r2,r5,r17
    aa48:	8000251e 	bne	r16,zero,aae0 <__adddf3+0x650>
    aa4c:	10004b1e 	bne	r2,zero,ab7c <__adddf3+0x6ec>
    aa50:	4184b03a 	or	r2,r8,r6
    aa54:	103fe226 	beq	r2,zero,a9e0 <__alt_mem_onchip_memory2_0+0xfbfea9e0>
    aa58:	400b883a 	mov	r5,r8
    aa5c:	3023883a 	mov	r17,r6
    aa60:	3825883a 	mov	r18,r7
    aa64:	003ea906 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    aa68:	20bff804 	addi	r2,r4,-32
    aa6c:	01c00804 	movi	r7,32
    aa70:	4084d83a 	srl	r2,r8,r2
    aa74:	21c07e26 	beq	r4,r7,ac70 <__adddf3+0x7e0>
    aa78:	01c01004 	movi	r7,64
    aa7c:	3909c83a 	sub	r4,r7,r4
    aa80:	4110983a 	sll	r8,r8,r4
    aa84:	418cb03a 	or	r6,r8,r6
    aa88:	300cc03a 	cmpne	r6,r6,zero
    aa8c:	308cb03a 	or	r6,r6,r2
    aa90:	0011883a 	mov	r8,zero
    aa94:	003f1b06 	br	a704 <__alt_mem_onchip_memory2_0+0xfbfea704>
    aa98:	0101ffc4 	movi	r4,2047
    aa9c:	113fa41e 	bne	r2,r4,a930 <__alt_mem_onchip_memory2_0+0xfbfea930>
    aaa0:	400b883a 	mov	r5,r8
    aaa4:	3023883a 	mov	r17,r6
    aaa8:	1021883a 	mov	r16,r2
    aaac:	3825883a 	mov	r18,r7
    aab0:	003e9606 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    aab4:	80001a1e 	bne	r16,zero,ab20 <__adddf3+0x690>
    aab8:	2c4eb03a 	or	r7,r5,r17
    aabc:	38005526 	beq	r7,zero,ac14 <__adddf3+0x784>
    aac0:	0108303a 	nor	r4,zero,r4
    aac4:	2000511e 	bne	r4,zero,ac0c <__adddf3+0x77c>
    aac8:	89a3883a 	add	r17,r17,r6
    aacc:	414b883a 	add	r5,r8,r5
    aad0:	898d803a 	cmpltu	r6,r17,r6
    aad4:	298b883a 	add	r5,r5,r6
    aad8:	1021883a 	mov	r16,r2
    aadc:	003f0e06 	br	a718 <__alt_mem_onchip_memory2_0+0xfbfea718>
    aae0:	1000341e 	bne	r2,zero,abb4 <__adddf3+0x724>
    aae4:	4184b03a 	or	r2,r8,r6
    aae8:	10006f26 	beq	r2,zero,aca8 <__adddf3+0x818>
    aaec:	400b883a 	mov	r5,r8
    aaf0:	3023883a 	mov	r17,r6
    aaf4:	3825883a 	mov	r18,r7
    aaf8:	0401ffc4 	movi	r16,2047
    aafc:	003e8306 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    ab00:	2c62b03a 	or	r17,r5,r17
    ab04:	8822c03a 	cmpne	r17,r17,zero
    ab08:	0007883a 	mov	r3,zero
    ab0c:	003f9506 	br	a964 <__alt_mem_onchip_memory2_0+0xfbfea964>
    ab10:	1021883a 	mov	r16,r2
    ab14:	000b883a 	mov	r5,zero
    ab18:	0023883a 	mov	r17,zero
    ab1c:	003edb06 	br	a68c <__alt_mem_onchip_memory2_0+0xfbfea68c>
    ab20:	01c1ffc4 	movi	r7,2047
    ab24:	11c03b26 	beq	r2,r7,ac14 <__adddf3+0x784>
    ab28:	0109c83a 	sub	r4,zero,r4
    ab2c:	29402034 	orhi	r5,r5,128
    ab30:	01c00e04 	movi	r7,56
    ab34:	39006216 	blt	r7,r4,acc0 <__adddf3+0x830>
    ab38:	01c007c4 	movi	r7,31
    ab3c:	39006b16 	blt	r7,r4,acec <__adddf3+0x85c>
    ab40:	01c00804 	movi	r7,32
    ab44:	390fc83a 	sub	r7,r7,r4
    ab48:	29d4983a 	sll	r10,r5,r7
    ab4c:	8912d83a 	srl	r9,r17,r4
    ab50:	89ce983a 	sll	r7,r17,r7
    ab54:	2908d83a 	srl	r4,r5,r4
    ab58:	5262b03a 	or	r17,r10,r9
    ab5c:	380ac03a 	cmpne	r5,r7,zero
    ab60:	8962b03a 	or	r17,r17,r5
    ab64:	89a3883a 	add	r17,r17,r6
    ab68:	2211883a 	add	r8,r4,r8
    ab6c:	898d803a 	cmpltu	r6,r17,r6
    ab70:	418b883a 	add	r5,r8,r6
    ab74:	1021883a 	mov	r16,r2
    ab78:	003ee706 	br	a718 <__alt_mem_onchip_memory2_0+0xfbfea718>
    ab7c:	4184b03a 	or	r2,r8,r6
    ab80:	103e6226 	beq	r2,zero,a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    ab84:	8987c83a 	sub	r3,r17,r6
    ab88:	88c9803a 	cmpltu	r4,r17,r3
    ab8c:	2a05c83a 	sub	r2,r5,r8
    ab90:	1105c83a 	sub	r2,r2,r4
    ab94:	1100202c 	andhi	r4,r2,128
    ab98:	203f0426 	beq	r4,zero,a7ac <__alt_mem_onchip_memory2_0+0xfbfea7ac>
    ab9c:	3463c83a 	sub	r17,r6,r17
    aba0:	414bc83a 	sub	r5,r8,r5
    aba4:	344d803a 	cmpltu	r6,r6,r17
    aba8:	298bc83a 	sub	r5,r5,r6
    abac:	3825883a 	mov	r18,r7
    abb0:	003e5606 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    abb4:	4184b03a 	or	r2,r8,r6
    abb8:	10002b26 	beq	r2,zero,ac68 <__adddf3+0x7d8>
    abbc:	2804d0fa 	srli	r2,r5,3
    abc0:	8822d0fa 	srli	r17,r17,3
    abc4:	280a977a 	slli	r5,r5,29
    abc8:	10c0022c 	andhi	r3,r2,8
    abcc:	2c62b03a 	or	r17,r5,r17
    abd0:	18000826 	beq	r3,zero,abf4 <__adddf3+0x764>
    abd4:	4008d0fa 	srli	r4,r8,3
    abd8:	20c0022c 	andhi	r3,r4,8
    abdc:	1800051e 	bne	r3,zero,abf4 <__adddf3+0x764>
    abe0:	300cd0fa 	srli	r6,r6,3
    abe4:	4010977a 	slli	r8,r8,29
    abe8:	2005883a 	mov	r2,r4
    abec:	3825883a 	mov	r18,r7
    abf0:	41a2b03a 	or	r17,r8,r6
    abf4:	880ad77a 	srli	r5,r17,29
    abf8:	100490fa 	slli	r2,r2,3
    abfc:	882290fa 	slli	r17,r17,3
    ac00:	0401ffc4 	movi	r16,2047
    ac04:	288ab03a 	or	r5,r5,r2
    ac08:	003e4006 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    ac0c:	01c1ffc4 	movi	r7,2047
    ac10:	11ffc71e 	bne	r2,r7,ab30 <__alt_mem_onchip_memory2_0+0xfbfeab30>
    ac14:	400b883a 	mov	r5,r8
    ac18:	3023883a 	mov	r17,r6
    ac1c:	1021883a 	mov	r16,r2
    ac20:	003e3a06 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    ac24:	10002d26 	beq	r2,zero,acdc <__adddf3+0x84c>
    ac28:	4184b03a 	or	r2,r8,r6
    ac2c:	10000e26 	beq	r2,zero,ac68 <__adddf3+0x7d8>
    ac30:	2804d0fa 	srli	r2,r5,3
    ac34:	8822d0fa 	srli	r17,r17,3
    ac38:	280a977a 	slli	r5,r5,29
    ac3c:	10c0022c 	andhi	r3,r2,8
    ac40:	2c62b03a 	or	r17,r5,r17
    ac44:	183feb26 	beq	r3,zero,abf4 <__alt_mem_onchip_memory2_0+0xfbfeabf4>
    ac48:	4008d0fa 	srli	r4,r8,3
    ac4c:	20c0022c 	andhi	r3,r4,8
    ac50:	183fe81e 	bne	r3,zero,abf4 <__alt_mem_onchip_memory2_0+0xfbfeabf4>
    ac54:	300cd0fa 	srli	r6,r6,3
    ac58:	4010977a 	slli	r8,r8,29
    ac5c:	2005883a 	mov	r2,r4
    ac60:	41a2b03a 	or	r17,r8,r6
    ac64:	003fe306 	br	abf4 <__alt_mem_onchip_memory2_0+0xfbfeabf4>
    ac68:	0401ffc4 	movi	r16,2047
    ac6c:	003e2706 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    ac70:	0011883a 	mov	r8,zero
    ac74:	003f8306 	br	aa84 <__alt_mem_onchip_memory2_0+0xfbfeaa84>
    ac78:	193ff804 	addi	r4,r3,-32
    ac7c:	02400804 	movi	r9,32
    ac80:	2908d83a 	srl	r4,r5,r4
    ac84:	1a402526 	beq	r3,r9,ad1c <__adddf3+0x88c>
    ac88:	02401004 	movi	r9,64
    ac8c:	48c7c83a 	sub	r3,r9,r3
    ac90:	28ca983a 	sll	r5,r5,r3
    ac94:	2c62b03a 	or	r17,r5,r17
    ac98:	8822c03a 	cmpne	r17,r17,zero
    ac9c:	8922b03a 	or	r17,r17,r4
    aca0:	0007883a 	mov	r3,zero
    aca4:	003f2f06 	br	a964 <__alt_mem_onchip_memory2_0+0xfbfea964>
    aca8:	01402034 	movhi	r5,128
    acac:	0007883a 	mov	r3,zero
    acb0:	297fffc4 	addi	r5,r5,-1
    acb4:	047ffe04 	movi	r17,-8
    acb8:	0401ffc4 	movi	r16,2047
    acbc:	003e7306 	br	a68c <__alt_mem_onchip_memory2_0+0xfbfea68c>
    acc0:	2c62b03a 	or	r17,r5,r17
    acc4:	8822c03a 	cmpne	r17,r17,zero
    acc8:	0009883a 	mov	r4,zero
    accc:	003fa506 	br	ab64 <__alt_mem_onchip_memory2_0+0xfbfeab64>
    acd0:	400b883a 	mov	r5,r8
    acd4:	3023883a 	mov	r17,r6
    acd8:	003e0c06 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    acdc:	400b883a 	mov	r5,r8
    ace0:	3023883a 	mov	r17,r6
    ace4:	0401ffc4 	movi	r16,2047
    ace8:	003e0806 	br	a50c <__alt_mem_onchip_memory2_0+0xfbfea50c>
    acec:	21fff804 	addi	r7,r4,-32
    acf0:	02400804 	movi	r9,32
    acf4:	29ced83a 	srl	r7,r5,r7
    acf8:	22400a26 	beq	r4,r9,ad24 <__adddf3+0x894>
    acfc:	02401004 	movi	r9,64
    ad00:	4909c83a 	sub	r4,r9,r4
    ad04:	290a983a 	sll	r5,r5,r4
    ad08:	2c62b03a 	or	r17,r5,r17
    ad0c:	8822c03a 	cmpne	r17,r17,zero
    ad10:	89e2b03a 	or	r17,r17,r7
    ad14:	0009883a 	mov	r4,zero
    ad18:	003f9206 	br	ab64 <__alt_mem_onchip_memory2_0+0xfbfeab64>
    ad1c:	000b883a 	mov	r5,zero
    ad20:	003fdc06 	br	ac94 <__alt_mem_onchip_memory2_0+0xfbfeac94>
    ad24:	000b883a 	mov	r5,zero
    ad28:	003ff706 	br	ad08 <__alt_mem_onchip_memory2_0+0xfbfead08>

0000ad2c <__divdf3>:
    ad2c:	defff204 	addi	sp,sp,-56
    ad30:	dd000815 	stw	r20,32(sp)
    ad34:	2828d53a 	srli	r20,r5,20
    ad38:	dd800a15 	stw	r22,40(sp)
    ad3c:	282cd7fa 	srli	r22,r5,31
    ad40:	dc000415 	stw	r16,16(sp)
    ad44:	04000434 	movhi	r16,16
    ad48:	df000c15 	stw	fp,48(sp)
    ad4c:	dcc00715 	stw	r19,28(sp)
    ad50:	dc800615 	stw	r18,24(sp)
    ad54:	dc400515 	stw	r17,20(sp)
    ad58:	843fffc4 	addi	r16,r16,-1
    ad5c:	dfc00d15 	stw	ra,52(sp)
    ad60:	ddc00b15 	stw	r23,44(sp)
    ad64:	dd400915 	stw	r21,36(sp)
    ad68:	a501ffcc 	andi	r20,r20,2047
    ad6c:	2025883a 	mov	r18,r4
    ad70:	2027883a 	mov	r19,r4
    ad74:	2c22703a 	and	r17,r5,r16
    ad78:	b7003fcc 	andi	fp,r22,255
    ad7c:	a0005e26 	beq	r20,zero,aef8 <__divdf3+0x1cc>
    ad80:	0081ffc4 	movi	r2,2047
    ad84:	a0803526 	beq	r20,r2,ae5c <__divdf3+0x130>
    ad88:	8c000434 	orhi	r16,r17,16
    ad8c:	2004d77a 	srli	r2,r4,29
    ad90:	802090fa 	slli	r16,r16,3
    ad94:	202690fa 	slli	r19,r4,3
    ad98:	a53f0044 	addi	r20,r20,-1023
    ad9c:	80a2b03a 	or	r17,r16,r2
    ada0:	0025883a 	mov	r18,zero
    ada4:	0011883a 	mov	r8,zero
    ada8:	380ad53a 	srli	r5,r7,20
    adac:	382ed7fa 	srli	r23,r7,31
    adb0:	04000434 	movhi	r16,16
    adb4:	843fffc4 	addi	r16,r16,-1
    adb8:	2941ffcc 	andi	r5,r5,2047
    adbc:	302b883a 	mov	r21,r6
    adc0:	3c20703a 	and	r16,r7,r16
    adc4:	ba403fcc 	andi	r9,r23,255
    adc8:	28006726 	beq	r5,zero,af68 <__divdf3+0x23c>
    adcc:	0081ffc4 	movi	r2,2047
    add0:	28805f26 	beq	r5,r2,af50 <__divdf3+0x224>
    add4:	84000434 	orhi	r16,r16,16
    add8:	3004d77a 	srli	r2,r6,29
    addc:	802090fa 	slli	r16,r16,3
    ade0:	302a90fa 	slli	r21,r6,3
    ade4:	297f0044 	addi	r5,r5,-1023
    ade8:	80a0b03a 	or	r16,r16,r2
    adec:	000f883a 	mov	r7,zero
    adf0:	3c86b03a 	or	r3,r7,r18
    adf4:	180690ba 	slli	r3,r3,2
    adf8:	00800074 	movhi	r2,1
    adfc:	10ab8704 	addi	r2,r2,-20964
    ae00:	1887883a 	add	r3,r3,r2
    ae04:	18c00017 	ldw	r3,0(r3)
    ae08:	b5c8f03a 	xor	r4,r22,r23
    ae0c:	200d883a 	mov	r6,r4
    ae10:	24803fcc 	andi	r18,r4,255
    ae14:	a169c83a 	sub	r20,r20,r5
    ae18:	1800683a 	jmp	r3
    ae1c:	0000b064 	muli	zero,zero,705
    ae20:	0000ae94 	movui	zero,698
    ae24:	0000b028 	cmpgeui	zero,zero,704
    ae28:	0000ae78 	rdprs	zero,zero,697
    ae2c:	0000b028 	cmpgeui	zero,zero,704
    ae30:	0000affc 	xorhi	zero,zero,703
    ae34:	0000b028 	cmpgeui	zero,zero,704
    ae38:	0000ae78 	rdprs	zero,zero,697
    ae3c:	0000ae94 	movui	zero,698
    ae40:	0000ae94 	movui	zero,698
    ae44:	0000affc 	xorhi	zero,zero,703
    ae48:	0000ae78 	rdprs	zero,zero,697
    ae4c:	0000ae88 	cmpgei	zero,zero,698
    ae50:	0000ae88 	cmpgei	zero,zero,698
    ae54:	0000ae88 	cmpgei	zero,zero,698
    ae58:	0000b038 	rdprs	zero,zero,704
    ae5c:	8904b03a 	or	r2,r17,r4
    ae60:	1000631e 	bne	r2,zero,aff0 <__divdf3+0x2c4>
    ae64:	04800204 	movi	r18,8
    ae68:	0023883a 	mov	r17,zero
    ae6c:	0027883a 	mov	r19,zero
    ae70:	02000084 	movi	r8,2
    ae74:	003fcc06 	br	ada8 <__alt_mem_onchip_memory2_0+0xfbfeada8>
    ae78:	8023883a 	mov	r17,r16
    ae7c:	a827883a 	mov	r19,r21
    ae80:	4839883a 	mov	fp,r9
    ae84:	3811883a 	mov	r8,r7
    ae88:	00800084 	movi	r2,2
    ae8c:	40812a1e 	bne	r8,r2,b338 <__divdf3+0x60c>
    ae90:	e025883a 	mov	r18,fp
    ae94:	9180004c 	andi	r6,r18,1
    ae98:	0101ffc4 	movi	r4,2047
    ae9c:	000b883a 	mov	r5,zero
    aea0:	0027883a 	mov	r19,zero
    aea4:	2008953a 	slli	r4,r4,20
    aea8:	30c03fcc 	andi	r3,r6,255
    aeac:	04000434 	movhi	r16,16
    aeb0:	180697fa 	slli	r3,r3,31
    aeb4:	843fffc4 	addi	r16,r16,-1
    aeb8:	2c20703a 	and	r16,r5,r16
    aebc:	8120b03a 	or	r16,r16,r4
    aec0:	80c6b03a 	or	r3,r16,r3
    aec4:	9805883a 	mov	r2,r19
    aec8:	dfc00d17 	ldw	ra,52(sp)
    aecc:	df000c17 	ldw	fp,48(sp)
    aed0:	ddc00b17 	ldw	r23,44(sp)
    aed4:	dd800a17 	ldw	r22,40(sp)
    aed8:	dd400917 	ldw	r21,36(sp)
    aedc:	dd000817 	ldw	r20,32(sp)
    aee0:	dcc00717 	ldw	r19,28(sp)
    aee4:	dc800617 	ldw	r18,24(sp)
    aee8:	dc400517 	ldw	r17,20(sp)
    aeec:	dc000417 	ldw	r16,16(sp)
    aef0:	dec00e04 	addi	sp,sp,56
    aef4:	f800283a 	ret
    aef8:	8904b03a 	or	r2,r17,r4
    aefc:	10003726 	beq	r2,zero,afdc <__divdf3+0x2b0>
    af00:	88011c26 	beq	r17,zero,b374 <__divdf3+0x648>
    af04:	8809883a 	mov	r4,r17
    af08:	d9800315 	stw	r6,12(sp)
    af0c:	d9c00115 	stw	r7,4(sp)
    af10:	000ca2c0 	call	ca2c <__clzsi2>
    af14:	d9800317 	ldw	r6,12(sp)
    af18:	d9c00117 	ldw	r7,4(sp)
    af1c:	1007883a 	mov	r3,r2
    af20:	01000a04 	movi	r4,40
    af24:	1cfffe04 	addi	r19,r3,-8
    af28:	20c9c83a 	sub	r4,r4,r3
    af2c:	8cca983a 	sll	r5,r17,r19
    af30:	9108d83a 	srl	r4,r18,r4
    af34:	94e6983a 	sll	r19,r18,r19
    af38:	2162b03a 	or	r17,r4,r5
    af3c:	053f0344 	movi	r20,-1011
    af40:	a0e9c83a 	sub	r20,r20,r3
    af44:	0025883a 	mov	r18,zero
    af48:	0011883a 	mov	r8,zero
    af4c:	003f9606 	br	ada8 <__alt_mem_onchip_memory2_0+0xfbfeada8>
    af50:	8184b03a 	or	r2,r16,r6
    af54:	10001f1e 	bne	r2,zero,afd4 <__divdf3+0x2a8>
    af58:	0021883a 	mov	r16,zero
    af5c:	002b883a 	mov	r21,zero
    af60:	01c00084 	movi	r7,2
    af64:	003fa206 	br	adf0 <__alt_mem_onchip_memory2_0+0xfbfeadf0>
    af68:	8184b03a 	or	r2,r16,r6
    af6c:	10001526 	beq	r2,zero,afc4 <__divdf3+0x298>
    af70:	80010c26 	beq	r16,zero,b3a4 <__divdf3+0x678>
    af74:	8009883a 	mov	r4,r16
    af78:	d9800315 	stw	r6,12(sp)
    af7c:	da000215 	stw	r8,8(sp)
    af80:	da400015 	stw	r9,0(sp)
    af84:	000ca2c0 	call	ca2c <__clzsi2>
    af88:	d9800317 	ldw	r6,12(sp)
    af8c:	da000217 	ldw	r8,8(sp)
    af90:	da400017 	ldw	r9,0(sp)
    af94:	1007883a 	mov	r3,r2
    af98:	01000a04 	movi	r4,40
    af9c:	1d7ffe04 	addi	r21,r3,-8
    afa0:	20c9c83a 	sub	r4,r4,r3
    afa4:	8560983a 	sll	r16,r16,r21
    afa8:	3108d83a 	srl	r4,r6,r4
    afac:	356a983a 	sll	r21,r6,r21
    afb0:	2420b03a 	or	r16,r4,r16
    afb4:	017f0344 	movi	r5,-1011
    afb8:	28cbc83a 	sub	r5,r5,r3
    afbc:	000f883a 	mov	r7,zero
    afc0:	003f8b06 	br	adf0 <__alt_mem_onchip_memory2_0+0xfbfeadf0>
    afc4:	0021883a 	mov	r16,zero
    afc8:	002b883a 	mov	r21,zero
    afcc:	01c00044 	movi	r7,1
    afd0:	003f8706 	br	adf0 <__alt_mem_onchip_memory2_0+0xfbfeadf0>
    afd4:	01c000c4 	movi	r7,3
    afd8:	003f8506 	br	adf0 <__alt_mem_onchip_memory2_0+0xfbfeadf0>
    afdc:	04800104 	movi	r18,4
    afe0:	0023883a 	mov	r17,zero
    afe4:	0027883a 	mov	r19,zero
    afe8:	02000044 	movi	r8,1
    afec:	003f6e06 	br	ada8 <__alt_mem_onchip_memory2_0+0xfbfeada8>
    aff0:	04800304 	movi	r18,12
    aff4:	020000c4 	movi	r8,3
    aff8:	003f6b06 	br	ada8 <__alt_mem_onchip_memory2_0+0xfbfeada8>
    affc:	01400434 	movhi	r5,16
    b000:	000d883a 	mov	r6,zero
    b004:	297fffc4 	addi	r5,r5,-1
    b008:	04ffffc4 	movi	r19,-1
    b00c:	0101ffc4 	movi	r4,2047
    b010:	003fa406 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b014:	043f0084 	movi	r16,-1022
    b018:	8521c83a 	sub	r16,r16,r20
    b01c:	00800e04 	movi	r2,56
    b020:	1401200e 	bge	r2,r16,b4a4 <__divdf3+0x778>
    b024:	9180004c 	andi	r6,r18,1
    b028:	0009883a 	mov	r4,zero
    b02c:	000b883a 	mov	r5,zero
    b030:	0027883a 	mov	r19,zero
    b034:	003f9b06 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b038:	8880022c 	andhi	r2,r17,8
    b03c:	1000c726 	beq	r2,zero,b35c <__divdf3+0x630>
    b040:	8080022c 	andhi	r2,r16,8
    b044:	1000c51e 	bne	r2,zero,b35c <__divdf3+0x630>
    b048:	00800434 	movhi	r2,16
    b04c:	81400234 	orhi	r5,r16,8
    b050:	10bfffc4 	addi	r2,r2,-1
    b054:	b80d883a 	mov	r6,r23
    b058:	288a703a 	and	r5,r5,r2
    b05c:	a827883a 	mov	r19,r21
    b060:	003fea06 	br	b00c <__alt_mem_onchip_memory2_0+0xfbfeb00c>
    b064:	8440ea36 	bltu	r16,r17,b410 <__divdf3+0x6e4>
    b068:	8c00e826 	beq	r17,r16,b40c <__divdf3+0x6e0>
    b06c:	a53fffc4 	addi	r20,r20,-1
    b070:	882d883a 	mov	r22,r17
    b074:	000d883a 	mov	r6,zero
    b078:	a804d63a 	srli	r2,r21,24
    b07c:	8020923a 	slli	r16,r16,8
    b080:	b009883a 	mov	r4,r22
    b084:	d9800315 	stw	r6,12(sp)
    b088:	1420b03a 	or	r16,r2,r16
    b08c:	802ed43a 	srli	r23,r16,16
    b090:	873fffcc 	andi	fp,r16,65535
    b094:	a82a923a 	slli	r21,r21,8
    b098:	b80b883a 	mov	r5,r23
    b09c:	000a4800 	call	a480 <__udivsi3>
    b0a0:	b009883a 	mov	r4,r22
    b0a4:	b80b883a 	mov	r5,r23
    b0a8:	1023883a 	mov	r17,r2
    b0ac:	000a4880 	call	a488 <__umodsi3>
    b0b0:	1004943a 	slli	r2,r2,16
    b0b4:	9808d43a 	srli	r4,r19,16
    b0b8:	8f2d383a 	mul	r22,r17,fp
    b0bc:	d9800317 	ldw	r6,12(sp)
    b0c0:	1106b03a 	or	r3,r2,r4
    b0c4:	1d80062e 	bgeu	r3,r22,b0e0 <__divdf3+0x3b4>
    b0c8:	1c07883a 	add	r3,r3,r16
    b0cc:	88bfffc4 	addi	r2,r17,-1
    b0d0:	1c00dc36 	bltu	r3,r16,b444 <__divdf3+0x718>
    b0d4:	1d80db2e 	bgeu	r3,r22,b444 <__divdf3+0x718>
    b0d8:	8c7fff84 	addi	r17,r17,-2
    b0dc:	1c07883a 	add	r3,r3,r16
    b0e0:	1dadc83a 	sub	r22,r3,r22
    b0e4:	b009883a 	mov	r4,r22
    b0e8:	b80b883a 	mov	r5,r23
    b0ec:	d9800315 	stw	r6,12(sp)
    b0f0:	000a4800 	call	a480 <__udivsi3>
    b0f4:	b009883a 	mov	r4,r22
    b0f8:	b80b883a 	mov	r5,r23
    b0fc:	d8800015 	stw	r2,0(sp)
    b100:	000a4880 	call	a488 <__umodsi3>
    b104:	da400017 	ldw	r9,0(sp)
    b108:	1004943a 	slli	r2,r2,16
    b10c:	9cffffcc 	andi	r19,r19,65535
    b110:	4f07383a 	mul	r3,r9,fp
    b114:	14c8b03a 	or	r4,r2,r19
    b118:	d9800317 	ldw	r6,12(sp)
    b11c:	20c0062e 	bgeu	r4,r3,b138 <__divdf3+0x40c>
    b120:	2409883a 	add	r4,r4,r16
    b124:	48bfffc4 	addi	r2,r9,-1
    b128:	2400c436 	bltu	r4,r16,b43c <__divdf3+0x710>
    b12c:	20c0c32e 	bgeu	r4,r3,b43c <__divdf3+0x710>
    b130:	4a7fff84 	addi	r9,r9,-2
    b134:	2409883a 	add	r4,r4,r16
    b138:	8822943a 	slli	r17,r17,16
    b13c:	a80ed43a 	srli	r7,r21,16
    b140:	aa3fffcc 	andi	r8,r21,65535
    b144:	4c62b03a 	or	r17,r9,r17
    b148:	8816d43a 	srli	r11,r17,16
    b14c:	897fffcc 	andi	r5,r17,65535
    b150:	2a15383a 	mul	r10,r5,r8
    b154:	5a19383a 	mul	r12,r11,r8
    b158:	29cb383a 	mul	r5,r5,r7
    b15c:	5012d43a 	srli	r9,r10,16
    b160:	20c5c83a 	sub	r2,r4,r3
    b164:	614b883a 	add	r5,r12,r5
    b168:	2a4b883a 	add	r5,r5,r9
    b16c:	59c7383a 	mul	r3,r11,r7
    b170:	2b00022e 	bgeu	r5,r12,b17c <__divdf3+0x450>
    b174:	01000074 	movhi	r4,1
    b178:	1907883a 	add	r3,r3,r4
    b17c:	2808d43a 	srli	r4,r5,16
    b180:	280a943a 	slli	r5,r5,16
    b184:	54ffffcc 	andi	r19,r10,65535
    b188:	1907883a 	add	r3,r3,r4
    b18c:	2ccb883a 	add	r5,r5,r19
    b190:	10c09336 	bltu	r2,r3,b3e0 <__divdf3+0x6b4>
    b194:	10c0ad26 	beq	r2,r3,b44c <__divdf3+0x720>
    b198:	10c7c83a 	sub	r3,r2,r3
    b19c:	3167c83a 	sub	r19,r6,r5
    b1a0:	34ed803a 	cmpltu	r22,r6,r19
    b1a4:	1dadc83a 	sub	r22,r3,r22
    b1a8:	b400b226 	beq	r22,r16,b474 <__divdf3+0x748>
    b1ac:	b009883a 	mov	r4,r22
    b1b0:	b80b883a 	mov	r5,r23
    b1b4:	d9c00115 	stw	r7,4(sp)
    b1b8:	da000215 	stw	r8,8(sp)
    b1bc:	000a4800 	call	a480 <__udivsi3>
    b1c0:	b009883a 	mov	r4,r22
    b1c4:	b80b883a 	mov	r5,r23
    b1c8:	d8800315 	stw	r2,12(sp)
    b1cc:	000a4880 	call	a488 <__umodsi3>
    b1d0:	d9800317 	ldw	r6,12(sp)
    b1d4:	1004943a 	slli	r2,r2,16
    b1d8:	9808d43a 	srli	r4,r19,16
    b1dc:	372d383a 	mul	r22,r6,fp
    b1e0:	d9c00117 	ldw	r7,4(sp)
    b1e4:	1106b03a 	or	r3,r2,r4
    b1e8:	da000217 	ldw	r8,8(sp)
    b1ec:	1d80062e 	bgeu	r3,r22,b208 <__divdf3+0x4dc>
    b1f0:	1c07883a 	add	r3,r3,r16
    b1f4:	30bfffc4 	addi	r2,r6,-1
    b1f8:	1c00a036 	bltu	r3,r16,b47c <__divdf3+0x750>
    b1fc:	1d809f2e 	bgeu	r3,r22,b47c <__divdf3+0x750>
    b200:	31bfff84 	addi	r6,r6,-2
    b204:	1c07883a 	add	r3,r3,r16
    b208:	1dadc83a 	sub	r22,r3,r22
    b20c:	b009883a 	mov	r4,r22
    b210:	b80b883a 	mov	r5,r23
    b214:	d9800315 	stw	r6,12(sp)
    b218:	d9c00115 	stw	r7,4(sp)
    b21c:	da000215 	stw	r8,8(sp)
    b220:	000a4800 	call	a480 <__udivsi3>
    b224:	b009883a 	mov	r4,r22
    b228:	b80b883a 	mov	r5,r23
    b22c:	d8800015 	stw	r2,0(sp)
    b230:	000a4880 	call	a488 <__umodsi3>
    b234:	da400017 	ldw	r9,0(sp)
    b238:	1004943a 	slli	r2,r2,16
    b23c:	993fffcc 	andi	r4,r19,65535
    b240:	4f39383a 	mul	fp,r9,fp
    b244:	1106b03a 	or	r3,r2,r4
    b248:	d9800317 	ldw	r6,12(sp)
    b24c:	d9c00117 	ldw	r7,4(sp)
    b250:	da000217 	ldw	r8,8(sp)
    b254:	1f00062e 	bgeu	r3,fp,b270 <__divdf3+0x544>
    b258:	1c07883a 	add	r3,r3,r16
    b25c:	48bfffc4 	addi	r2,r9,-1
    b260:	1c008836 	bltu	r3,r16,b484 <__divdf3+0x758>
    b264:	1f00872e 	bgeu	r3,fp,b484 <__divdf3+0x758>
    b268:	4a7fff84 	addi	r9,r9,-2
    b26c:	1c07883a 	add	r3,r3,r16
    b270:	3008943a 	slli	r4,r6,16
    b274:	1f07c83a 	sub	r3,r3,fp
    b278:	4926b03a 	or	r19,r9,r4
    b27c:	993fffcc 	andi	r4,r19,65535
    b280:	980cd43a 	srli	r6,r19,16
    b284:	220b383a 	mul	r5,r4,r8
    b288:	21c5383a 	mul	r2,r4,r7
    b28c:	3211383a 	mul	r8,r6,r8
    b290:	2808d43a 	srli	r4,r5,16
    b294:	31cf383a 	mul	r7,r6,r7
    b298:	4085883a 	add	r2,r8,r2
    b29c:	1105883a 	add	r2,r2,r4
    b2a0:	1200022e 	bgeu	r2,r8,b2ac <__divdf3+0x580>
    b2a4:	01000074 	movhi	r4,1
    b2a8:	390f883a 	add	r7,r7,r4
    b2ac:	1008d43a 	srli	r4,r2,16
    b2b0:	1004943a 	slli	r2,r2,16
    b2b4:	297fffcc 	andi	r5,r5,65535
    b2b8:	390f883a 	add	r7,r7,r4
    b2bc:	1145883a 	add	r2,r2,r5
    b2c0:	19c06536 	bltu	r3,r7,b458 <__divdf3+0x72c>
    b2c4:	19c09f26 	beq	r3,r7,b544 <__divdf3+0x818>
    b2c8:	9cc00054 	ori	r19,r19,1
    b2cc:	a100ffc4 	addi	r4,r20,1023
    b2d0:	013f500e 	bge	zero,r4,b014 <__alt_mem_onchip_memory2_0+0xfbfeb014>
    b2d4:	988001cc 	andi	r2,r19,7
    b2d8:	10000726 	beq	r2,zero,b2f8 <__divdf3+0x5cc>
    b2dc:	98c003cc 	andi	r3,r19,15
    b2e0:	00800104 	movi	r2,4
    b2e4:	18800426 	beq	r3,r2,b2f8 <__divdf3+0x5cc>
    b2e8:	9885883a 	add	r2,r19,r2
    b2ec:	14e1803a 	cmpltu	r16,r2,r19
    b2f0:	8c23883a 	add	r17,r17,r16
    b2f4:	1027883a 	mov	r19,r2
    b2f8:	8880402c 	andhi	r2,r17,256
    b2fc:	10000426 	beq	r2,zero,b310 <__divdf3+0x5e4>
    b300:	00bfc034 	movhi	r2,65280
    b304:	10bfffc4 	addi	r2,r2,-1
    b308:	a1010004 	addi	r4,r20,1024
    b30c:	88a2703a 	and	r17,r17,r2
    b310:	0081ff84 	movi	r2,2046
    b314:	113edf16 	blt	r2,r4,ae94 <__alt_mem_onchip_memory2_0+0xfbfeae94>
    b318:	9826d0fa 	srli	r19,r19,3
    b31c:	8804977a 	slli	r2,r17,29
    b320:	8820927a 	slli	r16,r17,9
    b324:	2101ffcc 	andi	r4,r4,2047
    b328:	14e6b03a 	or	r19,r2,r19
    b32c:	800ad33a 	srli	r5,r16,12
    b330:	9180004c 	andi	r6,r18,1
    b334:	003edb06 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b338:	008000c4 	movi	r2,3
    b33c:	4080a826 	beq	r8,r2,b5e0 <__divdf3+0x8b4>
    b340:	00800044 	movi	r2,1
    b344:	4080551e 	bne	r8,r2,b49c <__divdf3+0x770>
    b348:	e00d883a 	mov	r6,fp
    b34c:	0009883a 	mov	r4,zero
    b350:	000b883a 	mov	r5,zero
    b354:	0027883a 	mov	r19,zero
    b358:	003ed206 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b35c:	00800434 	movhi	r2,16
    b360:	89400234 	orhi	r5,r17,8
    b364:	10bfffc4 	addi	r2,r2,-1
    b368:	b00d883a 	mov	r6,r22
    b36c:	288a703a 	and	r5,r5,r2
    b370:	003f2606 	br	b00c <__alt_mem_onchip_memory2_0+0xfbfeb00c>
    b374:	d9800315 	stw	r6,12(sp)
    b378:	d9c00115 	stw	r7,4(sp)
    b37c:	000ca2c0 	call	ca2c <__clzsi2>
    b380:	10c00804 	addi	r3,r2,32
    b384:	010009c4 	movi	r4,39
    b388:	d9800317 	ldw	r6,12(sp)
    b38c:	d9c00117 	ldw	r7,4(sp)
    b390:	20fee30e 	bge	r4,r3,af20 <__alt_mem_onchip_memory2_0+0xfbfeaf20>
    b394:	117ffe04 	addi	r5,r2,-8
    b398:	9162983a 	sll	r17,r18,r5
    b39c:	0027883a 	mov	r19,zero
    b3a0:	003ee606 	br	af3c <__alt_mem_onchip_memory2_0+0xfbfeaf3c>
    b3a4:	3009883a 	mov	r4,r6
    b3a8:	d9800315 	stw	r6,12(sp)
    b3ac:	da000215 	stw	r8,8(sp)
    b3b0:	da400015 	stw	r9,0(sp)
    b3b4:	000ca2c0 	call	ca2c <__clzsi2>
    b3b8:	10c00804 	addi	r3,r2,32
    b3bc:	010009c4 	movi	r4,39
    b3c0:	d9800317 	ldw	r6,12(sp)
    b3c4:	da000217 	ldw	r8,8(sp)
    b3c8:	da400017 	ldw	r9,0(sp)
    b3cc:	20fef20e 	bge	r4,r3,af98 <__alt_mem_onchip_memory2_0+0xfbfeaf98>
    b3d0:	10bffe04 	addi	r2,r2,-8
    b3d4:	a8a0983a 	sll	r16,r21,r2
    b3d8:	002b883a 	mov	r21,zero
    b3dc:	003ef506 	br	afb4 <__alt_mem_onchip_memory2_0+0xfbfeafb4>
    b3e0:	354d883a 	add	r6,r6,r21
    b3e4:	3549803a 	cmpltu	r4,r6,r21
    b3e8:	2409883a 	add	r4,r4,r16
    b3ec:	2089883a 	add	r4,r4,r2
    b3f0:	88bfffc4 	addi	r2,r17,-1
    b3f4:	81000c2e 	bgeu	r16,r4,b428 <__divdf3+0x6fc>
    b3f8:	20c04436 	bltu	r4,r3,b50c <__divdf3+0x7e0>
    b3fc:	19006f26 	beq	r3,r4,b5bc <__divdf3+0x890>
    b400:	20c7c83a 	sub	r3,r4,r3
    b404:	1023883a 	mov	r17,r2
    b408:	003f6406 	br	b19c <__alt_mem_onchip_memory2_0+0xfbfeb19c>
    b40c:	9d7f1736 	bltu	r19,r21,b06c <__alt_mem_onchip_memory2_0+0xfbfeb06c>
    b410:	9806d07a 	srli	r3,r19,1
    b414:	880497fa 	slli	r2,r17,31
    b418:	980c97fa 	slli	r6,r19,31
    b41c:	882cd07a 	srli	r22,r17,1
    b420:	18a6b03a 	or	r19,r3,r2
    b424:	003f1406 	br	b078 <__alt_mem_onchip_memory2_0+0xfbfeb078>
    b428:	243ff51e 	bne	r4,r16,b400 <__alt_mem_onchip_memory2_0+0xfbfeb400>
    b42c:	357ff22e 	bgeu	r6,r21,b3f8 <__alt_mem_onchip_memory2_0+0xfbfeb3f8>
    b430:	80c7c83a 	sub	r3,r16,r3
    b434:	1023883a 	mov	r17,r2
    b438:	003f5806 	br	b19c <__alt_mem_onchip_memory2_0+0xfbfeb19c>
    b43c:	1013883a 	mov	r9,r2
    b440:	003f3d06 	br	b138 <__alt_mem_onchip_memory2_0+0xfbfeb138>
    b444:	1023883a 	mov	r17,r2
    b448:	003f2506 	br	b0e0 <__alt_mem_onchip_memory2_0+0xfbfeb0e0>
    b44c:	317fe436 	bltu	r6,r5,b3e0 <__alt_mem_onchip_memory2_0+0xfbfeb3e0>
    b450:	0007883a 	mov	r3,zero
    b454:	003f5106 	br	b19c <__alt_mem_onchip_memory2_0+0xfbfeb19c>
    b458:	1c07883a 	add	r3,r3,r16
    b45c:	993fffc4 	addi	r4,r19,-1
    b460:	1c000a2e 	bgeu	r3,r16,b48c <__divdf3+0x760>
    b464:	2027883a 	mov	r19,r4
    b468:	19ff971e 	bne	r3,r7,b2c8 <__alt_mem_onchip_memory2_0+0xfbfeb2c8>
    b46c:	a8bf961e 	bne	r21,r2,b2c8 <__alt_mem_onchip_memory2_0+0xfbfeb2c8>
    b470:	003f9606 	br	b2cc <__alt_mem_onchip_memory2_0+0xfbfeb2cc>
    b474:	04ffffc4 	movi	r19,-1
    b478:	003f9406 	br	b2cc <__alt_mem_onchip_memory2_0+0xfbfeb2cc>
    b47c:	100d883a 	mov	r6,r2
    b480:	003f6106 	br	b208 <__alt_mem_onchip_memory2_0+0xfbfeb208>
    b484:	1013883a 	mov	r9,r2
    b488:	003f7906 	br	b270 <__alt_mem_onchip_memory2_0+0xfbfeb270>
    b48c:	19c02636 	bltu	r3,r7,b528 <__divdf3+0x7fc>
    b490:	38c04d26 	beq	r7,r3,b5c8 <__divdf3+0x89c>
    b494:	2027883a 	mov	r19,r4
    b498:	003f8b06 	br	b2c8 <__alt_mem_onchip_memory2_0+0xfbfeb2c8>
    b49c:	e025883a 	mov	r18,fp
    b4a0:	003f8a06 	br	b2cc <__alt_mem_onchip_memory2_0+0xfbfeb2cc>
    b4a4:	008007c4 	movi	r2,31
    b4a8:	14002a16 	blt	r2,r16,b554 <__divdf3+0x828>
    b4ac:	a5010784 	addi	r20,r20,1054
    b4b0:	8d04983a 	sll	r2,r17,r20
    b4b4:	9c06d83a 	srl	r3,r19,r16
    b4b8:	9d28983a 	sll	r20,r19,r20
    b4bc:	8c20d83a 	srl	r16,r17,r16
    b4c0:	1886b03a 	or	r3,r3,r2
    b4c4:	a004c03a 	cmpne	r2,r20,zero
    b4c8:	1884b03a 	or	r2,r3,r2
    b4cc:	10c001cc 	andi	r3,r2,7
    b4d0:	18000726 	beq	r3,zero,b4f0 <__divdf3+0x7c4>
    b4d4:	110003cc 	andi	r4,r2,15
    b4d8:	00c00104 	movi	r3,4
    b4dc:	20c00426 	beq	r4,r3,b4f0 <__divdf3+0x7c4>
    b4e0:	10c00104 	addi	r3,r2,4
    b4e4:	1885803a 	cmpltu	r2,r3,r2
    b4e8:	80a1883a 	add	r16,r16,r2
    b4ec:	1805883a 	mov	r2,r3
    b4f0:	80c0202c 	andhi	r3,r16,128
    b4f4:	18002d26 	beq	r3,zero,b5ac <__divdf3+0x880>
    b4f8:	9180004c 	andi	r6,r18,1
    b4fc:	01000044 	movi	r4,1
    b500:	000b883a 	mov	r5,zero
    b504:	0027883a 	mov	r19,zero
    b508:	003e6606 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b50c:	354d883a 	add	r6,r6,r21
    b510:	356d803a 	cmpltu	r22,r6,r21
    b514:	b42d883a 	add	r22,r22,r16
    b518:	b12d883a 	add	r22,r22,r4
    b51c:	8c7fff84 	addi	r17,r17,-2
    b520:	b0c7c83a 	sub	r3,r22,r3
    b524:	003f1d06 	br	b19c <__alt_mem_onchip_memory2_0+0xfbfeb19c>
    b528:	ad4b883a 	add	r5,r21,r21
    b52c:	2d6b803a 	cmpltu	r21,r5,r21
    b530:	ac2b883a 	add	r21,r21,r16
    b534:	1d47883a 	add	r3,r3,r21
    b538:	993fff84 	addi	r4,r19,-2
    b53c:	282b883a 	mov	r21,r5
    b540:	003fc806 	br	b464 <__alt_mem_onchip_memory2_0+0xfbfeb464>
    b544:	103fc41e 	bne	r2,zero,b458 <__alt_mem_onchip_memory2_0+0xfbfeb458>
    b548:	002b883a 	mov	r21,zero
    b54c:	a8bf5e1e 	bne	r21,r2,b2c8 <__alt_mem_onchip_memory2_0+0xfbfeb2c8>
    b550:	003f5e06 	br	b2cc <__alt_mem_onchip_memory2_0+0xfbfeb2cc>
    b554:	00bef884 	movi	r2,-1054
    b558:	1505c83a 	sub	r2,r2,r20
    b55c:	00c00804 	movi	r3,32
    b560:	8884d83a 	srl	r2,r17,r2
    b564:	80c01c26 	beq	r16,r3,b5d8 <__divdf3+0x8ac>
    b568:	a0c10f84 	addi	r3,r20,1086
    b56c:	88c6983a 	sll	r3,r17,r3
    b570:	1cc6b03a 	or	r3,r3,r19
    b574:	1806c03a 	cmpne	r3,r3,zero
    b578:	1884b03a 	or	r2,r3,r2
    b57c:	140001cc 	andi	r16,r2,7
    b580:	8000061e 	bne	r16,zero,b59c <__divdf3+0x870>
    b584:	000b883a 	mov	r5,zero
    b588:	1004d0fa 	srli	r2,r2,3
    b58c:	9180004c 	andi	r6,r18,1
    b590:	0009883a 	mov	r4,zero
    b594:	1426b03a 	or	r19,r2,r16
    b598:	003e4206 	br	aea4 <__alt_mem_onchip_memory2_0+0xfbfeaea4>
    b59c:	110003cc 	andi	r4,r2,15
    b5a0:	00c00104 	movi	r3,4
    b5a4:	0021883a 	mov	r16,zero
    b5a8:	20ffcd1e 	bne	r4,r3,b4e0 <__alt_mem_onchip_memory2_0+0xfbfeb4e0>
    b5ac:	800a927a 	slli	r5,r16,9
    b5b0:	8020977a 	slli	r16,r16,29
    b5b4:	280ad33a 	srli	r5,r5,12
    b5b8:	003ff306 	br	b588 <__alt_mem_onchip_memory2_0+0xfbfeb588>
    b5bc:	317fd336 	bltu	r6,r5,b50c <__alt_mem_onchip_memory2_0+0xfbfeb50c>
    b5c0:	1023883a 	mov	r17,r2
    b5c4:	003fa206 	br	b450 <__alt_mem_onchip_memory2_0+0xfbfeb450>
    b5c8:	a8bfd736 	bltu	r21,r2,b528 <__alt_mem_onchip_memory2_0+0xfbfeb528>
    b5cc:	2027883a 	mov	r19,r4
    b5d0:	a8bf3d1e 	bne	r21,r2,b2c8 <__alt_mem_onchip_memory2_0+0xfbfeb2c8>
    b5d4:	003f3d06 	br	b2cc <__alt_mem_onchip_memory2_0+0xfbfeb2cc>
    b5d8:	0007883a 	mov	r3,zero
    b5dc:	003fe406 	br	b570 <__alt_mem_onchip_memory2_0+0xfbfeb570>
    b5e0:	00800434 	movhi	r2,16
    b5e4:	89400234 	orhi	r5,r17,8
    b5e8:	10bfffc4 	addi	r2,r2,-1
    b5ec:	e00d883a 	mov	r6,fp
    b5f0:	288a703a 	and	r5,r5,r2
    b5f4:	003e8506 	br	b00c <__alt_mem_onchip_memory2_0+0xfbfeb00c>

0000b5f8 <__eqdf2>:
    b5f8:	2804d53a 	srli	r2,r5,20
    b5fc:	3806d53a 	srli	r3,r7,20
    b600:	02000434 	movhi	r8,16
    b604:	423fffc4 	addi	r8,r8,-1
    b608:	1081ffcc 	andi	r2,r2,2047
    b60c:	0241ffc4 	movi	r9,2047
    b610:	2a14703a 	and	r10,r5,r8
    b614:	18c1ffcc 	andi	r3,r3,2047
    b618:	3a10703a 	and	r8,r7,r8
    b61c:	280ad7fa 	srli	r5,r5,31
    b620:	380ed7fa 	srli	r7,r7,31
    b624:	12400f26 	beq	r2,r9,b664 <__eqdf2+0x6c>
    b628:	0241ffc4 	movi	r9,2047
    b62c:	1a400326 	beq	r3,r9,b63c <__eqdf2+0x44>
    b630:	10c00526 	beq	r2,r3,b648 <__eqdf2+0x50>
    b634:	00800044 	movi	r2,1
    b638:	f800283a 	ret
    b63c:	4192b03a 	or	r9,r8,r6
    b640:	483ffc1e 	bne	r9,zero,b634 <__alt_mem_onchip_memory2_0+0xfbfeb634>
    b644:	10fffb1e 	bne	r2,r3,b634 <__alt_mem_onchip_memory2_0+0xfbfeb634>
    b648:	523ffa1e 	bne	r10,r8,b634 <__alt_mem_onchip_memory2_0+0xfbfeb634>
    b64c:	21bff91e 	bne	r4,r6,b634 <__alt_mem_onchip_memory2_0+0xfbfeb634>
    b650:	29c00826 	beq	r5,r7,b674 <__eqdf2+0x7c>
    b654:	103ff71e 	bne	r2,zero,b634 <__alt_mem_onchip_memory2_0+0xfbfeb634>
    b658:	5104b03a 	or	r2,r10,r4
    b65c:	1004c03a 	cmpne	r2,r2,zero
    b660:	f800283a 	ret
    b664:	5112b03a 	or	r9,r10,r4
    b668:	483fef26 	beq	r9,zero,b628 <__alt_mem_onchip_memory2_0+0xfbfeb628>
    b66c:	00800044 	movi	r2,1
    b670:	f800283a 	ret
    b674:	0005883a 	mov	r2,zero
    b678:	f800283a 	ret

0000b67c <__gedf2>:
    b67c:	2804d53a 	srli	r2,r5,20
    b680:	3806d53a 	srli	r3,r7,20
    b684:	02000434 	movhi	r8,16
    b688:	423fffc4 	addi	r8,r8,-1
    b68c:	0241ffc4 	movi	r9,2047
    b690:	1081ffcc 	andi	r2,r2,2047
    b694:	2a14703a 	and	r10,r5,r8
    b698:	1a46703a 	and	r3,r3,r9
    b69c:	3a10703a 	and	r8,r7,r8
    b6a0:	280ad7fa 	srli	r5,r5,31
    b6a4:	380ed7fa 	srli	r7,r7,31
    b6a8:	12400b26 	beq	r2,r9,b6d8 <__gedf2+0x5c>
    b6ac:	1a401626 	beq	r3,r9,b708 <__gedf2+0x8c>
    b6b0:	10000c1e 	bne	r2,zero,b6e4 <__gedf2+0x68>
    b6b4:	5112b03a 	or	r9,r10,r4
    b6b8:	4813003a 	cmpeq	r9,r9,zero
    b6bc:	4817883a 	mov	r11,r9
    b6c0:	18000c1e 	bne	r3,zero,b6f4 <__gedf2+0x78>
    b6c4:	4198b03a 	or	r12,r8,r6
    b6c8:	60000a1e 	bne	r12,zero,b6f4 <__gedf2+0x78>
    b6cc:	48001326 	beq	r9,zero,b71c <__gedf2+0xa0>
    b6d0:	0005883a 	mov	r2,zero
    b6d4:	f800283a 	ret
    b6d8:	5112b03a 	or	r9,r10,r4
    b6dc:	4800191e 	bne	r9,zero,b744 <__gedf2+0xc8>
    b6e0:	18800926 	beq	r3,r2,b708 <__gedf2+0x8c>
    b6e4:	18000b1e 	bne	r3,zero,b714 <__gedf2+0x98>
    b6e8:	4192b03a 	or	r9,r8,r6
    b6ec:	0017883a 	mov	r11,zero
    b6f0:	48000a26 	beq	r9,zero,b71c <__gedf2+0xa0>
    b6f4:	39c03fcc 	andi	r7,r7,255
    b6f8:	58000726 	beq	r11,zero,b718 <__gedf2+0x9c>
    b6fc:	3800081e 	bne	r7,zero,b720 <__gedf2+0xa4>
    b700:	00bfffc4 	movi	r2,-1
    b704:	f800283a 	ret
    b708:	4192b03a 	or	r9,r8,r6
    b70c:	48000d1e 	bne	r9,zero,b744 <__gedf2+0xc8>
    b710:	103fe826 	beq	r2,zero,b6b4 <__alt_mem_onchip_memory2_0+0xfbfeb6b4>
    b714:	39c03fcc 	andi	r7,r7,255
    b718:	29c00326 	beq	r5,r7,b728 <__gedf2+0xac>
    b71c:	283ff81e 	bne	r5,zero,b700 <__alt_mem_onchip_memory2_0+0xfbfeb700>
    b720:	00800044 	movi	r2,1
    b724:	f800283a 	ret
    b728:	18bffc16 	blt	r3,r2,b71c <__alt_mem_onchip_memory2_0+0xfbfeb71c>
    b72c:	10c00316 	blt	r2,r3,b73c <__gedf2+0xc0>
    b730:	42bffa36 	bltu	r8,r10,b71c <__alt_mem_onchip_memory2_0+0xfbfeb71c>
    b734:	52000526 	beq	r10,r8,b74c <__gedf2+0xd0>
    b738:	523fe52e 	bgeu	r10,r8,b6d0 <__alt_mem_onchip_memory2_0+0xfbfeb6d0>
    b73c:	283ff026 	beq	r5,zero,b700 <__alt_mem_onchip_memory2_0+0xfbfeb700>
    b740:	003ff706 	br	b720 <__alt_mem_onchip_memory2_0+0xfbfeb720>
    b744:	00bfff84 	movi	r2,-2
    b748:	f800283a 	ret
    b74c:	313ff336 	bltu	r6,r4,b71c <__alt_mem_onchip_memory2_0+0xfbfeb71c>
    b750:	21bfdf2e 	bgeu	r4,r6,b6d0 <__alt_mem_onchip_memory2_0+0xfbfeb6d0>
    b754:	283fea26 	beq	r5,zero,b700 <__alt_mem_onchip_memory2_0+0xfbfeb700>
    b758:	003ff106 	br	b720 <__alt_mem_onchip_memory2_0+0xfbfeb720>

0000b75c <__ledf2>:
    b75c:	2804d53a 	srli	r2,r5,20
    b760:	3810d53a 	srli	r8,r7,20
    b764:	00c00434 	movhi	r3,16
    b768:	18ffffc4 	addi	r3,r3,-1
    b76c:	0241ffc4 	movi	r9,2047
    b770:	1081ffcc 	andi	r2,r2,2047
    b774:	28d4703a 	and	r10,r5,r3
    b778:	4250703a 	and	r8,r8,r9
    b77c:	38c6703a 	and	r3,r7,r3
    b780:	280ad7fa 	srli	r5,r5,31
    b784:	380ed7fa 	srli	r7,r7,31
    b788:	12400b26 	beq	r2,r9,b7b8 <__ledf2+0x5c>
    b78c:	42401926 	beq	r8,r9,b7f4 <__ledf2+0x98>
    b790:	10000c1e 	bne	r2,zero,b7c4 <__ledf2+0x68>
    b794:	5112b03a 	or	r9,r10,r4
    b798:	4813003a 	cmpeq	r9,r9,zero
    b79c:	4817883a 	mov	r11,r9
    b7a0:	40000f26 	beq	r8,zero,b7e0 <__ledf2+0x84>
    b7a4:	39c03fcc 	andi	r7,r7,255
    b7a8:	58001826 	beq	r11,zero,b80c <__ledf2+0xb0>
    b7ac:	38000a1e 	bne	r7,zero,b7d8 <__ledf2+0x7c>
    b7b0:	00bfffc4 	movi	r2,-1
    b7b4:	f800283a 	ret
    b7b8:	5112b03a 	or	r9,r10,r4
    b7bc:	48000f1e 	bne	r9,zero,b7fc <__ledf2+0xa0>
    b7c0:	40800c26 	beq	r8,r2,b7f4 <__ledf2+0x98>
    b7c4:	4000101e 	bne	r8,zero,b808 <__ledf2+0xac>
    b7c8:	1992b03a 	or	r9,r3,r6
    b7cc:	0017883a 	mov	r11,zero
    b7d0:	483ff41e 	bne	r9,zero,b7a4 <__alt_mem_onchip_memory2_0+0xfbfeb7a4>
    b7d4:	283ff61e 	bne	r5,zero,b7b0 <__alt_mem_onchip_memory2_0+0xfbfeb7b0>
    b7d8:	00800044 	movi	r2,1
    b7dc:	f800283a 	ret
    b7e0:	1998b03a 	or	r12,r3,r6
    b7e4:	603fef1e 	bne	r12,zero,b7a4 <__alt_mem_onchip_memory2_0+0xfbfeb7a4>
    b7e8:	483ffa26 	beq	r9,zero,b7d4 <__alt_mem_onchip_memory2_0+0xfbfeb7d4>
    b7ec:	0005883a 	mov	r2,zero
    b7f0:	f800283a 	ret
    b7f4:	1992b03a 	or	r9,r3,r6
    b7f8:	48000226 	beq	r9,zero,b804 <__ledf2+0xa8>
    b7fc:	00800084 	movi	r2,2
    b800:	f800283a 	ret
    b804:	103fe326 	beq	r2,zero,b794 <__alt_mem_onchip_memory2_0+0xfbfeb794>
    b808:	39c03fcc 	andi	r7,r7,255
    b80c:	29fff11e 	bne	r5,r7,b7d4 <__alt_mem_onchip_memory2_0+0xfbfeb7d4>
    b810:	40bff016 	blt	r8,r2,b7d4 <__alt_mem_onchip_memory2_0+0xfbfeb7d4>
    b814:	12000316 	blt	r2,r8,b824 <__ledf2+0xc8>
    b818:	1abfee36 	bltu	r3,r10,b7d4 <__alt_mem_onchip_memory2_0+0xfbfeb7d4>
    b81c:	50c00326 	beq	r10,r3,b82c <__ledf2+0xd0>
    b820:	50fff22e 	bgeu	r10,r3,b7ec <__alt_mem_onchip_memory2_0+0xfbfeb7ec>
    b824:	283fe226 	beq	r5,zero,b7b0 <__alt_mem_onchip_memory2_0+0xfbfeb7b0>
    b828:	003feb06 	br	b7d8 <__alt_mem_onchip_memory2_0+0xfbfeb7d8>
    b82c:	313fe936 	bltu	r6,r4,b7d4 <__alt_mem_onchip_memory2_0+0xfbfeb7d4>
    b830:	21bfee2e 	bgeu	r4,r6,b7ec <__alt_mem_onchip_memory2_0+0xfbfeb7ec>
    b834:	283fde26 	beq	r5,zero,b7b0 <__alt_mem_onchip_memory2_0+0xfbfeb7b0>
    b838:	003fe706 	br	b7d8 <__alt_mem_onchip_memory2_0+0xfbfeb7d8>

0000b83c <__muldf3>:
    b83c:	defff204 	addi	sp,sp,-56
    b840:	2804d53a 	srli	r2,r5,20
    b844:	dd800a15 	stw	r22,40(sp)
    b848:	282cd7fa 	srli	r22,r5,31
    b84c:	dc000415 	stw	r16,16(sp)
    b850:	04000434 	movhi	r16,16
    b854:	df000c15 	stw	fp,48(sp)
    b858:	dd000815 	stw	r20,32(sp)
    b85c:	dcc00715 	stw	r19,28(sp)
    b860:	dc800615 	stw	r18,24(sp)
    b864:	dc400515 	stw	r17,20(sp)
    b868:	843fffc4 	addi	r16,r16,-1
    b86c:	dfc00d15 	stw	ra,52(sp)
    b870:	ddc00b15 	stw	r23,44(sp)
    b874:	dd400915 	stw	r21,36(sp)
    b878:	1501ffcc 	andi	r20,r2,2047
    b87c:	2023883a 	mov	r17,r4
    b880:	2025883a 	mov	r18,r4
    b884:	2c20703a 	and	r16,r5,r16
    b888:	b027883a 	mov	r19,r22
    b88c:	b7003fcc 	andi	fp,r22,255
    b890:	a0005926 	beq	r20,zero,b9f8 <__muldf3+0x1bc>
    b894:	0081ffc4 	movi	r2,2047
    b898:	a0803426 	beq	r20,r2,b96c <__muldf3+0x130>
    b89c:	84000434 	orhi	r16,r16,16
    b8a0:	2004d77a 	srli	r2,r4,29
    b8a4:	802090fa 	slli	r16,r16,3
    b8a8:	202490fa 	slli	r18,r4,3
    b8ac:	a53f0044 	addi	r20,r20,-1023
    b8b0:	80a0b03a 	or	r16,r16,r2
    b8b4:	002b883a 	mov	r21,zero
    b8b8:	0015883a 	mov	r10,zero
    b8bc:	3812d53a 	srli	r9,r7,20
    b8c0:	3806d7fa 	srli	r3,r7,31
    b8c4:	02000434 	movhi	r8,16
    b8c8:	423fffc4 	addi	r8,r8,-1
    b8cc:	4941ffcc 	andi	r5,r9,2047
    b8d0:	302f883a 	mov	r23,r6
    b8d4:	3a22703a 	and	r17,r7,r8
    b8d8:	1ac03fcc 	andi	r11,r3,255
    b8dc:	28006226 	beq	r5,zero,ba68 <__muldf3+0x22c>
    b8e0:	0081ffc4 	movi	r2,2047
    b8e4:	28805a26 	beq	r5,r2,ba50 <__muldf3+0x214>
    b8e8:	8a000434 	orhi	r8,r17,16
    b8ec:	3004d77a 	srli	r2,r6,29
    b8f0:	401090fa 	slli	r8,r8,3
    b8f4:	302e90fa 	slli	r23,r6,3
    b8f8:	297f0044 	addi	r5,r5,-1023
    b8fc:	40a2b03a 	or	r17,r8,r2
    b900:	0013883a 	mov	r9,zero
    b904:	4d4cb03a 	or	r6,r9,r21
    b908:	300c90ba 	slli	r6,r6,2
    b90c:	02000074 	movhi	r8,1
    b910:	422e4b04 	addi	r8,r8,-18132
    b914:	320d883a 	add	r6,r6,r8
    b918:	31800017 	ldw	r6,0(r6)
    b91c:	a14b883a 	add	r5,r20,r5
    b920:	1dacf03a 	xor	r22,r3,r22
    b924:	2b000044 	addi	r12,r5,1
    b928:	3000683a 	jmp	r6
    b92c:	0000bb68 	cmpgeui	zero,zero,749
    b930:	0000bb54 	movui	zero,749
    b934:	0000bb54 	movui	zero,749
    b938:	0000bb40 	call	bb4 <___vfprintf_internal_r+0x238>
    b93c:	0000b988 	cmpgei	zero,zero,742
    b940:	0000b988 	cmpgei	zero,zero,742
    b944:	0000bb28 	cmpgeui	zero,zero,748
    b948:	0000bb40 	call	bb4 <___vfprintf_internal_r+0x238>
    b94c:	0000b988 	cmpgei	zero,zero,742
    b950:	0000bb28 	cmpgeui	zero,zero,748
    b954:	0000b988 	cmpgei	zero,zero,742
    b958:	0000bb40 	call	bb4 <___vfprintf_internal_r+0x238>
    b95c:	0000b98c 	andi	zero,zero,742
    b960:	0000b98c 	andi	zero,zero,742
    b964:	0000b98c 	andi	zero,zero,742
    b968:	0000bd64 	muli	zero,zero,757
    b96c:	8104b03a 	or	r2,r16,r4
    b970:	10006a1e 	bne	r2,zero,bb1c <__muldf3+0x2e0>
    b974:	05400204 	movi	r21,8
    b978:	0021883a 	mov	r16,zero
    b97c:	0025883a 	mov	r18,zero
    b980:	02800084 	movi	r10,2
    b984:	003fcd06 	br	b8bc <__alt_mem_onchip_memory2_0+0xfbfeb8bc>
    b988:	b039883a 	mov	fp,r22
    b98c:	00800084 	movi	r2,2
    b990:	50804e1e 	bne	r10,r2,bacc <__muldf3+0x290>
    b994:	e4c0004c 	andi	r19,fp,1
    b998:	0101ffc4 	movi	r4,2047
    b99c:	0021883a 	mov	r16,zero
    b9a0:	0025883a 	mov	r18,zero
    b9a4:	2008953a 	slli	r4,r4,20
    b9a8:	98c03fcc 	andi	r3,r19,255
    b9ac:	01400434 	movhi	r5,16
    b9b0:	297fffc4 	addi	r5,r5,-1
    b9b4:	180697fa 	slli	r3,r3,31
    b9b8:	8160703a 	and	r16,r16,r5
    b9bc:	8120b03a 	or	r16,r16,r4
    b9c0:	80c6b03a 	or	r3,r16,r3
    b9c4:	9005883a 	mov	r2,r18
    b9c8:	dfc00d17 	ldw	ra,52(sp)
    b9cc:	df000c17 	ldw	fp,48(sp)
    b9d0:	ddc00b17 	ldw	r23,44(sp)
    b9d4:	dd800a17 	ldw	r22,40(sp)
    b9d8:	dd400917 	ldw	r21,36(sp)
    b9dc:	dd000817 	ldw	r20,32(sp)
    b9e0:	dcc00717 	ldw	r19,28(sp)
    b9e4:	dc800617 	ldw	r18,24(sp)
    b9e8:	dc400517 	ldw	r17,20(sp)
    b9ec:	dc000417 	ldw	r16,16(sp)
    b9f0:	dec00e04 	addi	sp,sp,56
    b9f4:	f800283a 	ret
    b9f8:	8104b03a 	or	r2,r16,r4
    b9fc:	10004226 	beq	r2,zero,bb08 <__muldf3+0x2cc>
    ba00:	8000f926 	beq	r16,zero,bde8 <__muldf3+0x5ac>
    ba04:	8009883a 	mov	r4,r16
    ba08:	d9800315 	stw	r6,12(sp)
    ba0c:	d9c00015 	stw	r7,0(sp)
    ba10:	000ca2c0 	call	ca2c <__clzsi2>
    ba14:	d9800317 	ldw	r6,12(sp)
    ba18:	d9c00017 	ldw	r7,0(sp)
    ba1c:	1007883a 	mov	r3,r2
    ba20:	01000a04 	movi	r4,40
    ba24:	18bffe04 	addi	r2,r3,-8
    ba28:	20c9c83a 	sub	r4,r4,r3
    ba2c:	80a0983a 	sll	r16,r16,r2
    ba30:	8908d83a 	srl	r4,r17,r4
    ba34:	88a4983a 	sll	r18,r17,r2
    ba38:	2420b03a 	or	r16,r4,r16
    ba3c:	017f0344 	movi	r5,-1011
    ba40:	28e9c83a 	sub	r20,r5,r3
    ba44:	002b883a 	mov	r21,zero
    ba48:	0015883a 	mov	r10,zero
    ba4c:	003f9b06 	br	b8bc <__alt_mem_onchip_memory2_0+0xfbfeb8bc>
    ba50:	8984b03a 	or	r2,r17,r6
    ba54:	10002a1e 	bne	r2,zero,bb00 <__muldf3+0x2c4>
    ba58:	0023883a 	mov	r17,zero
    ba5c:	002f883a 	mov	r23,zero
    ba60:	02400084 	movi	r9,2
    ba64:	003fa706 	br	b904 <__alt_mem_onchip_memory2_0+0xfbfeb904>
    ba68:	8984b03a 	or	r2,r17,r6
    ba6c:	10002026 	beq	r2,zero,baf0 <__muldf3+0x2b4>
    ba70:	8800cc26 	beq	r17,zero,bda4 <__muldf3+0x568>
    ba74:	8809883a 	mov	r4,r17
    ba78:	d8c00215 	stw	r3,8(sp)
    ba7c:	d9800315 	stw	r6,12(sp)
    ba80:	da800015 	stw	r10,0(sp)
    ba84:	dac00115 	stw	r11,4(sp)
    ba88:	000ca2c0 	call	ca2c <__clzsi2>
    ba8c:	d8c00217 	ldw	r3,8(sp)
    ba90:	d9800317 	ldw	r6,12(sp)
    ba94:	da800017 	ldw	r10,0(sp)
    ba98:	dac00117 	ldw	r11,4(sp)
    ba9c:	1009883a 	mov	r4,r2
    baa0:	01400a04 	movi	r5,40
    baa4:	25fffe04 	addi	r23,r4,-8
    baa8:	290bc83a 	sub	r5,r5,r4
    baac:	8dd0983a 	sll	r8,r17,r23
    bab0:	314ad83a 	srl	r5,r6,r5
    bab4:	35ee983a 	sll	r23,r6,r23
    bab8:	2a22b03a 	or	r17,r5,r8
    babc:	017f0344 	movi	r5,-1011
    bac0:	290bc83a 	sub	r5,r5,r4
    bac4:	0013883a 	mov	r9,zero
    bac8:	003f8e06 	br	b904 <__alt_mem_onchip_memory2_0+0xfbfeb904>
    bacc:	008000c4 	movi	r2,3
    bad0:	50811d26 	beq	r10,r2,bf48 <__muldf3+0x70c>
    bad4:	00800044 	movi	r2,1
    bad8:	5080e01e 	bne	r10,r2,be5c <__muldf3+0x620>
    badc:	e0a6703a 	and	r19,fp,r2
    bae0:	0009883a 	mov	r4,zero
    bae4:	0021883a 	mov	r16,zero
    bae8:	0025883a 	mov	r18,zero
    baec:	003fad06 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    baf0:	0023883a 	mov	r17,zero
    baf4:	002f883a 	mov	r23,zero
    baf8:	02400044 	movi	r9,1
    bafc:	003f8106 	br	b904 <__alt_mem_onchip_memory2_0+0xfbfeb904>
    bb00:	024000c4 	movi	r9,3
    bb04:	003f7f06 	br	b904 <__alt_mem_onchip_memory2_0+0xfbfeb904>
    bb08:	05400104 	movi	r21,4
    bb0c:	0021883a 	mov	r16,zero
    bb10:	0025883a 	mov	r18,zero
    bb14:	02800044 	movi	r10,1
    bb18:	003f6806 	br	b8bc <__alt_mem_onchip_memory2_0+0xfbfeb8bc>
    bb1c:	05400304 	movi	r21,12
    bb20:	028000c4 	movi	r10,3
    bb24:	003f6506 	br	b8bc <__alt_mem_onchip_memory2_0+0xfbfeb8bc>
    bb28:	04000434 	movhi	r16,16
    bb2c:	0027883a 	mov	r19,zero
    bb30:	843fffc4 	addi	r16,r16,-1
    bb34:	04bfffc4 	movi	r18,-1
    bb38:	0101ffc4 	movi	r4,2047
    bb3c:	003f9906 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    bb40:	8821883a 	mov	r16,r17
    bb44:	b825883a 	mov	r18,r23
    bb48:	5839883a 	mov	fp,r11
    bb4c:	4815883a 	mov	r10,r9
    bb50:	003f8e06 	br	b98c <__alt_mem_onchip_memory2_0+0xfbfeb98c>
    bb54:	8821883a 	mov	r16,r17
    bb58:	b825883a 	mov	r18,r23
    bb5c:	b039883a 	mov	fp,r22
    bb60:	4815883a 	mov	r10,r9
    bb64:	003f8906 	br	b98c <__alt_mem_onchip_memory2_0+0xfbfeb98c>
    bb68:	b80cd43a 	srli	r6,r23,16
    bb6c:	9006d43a 	srli	r3,r18,16
    bb70:	90bfffcc 	andi	r2,r18,65535
    bb74:	bdffffcc 	andi	r23,r23,65535
    bb78:	b891383a 	mul	r8,r23,r2
    bb7c:	b8c9383a 	mul	r4,r23,r3
    bb80:	309b383a 	mul	r13,r6,r2
    bb84:	400ed43a 	srli	r7,r8,16
    bb88:	30df383a 	mul	r15,r6,r3
    bb8c:	235b883a 	add	r13,r4,r13
    bb90:	69db883a 	add	r13,r13,r7
    bb94:	6900022e 	bgeu	r13,r4,bba0 <__muldf3+0x364>
    bb98:	01000074 	movhi	r4,1
    bb9c:	791f883a 	add	r15,r15,r4
    bba0:	8828d43a 	srli	r20,r17,16
    bba4:	8c7fffcc 	andi	r17,r17,65535
    bba8:	888f383a 	mul	r7,r17,r2
    bbac:	88d3383a 	mul	r9,r17,r3
    bbb0:	a0a5383a 	mul	r18,r20,r2
    bbb4:	3816d43a 	srli	r11,r7,16
    bbb8:	6814943a 	slli	r10,r13,16
    bbbc:	4ca5883a 	add	r18,r9,r18
    bbc0:	423fffcc 	andi	r8,r8,65535
    bbc4:	92e5883a 	add	r18,r18,r11
    bbc8:	6808d43a 	srli	r4,r13,16
    bbcc:	5215883a 	add	r10,r10,r8
    bbd0:	a0c7383a 	mul	r3,r20,r3
    bbd4:	9240022e 	bgeu	r18,r9,bbe0 <__muldf3+0x3a4>
    bbd8:	00800074 	movhi	r2,1
    bbdc:	1887883a 	add	r3,r3,r2
    bbe0:	802ad43a 	srli	r21,r16,16
    bbe4:	80bfffcc 	andi	r2,r16,65535
    bbe8:	b893383a 	mul	r9,r23,r2
    bbec:	3091383a 	mul	r8,r6,r2
    bbf0:	bd6f383a 	mul	r23,r23,r21
    bbf4:	9026943a 	slli	r19,r18,16
    bbf8:	481ad43a 	srli	r13,r9,16
    bbfc:	9024d43a 	srli	r18,r18,16
    bc00:	39ffffcc 	andi	r7,r7,65535
    bc04:	ba11883a 	add	r8,r23,r8
    bc08:	99e7883a 	add	r19,r19,r7
    bc0c:	4351883a 	add	r8,r8,r13
    bc10:	1c97883a 	add	r11,r3,r18
    bc14:	354d383a 	mul	r6,r6,r21
    bc18:	9925883a 	add	r18,r19,r4
    bc1c:	45c0022e 	bgeu	r8,r23,bc28 <__muldf3+0x3ec>
    bc20:	00c00074 	movhi	r3,1
    bc24:	30cd883a 	add	r6,r6,r3
    bc28:	8889383a 	mul	r4,r17,r2
    bc2c:	8d63383a 	mul	r17,r17,r21
    bc30:	a085383a 	mul	r2,r20,r2
    bc34:	200ed43a 	srli	r7,r4,16
    bc38:	401cd43a 	srli	r14,r8,16
    bc3c:	401a943a 	slli	r13,r8,16
    bc40:	8885883a 	add	r2,r17,r2
    bc44:	4a3fffcc 	andi	r8,r9,65535
    bc48:	11c5883a 	add	r2,r2,r7
    bc4c:	339d883a 	add	r14,r6,r14
    bc50:	6a11883a 	add	r8,r13,r8
    bc54:	a561383a 	mul	r16,r20,r21
    bc58:	1440022e 	bgeu	r2,r17,bc64 <__muldf3+0x428>
    bc5c:	00c00074 	movhi	r3,1
    bc60:	80e1883a 	add	r16,r16,r3
    bc64:	1006943a 	slli	r3,r2,16
    bc68:	213fffcc 	andi	r4,r4,65535
    bc6c:	93db883a 	add	r13,r18,r15
    bc70:	1909883a 	add	r4,r3,r4
    bc74:	22c7883a 	add	r3,r4,r11
    bc78:	6cd3803a 	cmpltu	r9,r13,r19
    bc7c:	6a09883a 	add	r4,r13,r8
    bc80:	1a5b883a 	add	r13,r3,r9
    bc84:	2211803a 	cmpltu	r8,r4,r8
    bc88:	734d883a 	add	r6,r14,r13
    bc8c:	100ed43a 	srli	r7,r2,16
    bc90:	6a53803a 	cmpltu	r9,r13,r9
    bc94:	3205883a 	add	r2,r6,r8
    bc98:	1ac7803a 	cmpltu	r3,r3,r11
    bc9c:	1211803a 	cmpltu	r8,r2,r8
    bca0:	48c6b03a 	or	r3,r9,r3
    bca4:	338d803a 	cmpltu	r6,r6,r14
    bca8:	19c7883a 	add	r3,r3,r7
    bcac:	418cb03a 	or	r6,r8,r6
    bcb0:	1987883a 	add	r3,r3,r6
    bcb4:	2024927a 	slli	r18,r4,9
    bcb8:	1c07883a 	add	r3,r3,r16
    bcbc:	1806927a 	slli	r3,r3,9
    bcc0:	1020d5fa 	srli	r16,r2,23
    bcc4:	2008d5fa 	srli	r4,r4,23
    bcc8:	9294b03a 	or	r10,r18,r10
    bccc:	1004927a 	slli	r2,r2,9
    bcd0:	5024c03a 	cmpne	r18,r10,zero
    bcd4:	1c20b03a 	or	r16,r3,r16
    bcd8:	9108b03a 	or	r4,r18,r4
    bcdc:	80c0402c 	andhi	r3,r16,256
    bce0:	20a4b03a 	or	r18,r4,r2
    bce4:	18000726 	beq	r3,zero,bd04 <__muldf3+0x4c8>
    bce8:	9006d07a 	srli	r3,r18,1
    bcec:	800897fa 	slli	r4,r16,31
    bcf0:	9080004c 	andi	r2,r18,1
    bcf4:	8020d07a 	srli	r16,r16,1
    bcf8:	10c4b03a 	or	r2,r2,r3
    bcfc:	1124b03a 	or	r18,r2,r4
    bd00:	600b883a 	mov	r5,r12
    bd04:	2900ffc4 	addi	r4,r5,1023
    bd08:	01004b0e 	bge	zero,r4,be38 <__muldf3+0x5fc>
    bd0c:	908001cc 	andi	r2,r18,7
    bd10:	10000726 	beq	r2,zero,bd30 <__muldf3+0x4f4>
    bd14:	90c003cc 	andi	r3,r18,15
    bd18:	00800104 	movi	r2,4
    bd1c:	18800426 	beq	r3,r2,bd30 <__muldf3+0x4f4>
    bd20:	9087883a 	add	r3,r18,r2
    bd24:	1c85803a 	cmpltu	r2,r3,r18
    bd28:	80a1883a 	add	r16,r16,r2
    bd2c:	1825883a 	mov	r18,r3
    bd30:	8080402c 	andhi	r2,r16,256
    bd34:	10000426 	beq	r2,zero,bd48 <__muldf3+0x50c>
    bd38:	00bfc034 	movhi	r2,65280
    bd3c:	10bfffc4 	addi	r2,r2,-1
    bd40:	29010004 	addi	r4,r5,1024
    bd44:	80a0703a 	and	r16,r16,r2
    bd48:	0081ff84 	movi	r2,2046
    bd4c:	1100320e 	bge	r2,r4,be18 <__muldf3+0x5dc>
    bd50:	b4c0004c 	andi	r19,r22,1
    bd54:	0101ffc4 	movi	r4,2047
    bd58:	0021883a 	mov	r16,zero
    bd5c:	0025883a 	mov	r18,zero
    bd60:	003f1006 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    bd64:	8080022c 	andhi	r2,r16,8
    bd68:	10000926 	beq	r2,zero,bd90 <__muldf3+0x554>
    bd6c:	8880022c 	andhi	r2,r17,8
    bd70:	1000071e 	bne	r2,zero,bd90 <__muldf3+0x554>
    bd74:	00800434 	movhi	r2,16
    bd78:	8c000234 	orhi	r16,r17,8
    bd7c:	10bfffc4 	addi	r2,r2,-1
    bd80:	1827883a 	mov	r19,r3
    bd84:	80a0703a 	and	r16,r16,r2
    bd88:	b825883a 	mov	r18,r23
    bd8c:	003f6a06 	br	bb38 <__alt_mem_onchip_memory2_0+0xfbfebb38>
    bd90:	00800434 	movhi	r2,16
    bd94:	84000234 	orhi	r16,r16,8
    bd98:	10bfffc4 	addi	r2,r2,-1
    bd9c:	80a0703a 	and	r16,r16,r2
    bda0:	003f6506 	br	bb38 <__alt_mem_onchip_memory2_0+0xfbfebb38>
    bda4:	3009883a 	mov	r4,r6
    bda8:	d8c00215 	stw	r3,8(sp)
    bdac:	d9800315 	stw	r6,12(sp)
    bdb0:	da800015 	stw	r10,0(sp)
    bdb4:	dac00115 	stw	r11,4(sp)
    bdb8:	000ca2c0 	call	ca2c <__clzsi2>
    bdbc:	11000804 	addi	r4,r2,32
    bdc0:	014009c4 	movi	r5,39
    bdc4:	d8c00217 	ldw	r3,8(sp)
    bdc8:	d9800317 	ldw	r6,12(sp)
    bdcc:	da800017 	ldw	r10,0(sp)
    bdd0:	dac00117 	ldw	r11,4(sp)
    bdd4:	293f320e 	bge	r5,r4,baa0 <__alt_mem_onchip_memory2_0+0xfbfebaa0>
    bdd8:	10bffe04 	addi	r2,r2,-8
    bddc:	b8a2983a 	sll	r17,r23,r2
    bde0:	002f883a 	mov	r23,zero
    bde4:	003f3506 	br	babc <__alt_mem_onchip_memory2_0+0xfbfebabc>
    bde8:	d9800315 	stw	r6,12(sp)
    bdec:	d9c00015 	stw	r7,0(sp)
    bdf0:	000ca2c0 	call	ca2c <__clzsi2>
    bdf4:	10c00804 	addi	r3,r2,32
    bdf8:	010009c4 	movi	r4,39
    bdfc:	d9800317 	ldw	r6,12(sp)
    be00:	d9c00017 	ldw	r7,0(sp)
    be04:	20ff060e 	bge	r4,r3,ba20 <__alt_mem_onchip_memory2_0+0xfbfeba20>
    be08:	10bffe04 	addi	r2,r2,-8
    be0c:	88a0983a 	sll	r16,r17,r2
    be10:	0025883a 	mov	r18,zero
    be14:	003f0906 	br	ba3c <__alt_mem_onchip_memory2_0+0xfbfeba3c>
    be18:	9004d0fa 	srli	r2,r18,3
    be1c:	8024977a 	slli	r18,r16,29
    be20:	8020927a 	slli	r16,r16,9
    be24:	2101ffcc 	andi	r4,r4,2047
    be28:	90a4b03a 	or	r18,r18,r2
    be2c:	8020d33a 	srli	r16,r16,12
    be30:	b4c0004c 	andi	r19,r22,1
    be34:	003edb06 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    be38:	00ff0084 	movi	r3,-1022
    be3c:	1947c83a 	sub	r3,r3,r5
    be40:	00800e04 	movi	r2,56
    be44:	10c0080e 	bge	r2,r3,be68 <__muldf3+0x62c>
    be48:	b4c0004c 	andi	r19,r22,1
    be4c:	0009883a 	mov	r4,zero
    be50:	0021883a 	mov	r16,zero
    be54:	0025883a 	mov	r18,zero
    be58:	003ed206 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    be5c:	600b883a 	mov	r5,r12
    be60:	e02d883a 	mov	r22,fp
    be64:	003fa706 	br	bd04 <__alt_mem_onchip_memory2_0+0xfbfebd04>
    be68:	008007c4 	movi	r2,31
    be6c:	10c01816 	blt	r2,r3,bed0 <__muldf3+0x694>
    be70:	29410784 	addi	r5,r5,1054
    be74:	8144983a 	sll	r2,r16,r5
    be78:	90c8d83a 	srl	r4,r18,r3
    be7c:	914a983a 	sll	r5,r18,r5
    be80:	80c6d83a 	srl	r3,r16,r3
    be84:	2088b03a 	or	r4,r4,r2
    be88:	2804c03a 	cmpne	r2,r5,zero
    be8c:	2084b03a 	or	r2,r4,r2
    be90:	110001cc 	andi	r4,r2,7
    be94:	20000726 	beq	r4,zero,beb4 <__muldf3+0x678>
    be98:	114003cc 	andi	r5,r2,15
    be9c:	01000104 	movi	r4,4
    bea0:	29000426 	beq	r5,r4,beb4 <__muldf3+0x678>
    bea4:	11000104 	addi	r4,r2,4
    bea8:	2085803a 	cmpltu	r2,r4,r2
    beac:	1887883a 	add	r3,r3,r2
    beb0:	2005883a 	mov	r2,r4
    beb4:	1900202c 	andhi	r4,r3,128
    beb8:	20001826 	beq	r4,zero,bf1c <__muldf3+0x6e0>
    bebc:	b4c0004c 	andi	r19,r22,1
    bec0:	01000044 	movi	r4,1
    bec4:	0021883a 	mov	r16,zero
    bec8:	0025883a 	mov	r18,zero
    becc:	003eb506 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    bed0:	00bef884 	movi	r2,-1054
    bed4:	1145c83a 	sub	r2,r2,r5
    bed8:	8088d83a 	srl	r4,r16,r2
    bedc:	00800804 	movi	r2,32
    bee0:	18801726 	beq	r3,r2,bf40 <__muldf3+0x704>
    bee4:	28810f84 	addi	r2,r5,1086
    bee8:	8084983a 	sll	r2,r16,r2
    beec:	1484b03a 	or	r2,r2,r18
    bef0:	1004c03a 	cmpne	r2,r2,zero
    bef4:	1104b03a 	or	r2,r2,r4
    bef8:	10c001cc 	andi	r3,r2,7
    befc:	18000b1e 	bne	r3,zero,bf2c <__muldf3+0x6f0>
    bf00:	0021883a 	mov	r16,zero
    bf04:	1004d0fa 	srli	r2,r2,3
    bf08:	b4c0004c 	andi	r19,r22,1
    bf0c:	0009883a 	mov	r4,zero
    bf10:	10e4b03a 	or	r18,r2,r3
    bf14:	003ea306 	br	b9a4 <__alt_mem_onchip_memory2_0+0xfbfeb9a4>
    bf18:	0007883a 	mov	r3,zero
    bf1c:	1820927a 	slli	r16,r3,9
    bf20:	1806977a 	slli	r3,r3,29
    bf24:	8020d33a 	srli	r16,r16,12
    bf28:	003ff606 	br	bf04 <__alt_mem_onchip_memory2_0+0xfbfebf04>
    bf2c:	110003cc 	andi	r4,r2,15
    bf30:	00c00104 	movi	r3,4
    bf34:	20fff826 	beq	r4,r3,bf18 <__alt_mem_onchip_memory2_0+0xfbfebf18>
    bf38:	0007883a 	mov	r3,zero
    bf3c:	003fd906 	br	bea4 <__alt_mem_onchip_memory2_0+0xfbfebea4>
    bf40:	0005883a 	mov	r2,zero
    bf44:	003fe906 	br	beec <__alt_mem_onchip_memory2_0+0xfbfebeec>
    bf48:	00800434 	movhi	r2,16
    bf4c:	84000234 	orhi	r16,r16,8
    bf50:	10bfffc4 	addi	r2,r2,-1
    bf54:	e4c0004c 	andi	r19,fp,1
    bf58:	80a0703a 	and	r16,r16,r2
    bf5c:	003ef606 	br	bb38 <__alt_mem_onchip_memory2_0+0xfbfebb38>

0000bf60 <__subdf3>:
    bf60:	00c00434 	movhi	r3,16
    bf64:	18ffffc4 	addi	r3,r3,-1
    bf68:	defffb04 	addi	sp,sp,-20
    bf6c:	28d2703a 	and	r9,r5,r3
    bf70:	3814d53a 	srli	r10,r7,20
    bf74:	38c6703a 	and	r3,r7,r3
    bf78:	3004d77a 	srli	r2,r6,29
    bf7c:	dc800215 	stw	r18,8(sp)
    bf80:	dc000015 	stw	r16,0(sp)
    bf84:	2824d7fa 	srli	r18,r5,31
    bf88:	2820d53a 	srli	r16,r5,20
    bf8c:	481290fa 	slli	r9,r9,3
    bf90:	200ad77a 	srli	r5,r4,29
    bf94:	180690fa 	slli	r3,r3,3
    bf98:	dc400115 	stw	r17,4(sp)
    bf9c:	dfc00415 	stw	ra,16(sp)
    bfa0:	202290fa 	slli	r17,r4,3
    bfa4:	dcc00315 	stw	r19,12(sp)
    bfa8:	5281ffcc 	andi	r10,r10,2047
    bfac:	0101ffc4 	movi	r4,2047
    bfb0:	9011883a 	mov	r8,r18
    bfb4:	8401ffcc 	andi	r16,r16,2047
    bfb8:	94803fcc 	andi	r18,r18,255
    bfbc:	494ab03a 	or	r5,r9,r5
    bfc0:	380ed7fa 	srli	r7,r7,31
    bfc4:	1886b03a 	or	r3,r3,r2
    bfc8:	300c90fa 	slli	r6,r6,3
    bfcc:	51009026 	beq	r10,r4,c210 <__subdf3+0x2b0>
    bfd0:	39c0005c 	xori	r7,r7,1
    bfd4:	8285c83a 	sub	r2,r16,r10
    bfd8:	91c06f26 	beq	r18,r7,c198 <__subdf3+0x238>
    bfdc:	0080b10e 	bge	zero,r2,c2a4 <__subdf3+0x344>
    bfe0:	50002a1e 	bne	r10,zero,c08c <__subdf3+0x12c>
    bfe4:	1988b03a 	or	r4,r3,r6
    bfe8:	2000941e 	bne	r4,zero,c23c <__subdf3+0x2dc>
    bfec:	888001cc 	andi	r2,r17,7
    bff0:	10005b26 	beq	r2,zero,c160 <__subdf3+0x200>
    bff4:	88c003cc 	andi	r3,r17,15
    bff8:	00800104 	movi	r2,4
    bffc:	18805826 	beq	r3,r2,c160 <__subdf3+0x200>
    c000:	88c00104 	addi	r3,r17,4
    c004:	1c63803a 	cmpltu	r17,r3,r17
    c008:	2c4b883a 	add	r5,r5,r17
    c00c:	2880202c 	andhi	r2,r5,128
    c010:	9200004c 	andi	r8,r18,1
    c014:	1823883a 	mov	r17,r3
    c018:	10005426 	beq	r2,zero,c16c <__subdf3+0x20c>
    c01c:	84000044 	addi	r16,r16,1
    c020:	0081ffc4 	movi	r2,2047
    c024:	8080bf26 	beq	r16,r2,c324 <__subdf3+0x3c4>
    c028:	013fe034 	movhi	r4,65408
    c02c:	213fffc4 	addi	r4,r4,-1
    c030:	290a703a 	and	r5,r5,r4
    c034:	2804977a 	slli	r2,r5,29
    c038:	280a927a 	slli	r5,r5,9
    c03c:	8822d0fa 	srli	r17,r17,3
    c040:	8401ffcc 	andi	r16,r16,2047
    c044:	2808d33a 	srli	r4,r5,12
    c048:	1444b03a 	or	r2,r2,r17
    c04c:	8401ffcc 	andi	r16,r16,2047
    c050:	800a953a 	slli	r5,r16,20
    c054:	40c03fcc 	andi	r3,r8,255
    c058:	04000434 	movhi	r16,16
    c05c:	180697fa 	slli	r3,r3,31
    c060:	843fffc4 	addi	r16,r16,-1
    c064:	2420703a 	and	r16,r4,r16
    c068:	8160b03a 	or	r16,r16,r5
    c06c:	80c6b03a 	or	r3,r16,r3
    c070:	dfc00417 	ldw	ra,16(sp)
    c074:	dcc00317 	ldw	r19,12(sp)
    c078:	dc800217 	ldw	r18,8(sp)
    c07c:	dc400117 	ldw	r17,4(sp)
    c080:	dc000017 	ldw	r16,0(sp)
    c084:	dec00504 	addi	sp,sp,20
    c088:	f800283a 	ret
    c08c:	0101ffc4 	movi	r4,2047
    c090:	813fd626 	beq	r16,r4,bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c094:	18c02034 	orhi	r3,r3,128
    c098:	01000e04 	movi	r4,56
    c09c:	2080a416 	blt	r4,r2,c330 <__subdf3+0x3d0>
    c0a0:	010007c4 	movi	r4,31
    c0a4:	2080c716 	blt	r4,r2,c3c4 <__subdf3+0x464>
    c0a8:	01000804 	movi	r4,32
    c0ac:	2089c83a 	sub	r4,r4,r2
    c0b0:	1910983a 	sll	r8,r3,r4
    c0b4:	308ed83a 	srl	r7,r6,r2
    c0b8:	3108983a 	sll	r4,r6,r4
    c0bc:	1884d83a 	srl	r2,r3,r2
    c0c0:	41ccb03a 	or	r6,r8,r7
    c0c4:	2008c03a 	cmpne	r4,r4,zero
    c0c8:	310cb03a 	or	r6,r6,r4
    c0cc:	898dc83a 	sub	r6,r17,r6
    c0d0:	89a3803a 	cmpltu	r17,r17,r6
    c0d4:	288bc83a 	sub	r5,r5,r2
    c0d8:	2c4bc83a 	sub	r5,r5,r17
    c0dc:	3023883a 	mov	r17,r6
    c0e0:	2880202c 	andhi	r2,r5,128
    c0e4:	10006b26 	beq	r2,zero,c294 <__subdf3+0x334>
    c0e8:	04c02034 	movhi	r19,128
    c0ec:	9cffffc4 	addi	r19,r19,-1
    c0f0:	2ce6703a 	and	r19,r5,r19
    c0f4:	98007c26 	beq	r19,zero,c2e8 <__subdf3+0x388>
    c0f8:	9809883a 	mov	r4,r19
    c0fc:	000ca2c0 	call	ca2c <__clzsi2>
    c100:	10fffe04 	addi	r3,r2,-8
    c104:	010007c4 	movi	r4,31
    c108:	20c07d16 	blt	r4,r3,c300 <__subdf3+0x3a0>
    c10c:	01400a04 	movi	r5,40
    c110:	2885c83a 	sub	r2,r5,r2
    c114:	888ad83a 	srl	r5,r17,r2
    c118:	98e6983a 	sll	r19,r19,r3
    c11c:	88e2983a 	sll	r17,r17,r3
    c120:	2ce6b03a 	or	r19,r5,r19
    c124:	1c007a16 	blt	r3,r16,c310 <__subdf3+0x3b0>
    c128:	1c21c83a 	sub	r16,r3,r16
    c12c:	81400044 	addi	r5,r16,1
    c130:	00c007c4 	movi	r3,31
    c134:	19409616 	blt	r3,r5,c390 <__subdf3+0x430>
    c138:	1c21c83a 	sub	r16,r3,r16
    c13c:	8c08983a 	sll	r4,r17,r16
    c140:	8946d83a 	srl	r3,r17,r5
    c144:	9c20983a 	sll	r16,r19,r16
    c148:	2008c03a 	cmpne	r4,r4,zero
    c14c:	994ad83a 	srl	r5,r19,r5
    c150:	1c06b03a 	or	r3,r3,r16
    c154:	1922b03a 	or	r17,r3,r4
    c158:	0021883a 	mov	r16,zero
    c15c:	003fa306 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c160:	2880202c 	andhi	r2,r5,128
    c164:	9200004c 	andi	r8,r18,1
    c168:	103fac1e 	bne	r2,zero,c01c <__alt_mem_onchip_memory2_0+0xfbfec01c>
    c16c:	2804977a 	slli	r2,r5,29
    c170:	8822d0fa 	srli	r17,r17,3
    c174:	00c1ffc4 	movi	r3,2047
    c178:	280ad0fa 	srli	r5,r5,3
    c17c:	1444b03a 	or	r2,r2,r17
    c180:	80c02726 	beq	r16,r3,c220 <__subdf3+0x2c0>
    c184:	01000434 	movhi	r4,16
    c188:	213fffc4 	addi	r4,r4,-1
    c18c:	80e0703a 	and	r16,r16,r3
    c190:	2908703a 	and	r4,r5,r4
    c194:	003fad06 	br	c04c <__alt_mem_onchip_memory2_0+0xfbfec04c>
    c198:	0080690e 	bge	zero,r2,c340 <__subdf3+0x3e0>
    c19c:	50002f26 	beq	r10,zero,c25c <__subdf3+0x2fc>
    c1a0:	0101ffc4 	movi	r4,2047
    c1a4:	813f9126 	beq	r16,r4,bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c1a8:	18c02034 	orhi	r3,r3,128
    c1ac:	01000e04 	movi	r4,56
    c1b0:	2080b00e 	bge	r4,r2,c474 <__subdf3+0x514>
    c1b4:	198cb03a 	or	r6,r3,r6
    c1b8:	300ec03a 	cmpne	r7,r6,zero
    c1bc:	0005883a 	mov	r2,zero
    c1c0:	3c4f883a 	add	r7,r7,r17
    c1c4:	3c63803a 	cmpltu	r17,r7,r17
    c1c8:	114b883a 	add	r5,r2,r5
    c1cc:	2c4b883a 	add	r5,r5,r17
    c1d0:	3823883a 	mov	r17,r7
    c1d4:	2880202c 	andhi	r2,r5,128
    c1d8:	10002e26 	beq	r2,zero,c294 <__subdf3+0x334>
    c1dc:	84000044 	addi	r16,r16,1
    c1e0:	0081ffc4 	movi	r2,2047
    c1e4:	8080de26 	beq	r16,r2,c560 <__subdf3+0x600>
    c1e8:	00bfe034 	movhi	r2,65408
    c1ec:	10bfffc4 	addi	r2,r2,-1
    c1f0:	288a703a 	and	r5,r5,r2
    c1f4:	880cd07a 	srli	r6,r17,1
    c1f8:	280897fa 	slli	r4,r5,31
    c1fc:	88c0004c 	andi	r3,r17,1
    c200:	30e2b03a 	or	r17,r6,r3
    c204:	280ad07a 	srli	r5,r5,1
    c208:	8922b03a 	or	r17,r17,r4
    c20c:	003f7706 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c210:	1984b03a 	or	r2,r3,r6
    c214:	103f6e26 	beq	r2,zero,bfd0 <__alt_mem_onchip_memory2_0+0xfbfebfd0>
    c218:	39c03fcc 	andi	r7,r7,255
    c21c:	003f6d06 	br	bfd4 <__alt_mem_onchip_memory2_0+0xfbfebfd4>
    c220:	1146b03a 	or	r3,r2,r5
    c224:	18003f26 	beq	r3,zero,c324 <__subdf3+0x3c4>
    c228:	00c00434 	movhi	r3,16
    c22c:	29000234 	orhi	r4,r5,8
    c230:	18ffffc4 	addi	r3,r3,-1
    c234:	20c8703a 	and	r4,r4,r3
    c238:	003f8406 	br	c04c <__alt_mem_onchip_memory2_0+0xfbfec04c>
    c23c:	10bfffc4 	addi	r2,r2,-1
    c240:	1000501e 	bne	r2,zero,c384 <__subdf3+0x424>
    c244:	898fc83a 	sub	r7,r17,r6
    c248:	89e3803a 	cmpltu	r17,r17,r7
    c24c:	28cbc83a 	sub	r5,r5,r3
    c250:	2c4bc83a 	sub	r5,r5,r17
    c254:	3823883a 	mov	r17,r7
    c258:	003fa106 	br	c0e0 <__alt_mem_onchip_memory2_0+0xfbfec0e0>
    c25c:	1988b03a 	or	r4,r3,r6
    c260:	203f6226 	beq	r4,zero,bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c264:	10bfffc4 	addi	r2,r2,-1
    c268:	10009b1e 	bne	r2,zero,c4d8 <__subdf3+0x578>
    c26c:	344d883a 	add	r6,r6,r17
    c270:	3463803a 	cmpltu	r17,r6,r17
    c274:	194b883a 	add	r5,r3,r5
    c278:	2c4b883a 	add	r5,r5,r17
    c27c:	3023883a 	mov	r17,r6
    c280:	003fd406 	br	c1d4 <__alt_mem_onchip_memory2_0+0xfbfec1d4>
    c284:	1106b03a 	or	r3,r2,r4
    c288:	1800b426 	beq	r3,zero,c55c <__subdf3+0x5fc>
    c28c:	100b883a 	mov	r5,r2
    c290:	2023883a 	mov	r17,r4
    c294:	888001cc 	andi	r2,r17,7
    c298:	103f561e 	bne	r2,zero,bff4 <__alt_mem_onchip_memory2_0+0xfbfebff4>
    c29c:	9200004c 	andi	r8,r18,1
    c2a0:	003fb206 	br	c16c <__alt_mem_onchip_memory2_0+0xfbfec16c>
    c2a4:	1000531e 	bne	r2,zero,c3f4 <__subdf3+0x494>
    c2a8:	80800044 	addi	r2,r16,1
    c2ac:	1081ffcc 	andi	r2,r2,2047
    c2b0:	01000044 	movi	r4,1
    c2b4:	2080a00e 	bge	r4,r2,c538 <__subdf3+0x5d8>
    c2b8:	8985c83a 	sub	r2,r17,r6
    c2bc:	8889803a 	cmpltu	r4,r17,r2
    c2c0:	28e7c83a 	sub	r19,r5,r3
    c2c4:	9927c83a 	sub	r19,r19,r4
    c2c8:	9900202c 	andhi	r4,r19,128
    c2cc:	20006226 	beq	r4,zero,c458 <__subdf3+0x4f8>
    c2d0:	3463c83a 	sub	r17,r6,r17
    c2d4:	194bc83a 	sub	r5,r3,r5
    c2d8:	344d803a 	cmpltu	r6,r6,r17
    c2dc:	29a7c83a 	sub	r19,r5,r6
    c2e0:	3825883a 	mov	r18,r7
    c2e4:	983f841e 	bne	r19,zero,c0f8 <__alt_mem_onchip_memory2_0+0xfbfec0f8>
    c2e8:	8809883a 	mov	r4,r17
    c2ec:	000ca2c0 	call	ca2c <__clzsi2>
    c2f0:	10800804 	addi	r2,r2,32
    c2f4:	10fffe04 	addi	r3,r2,-8
    c2f8:	010007c4 	movi	r4,31
    c2fc:	20ff830e 	bge	r4,r3,c10c <__alt_mem_onchip_memory2_0+0xfbfec10c>
    c300:	14fff604 	addi	r19,r2,-40
    c304:	8ce6983a 	sll	r19,r17,r19
    c308:	0023883a 	mov	r17,zero
    c30c:	1c3f860e 	bge	r3,r16,c128 <__alt_mem_onchip_memory2_0+0xfbfec128>
    c310:	017fe034 	movhi	r5,65408
    c314:	297fffc4 	addi	r5,r5,-1
    c318:	80e1c83a 	sub	r16,r16,r3
    c31c:	994a703a 	and	r5,r19,r5
    c320:	003f3206 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c324:	0009883a 	mov	r4,zero
    c328:	0005883a 	mov	r2,zero
    c32c:	003f4706 	br	c04c <__alt_mem_onchip_memory2_0+0xfbfec04c>
    c330:	198cb03a 	or	r6,r3,r6
    c334:	300cc03a 	cmpne	r6,r6,zero
    c338:	0005883a 	mov	r2,zero
    c33c:	003f6306 	br	c0cc <__alt_mem_onchip_memory2_0+0xfbfec0cc>
    c340:	10009d1e 	bne	r2,zero,c5b8 <__subdf3+0x658>
    c344:	81c00044 	addi	r7,r16,1
    c348:	3881ffcc 	andi	r2,r7,2047
    c34c:	02400044 	movi	r9,1
    c350:	4880680e 	bge	r9,r2,c4f4 <__subdf3+0x594>
    c354:	0081ffc4 	movi	r2,2047
    c358:	3880ae26 	beq	r7,r2,c614 <__subdf3+0x6b4>
    c35c:	344d883a 	add	r6,r6,r17
    c360:	3463803a 	cmpltu	r17,r6,r17
    c364:	194b883a 	add	r5,r3,r5
    c368:	2c4b883a 	add	r5,r5,r17
    c36c:	282297fa 	slli	r17,r5,31
    c370:	300cd07a 	srli	r6,r6,1
    c374:	280ad07a 	srli	r5,r5,1
    c378:	3821883a 	mov	r16,r7
    c37c:	89a2b03a 	or	r17,r17,r6
    c380:	003f1a06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c384:	0101ffc4 	movi	r4,2047
    c388:	813f431e 	bne	r16,r4,c098 <__alt_mem_onchip_memory2_0+0xfbfec098>
    c38c:	003f1706 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c390:	80bff844 	addi	r2,r16,-31
    c394:	00c00804 	movi	r3,32
    c398:	9884d83a 	srl	r2,r19,r2
    c39c:	28c05126 	beq	r5,r3,c4e4 <__subdf3+0x584>
    c3a0:	00c00fc4 	movi	r3,63
    c3a4:	1c21c83a 	sub	r16,r3,r16
    c3a8:	9c26983a 	sll	r19,r19,r16
    c3ac:	9c62b03a 	or	r17,r19,r17
    c3b0:	8822c03a 	cmpne	r17,r17,zero
    c3b4:	88a2b03a 	or	r17,r17,r2
    c3b8:	000b883a 	mov	r5,zero
    c3bc:	0021883a 	mov	r16,zero
    c3c0:	003fb406 	br	c294 <__alt_mem_onchip_memory2_0+0xfbfec294>
    c3c4:	113ff804 	addi	r4,r2,-32
    c3c8:	01c00804 	movi	r7,32
    c3cc:	1908d83a 	srl	r4,r3,r4
    c3d0:	11c04626 	beq	r2,r7,c4ec <__subdf3+0x58c>
    c3d4:	01c01004 	movi	r7,64
    c3d8:	3885c83a 	sub	r2,r7,r2
    c3dc:	1884983a 	sll	r2,r3,r2
    c3e0:	118cb03a 	or	r6,r2,r6
    c3e4:	300cc03a 	cmpne	r6,r6,zero
    c3e8:	310cb03a 	or	r6,r6,r4
    c3ec:	0005883a 	mov	r2,zero
    c3f0:	003f3606 	br	c0cc <__alt_mem_onchip_memory2_0+0xfbfec0cc>
    c3f4:	80002b26 	beq	r16,zero,c4a4 <__subdf3+0x544>
    c3f8:	0101ffc4 	movi	r4,2047
    c3fc:	51006926 	beq	r10,r4,c5a4 <__subdf3+0x644>
    c400:	0085c83a 	sub	r2,zero,r2
    c404:	29402034 	orhi	r5,r5,128
    c408:	01000e04 	movi	r4,56
    c40c:	20807d16 	blt	r4,r2,c604 <__subdf3+0x6a4>
    c410:	010007c4 	movi	r4,31
    c414:	2080d916 	blt	r4,r2,c77c <__subdf3+0x81c>
    c418:	01000804 	movi	r4,32
    c41c:	2089c83a 	sub	r4,r4,r2
    c420:	2912983a 	sll	r9,r5,r4
    c424:	8890d83a 	srl	r8,r17,r2
    c428:	8908983a 	sll	r4,r17,r4
    c42c:	2884d83a 	srl	r2,r5,r2
    c430:	4a22b03a 	or	r17,r9,r8
    c434:	2008c03a 	cmpne	r4,r4,zero
    c438:	8922b03a 	or	r17,r17,r4
    c43c:	3463c83a 	sub	r17,r6,r17
    c440:	1885c83a 	sub	r2,r3,r2
    c444:	344d803a 	cmpltu	r6,r6,r17
    c448:	118bc83a 	sub	r5,r2,r6
    c44c:	5021883a 	mov	r16,r10
    c450:	3825883a 	mov	r18,r7
    c454:	003f2206 	br	c0e0 <__alt_mem_onchip_memory2_0+0xfbfec0e0>
    c458:	9886b03a 	or	r3,r19,r2
    c45c:	18001c1e 	bne	r3,zero,c4d0 <__subdf3+0x570>
    c460:	0011883a 	mov	r8,zero
    c464:	000b883a 	mov	r5,zero
    c468:	0023883a 	mov	r17,zero
    c46c:	0021883a 	mov	r16,zero
    c470:	003f3e06 	br	c16c <__alt_mem_onchip_memory2_0+0xfbfec16c>
    c474:	010007c4 	movi	r4,31
    c478:	20803c16 	blt	r4,r2,c56c <__subdf3+0x60c>
    c47c:	01000804 	movi	r4,32
    c480:	2089c83a 	sub	r4,r4,r2
    c484:	1912983a 	sll	r9,r3,r4
    c488:	308ed83a 	srl	r7,r6,r2
    c48c:	3108983a 	sll	r4,r6,r4
    c490:	1884d83a 	srl	r2,r3,r2
    c494:	49ceb03a 	or	r7,r9,r7
    c498:	2008c03a 	cmpne	r4,r4,zero
    c49c:	390eb03a 	or	r7,r7,r4
    c4a0:	003f4706 	br	c1c0 <__alt_mem_onchip_memory2_0+0xfbfec1c0>
    c4a4:	2c48b03a 	or	r4,r5,r17
    c4a8:	20003e26 	beq	r4,zero,c5a4 <__subdf3+0x644>
    c4ac:	0084303a 	nor	r2,zero,r2
    c4b0:	10003a1e 	bne	r2,zero,c59c <__subdf3+0x63c>
    c4b4:	3463c83a 	sub	r17,r6,r17
    c4b8:	194bc83a 	sub	r5,r3,r5
    c4bc:	344d803a 	cmpltu	r6,r6,r17
    c4c0:	298bc83a 	sub	r5,r5,r6
    c4c4:	5021883a 	mov	r16,r10
    c4c8:	3825883a 	mov	r18,r7
    c4cc:	003f0406 	br	c0e0 <__alt_mem_onchip_memory2_0+0xfbfec0e0>
    c4d0:	1023883a 	mov	r17,r2
    c4d4:	003f0706 	br	c0f4 <__alt_mem_onchip_memory2_0+0xfbfec0f4>
    c4d8:	0101ffc4 	movi	r4,2047
    c4dc:	813f331e 	bne	r16,r4,c1ac <__alt_mem_onchip_memory2_0+0xfbfec1ac>
    c4e0:	003ec206 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c4e4:	0027883a 	mov	r19,zero
    c4e8:	003fb006 	br	c3ac <__alt_mem_onchip_memory2_0+0xfbfec3ac>
    c4ec:	0005883a 	mov	r2,zero
    c4f0:	003fbb06 	br	c3e0 <__alt_mem_onchip_memory2_0+0xfbfec3e0>
    c4f4:	2c44b03a 	or	r2,r5,r17
    c4f8:	80008b1e 	bne	r16,zero,c728 <__subdf3+0x7c8>
    c4fc:	1000b526 	beq	r2,zero,c7d4 <__subdf3+0x874>
    c500:	1984b03a 	or	r2,r3,r6
    c504:	103eb926 	beq	r2,zero,bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c508:	3449883a 	add	r4,r6,r17
    c50c:	2463803a 	cmpltu	r17,r4,r17
    c510:	194b883a 	add	r5,r3,r5
    c514:	2c4b883a 	add	r5,r5,r17
    c518:	2880202c 	andhi	r2,r5,128
    c51c:	2023883a 	mov	r17,r4
    c520:	103f5c26 	beq	r2,zero,c294 <__alt_mem_onchip_memory2_0+0xfbfec294>
    c524:	00bfe034 	movhi	r2,65408
    c528:	10bfffc4 	addi	r2,r2,-1
    c52c:	4821883a 	mov	r16,r9
    c530:	288a703a 	and	r5,r5,r2
    c534:	003ead06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c538:	2c44b03a 	or	r2,r5,r17
    c53c:	8000291e 	bne	r16,zero,c5e4 <__subdf3+0x684>
    c540:	10004f1e 	bne	r2,zero,c680 <__subdf3+0x720>
    c544:	1984b03a 	or	r2,r3,r6
    c548:	10000426 	beq	r2,zero,c55c <__subdf3+0x5fc>
    c54c:	180b883a 	mov	r5,r3
    c550:	3023883a 	mov	r17,r6
    c554:	3825883a 	mov	r18,r7
    c558:	003ea406 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c55c:	0011883a 	mov	r8,zero
    c560:	000b883a 	mov	r5,zero
    c564:	0023883a 	mov	r17,zero
    c568:	003f0006 	br	c16c <__alt_mem_onchip_memory2_0+0xfbfec16c>
    c56c:	11fff804 	addi	r7,r2,-32
    c570:	19c8d83a 	srl	r4,r3,r7
    c574:	01c00804 	movi	r7,32
    c578:	11c07e26 	beq	r2,r7,c774 <__subdf3+0x814>
    c57c:	01c01004 	movi	r7,64
    c580:	3885c83a 	sub	r2,r7,r2
    c584:	1884983a 	sll	r2,r3,r2
    c588:	118cb03a 	or	r6,r2,r6
    c58c:	300ec03a 	cmpne	r7,r6,zero
    c590:	390eb03a 	or	r7,r7,r4
    c594:	0005883a 	mov	r2,zero
    c598:	003f0906 	br	c1c0 <__alt_mem_onchip_memory2_0+0xfbfec1c0>
    c59c:	0101ffc4 	movi	r4,2047
    c5a0:	513f991e 	bne	r10,r4,c408 <__alt_mem_onchip_memory2_0+0xfbfec408>
    c5a4:	180b883a 	mov	r5,r3
    c5a8:	3023883a 	mov	r17,r6
    c5ac:	5021883a 	mov	r16,r10
    c5b0:	3825883a 	mov	r18,r7
    c5b4:	003e8d06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c5b8:	80001a1e 	bne	r16,zero,c624 <__subdf3+0x6c4>
    c5bc:	2c48b03a 	or	r4,r5,r17
    c5c0:	20005526 	beq	r4,zero,c718 <__subdf3+0x7b8>
    c5c4:	0084303a 	nor	r2,zero,r2
    c5c8:	1000511e 	bne	r2,zero,c710 <__subdf3+0x7b0>
    c5cc:	89a3883a 	add	r17,r17,r6
    c5d0:	194b883a 	add	r5,r3,r5
    c5d4:	898d803a 	cmpltu	r6,r17,r6
    c5d8:	298b883a 	add	r5,r5,r6
    c5dc:	5021883a 	mov	r16,r10
    c5e0:	003efc06 	br	c1d4 <__alt_mem_onchip_memory2_0+0xfbfec1d4>
    c5e4:	1000341e 	bne	r2,zero,c6b8 <__subdf3+0x758>
    c5e8:	1984b03a 	or	r2,r3,r6
    c5ec:	10006f26 	beq	r2,zero,c7ac <__subdf3+0x84c>
    c5f0:	180b883a 	mov	r5,r3
    c5f4:	3023883a 	mov	r17,r6
    c5f8:	3825883a 	mov	r18,r7
    c5fc:	0401ffc4 	movi	r16,2047
    c600:	003e7a06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c604:	2c62b03a 	or	r17,r5,r17
    c608:	8822c03a 	cmpne	r17,r17,zero
    c60c:	0005883a 	mov	r2,zero
    c610:	003f8a06 	br	c43c <__alt_mem_onchip_memory2_0+0xfbfec43c>
    c614:	3821883a 	mov	r16,r7
    c618:	000b883a 	mov	r5,zero
    c61c:	0023883a 	mov	r17,zero
    c620:	003ed206 	br	c16c <__alt_mem_onchip_memory2_0+0xfbfec16c>
    c624:	0101ffc4 	movi	r4,2047
    c628:	51003b26 	beq	r10,r4,c718 <__subdf3+0x7b8>
    c62c:	0085c83a 	sub	r2,zero,r2
    c630:	29402034 	orhi	r5,r5,128
    c634:	01000e04 	movi	r4,56
    c638:	20806216 	blt	r4,r2,c7c4 <__subdf3+0x864>
    c63c:	010007c4 	movi	r4,31
    c640:	20806b16 	blt	r4,r2,c7f0 <__subdf3+0x890>
    c644:	01000804 	movi	r4,32
    c648:	2089c83a 	sub	r4,r4,r2
    c64c:	2912983a 	sll	r9,r5,r4
    c650:	888ed83a 	srl	r7,r17,r2
    c654:	8908983a 	sll	r4,r17,r4
    c658:	2884d83a 	srl	r2,r5,r2
    c65c:	49e2b03a 	or	r17,r9,r7
    c660:	2008c03a 	cmpne	r4,r4,zero
    c664:	8922b03a 	or	r17,r17,r4
    c668:	89a3883a 	add	r17,r17,r6
    c66c:	10c5883a 	add	r2,r2,r3
    c670:	898d803a 	cmpltu	r6,r17,r6
    c674:	118b883a 	add	r5,r2,r6
    c678:	5021883a 	mov	r16,r10
    c67c:	003ed506 	br	c1d4 <__alt_mem_onchip_memory2_0+0xfbfec1d4>
    c680:	1984b03a 	or	r2,r3,r6
    c684:	103e5926 	beq	r2,zero,bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c688:	8989c83a 	sub	r4,r17,r6
    c68c:	8911803a 	cmpltu	r8,r17,r4
    c690:	28c5c83a 	sub	r2,r5,r3
    c694:	1205c83a 	sub	r2,r2,r8
    c698:	1200202c 	andhi	r8,r2,128
    c69c:	403ef926 	beq	r8,zero,c284 <__alt_mem_onchip_memory2_0+0xfbfec284>
    c6a0:	3463c83a 	sub	r17,r6,r17
    c6a4:	194bc83a 	sub	r5,r3,r5
    c6a8:	344d803a 	cmpltu	r6,r6,r17
    c6ac:	298bc83a 	sub	r5,r5,r6
    c6b0:	3825883a 	mov	r18,r7
    c6b4:	003e4d06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c6b8:	1984b03a 	or	r2,r3,r6
    c6bc:	10002b26 	beq	r2,zero,c76c <__subdf3+0x80c>
    c6c0:	2808d0fa 	srli	r4,r5,3
    c6c4:	8822d0fa 	srli	r17,r17,3
    c6c8:	280a977a 	slli	r5,r5,29
    c6cc:	2080022c 	andhi	r2,r4,8
    c6d0:	2c62b03a 	or	r17,r5,r17
    c6d4:	10000826 	beq	r2,zero,c6f8 <__subdf3+0x798>
    c6d8:	1810d0fa 	srli	r8,r3,3
    c6dc:	4080022c 	andhi	r2,r8,8
    c6e0:	1000051e 	bne	r2,zero,c6f8 <__subdf3+0x798>
    c6e4:	300cd0fa 	srli	r6,r6,3
    c6e8:	1804977a 	slli	r2,r3,29
    c6ec:	4009883a 	mov	r4,r8
    c6f0:	3825883a 	mov	r18,r7
    c6f4:	11a2b03a 	or	r17,r2,r6
    c6f8:	880ad77a 	srli	r5,r17,29
    c6fc:	200890fa 	slli	r4,r4,3
    c700:	882290fa 	slli	r17,r17,3
    c704:	0401ffc4 	movi	r16,2047
    c708:	290ab03a 	or	r5,r5,r4
    c70c:	003e3706 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c710:	0101ffc4 	movi	r4,2047
    c714:	513fc71e 	bne	r10,r4,c634 <__alt_mem_onchip_memory2_0+0xfbfec634>
    c718:	180b883a 	mov	r5,r3
    c71c:	3023883a 	mov	r17,r6
    c720:	5021883a 	mov	r16,r10
    c724:	003e3106 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c728:	10002d26 	beq	r2,zero,c7e0 <__subdf3+0x880>
    c72c:	1984b03a 	or	r2,r3,r6
    c730:	10000e26 	beq	r2,zero,c76c <__subdf3+0x80c>
    c734:	2808d0fa 	srli	r4,r5,3
    c738:	8822d0fa 	srli	r17,r17,3
    c73c:	280a977a 	slli	r5,r5,29
    c740:	2080022c 	andhi	r2,r4,8
    c744:	2c62b03a 	or	r17,r5,r17
    c748:	103feb26 	beq	r2,zero,c6f8 <__alt_mem_onchip_memory2_0+0xfbfec6f8>
    c74c:	180ed0fa 	srli	r7,r3,3
    c750:	3880022c 	andhi	r2,r7,8
    c754:	103fe81e 	bne	r2,zero,c6f8 <__alt_mem_onchip_memory2_0+0xfbfec6f8>
    c758:	300cd0fa 	srli	r6,r6,3
    c75c:	1804977a 	slli	r2,r3,29
    c760:	3809883a 	mov	r4,r7
    c764:	11a2b03a 	or	r17,r2,r6
    c768:	003fe306 	br	c6f8 <__alt_mem_onchip_memory2_0+0xfbfec6f8>
    c76c:	0401ffc4 	movi	r16,2047
    c770:	003e1e06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c774:	0005883a 	mov	r2,zero
    c778:	003f8306 	br	c588 <__alt_mem_onchip_memory2_0+0xfbfec588>
    c77c:	113ff804 	addi	r4,r2,-32
    c780:	02000804 	movi	r8,32
    c784:	2908d83a 	srl	r4,r5,r4
    c788:	12002526 	beq	r2,r8,c820 <__subdf3+0x8c0>
    c78c:	02001004 	movi	r8,64
    c790:	4085c83a 	sub	r2,r8,r2
    c794:	288a983a 	sll	r5,r5,r2
    c798:	2c62b03a 	or	r17,r5,r17
    c79c:	8822c03a 	cmpne	r17,r17,zero
    c7a0:	8922b03a 	or	r17,r17,r4
    c7a4:	0005883a 	mov	r2,zero
    c7a8:	003f2406 	br	c43c <__alt_mem_onchip_memory2_0+0xfbfec43c>
    c7ac:	01402034 	movhi	r5,128
    c7b0:	0011883a 	mov	r8,zero
    c7b4:	297fffc4 	addi	r5,r5,-1
    c7b8:	047ffe04 	movi	r17,-8
    c7bc:	0401ffc4 	movi	r16,2047
    c7c0:	003e6a06 	br	c16c <__alt_mem_onchip_memory2_0+0xfbfec16c>
    c7c4:	2c62b03a 	or	r17,r5,r17
    c7c8:	8822c03a 	cmpne	r17,r17,zero
    c7cc:	0005883a 	mov	r2,zero
    c7d0:	003fa506 	br	c668 <__alt_mem_onchip_memory2_0+0xfbfec668>
    c7d4:	180b883a 	mov	r5,r3
    c7d8:	3023883a 	mov	r17,r6
    c7dc:	003e0306 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c7e0:	180b883a 	mov	r5,r3
    c7e4:	3023883a 	mov	r17,r6
    c7e8:	0401ffc4 	movi	r16,2047
    c7ec:	003dff06 	br	bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
    c7f0:	113ff804 	addi	r4,r2,-32
    c7f4:	01c00804 	movi	r7,32
    c7f8:	2908d83a 	srl	r4,r5,r4
    c7fc:	11c00a26 	beq	r2,r7,c828 <__subdf3+0x8c8>
    c800:	01c01004 	movi	r7,64
    c804:	3885c83a 	sub	r2,r7,r2
    c808:	288a983a 	sll	r5,r5,r2
    c80c:	2c62b03a 	or	r17,r5,r17
    c810:	8822c03a 	cmpne	r17,r17,zero
    c814:	8922b03a 	or	r17,r17,r4
    c818:	0005883a 	mov	r2,zero
    c81c:	003f9206 	br	c668 <__alt_mem_onchip_memory2_0+0xfbfec668>
    c820:	000b883a 	mov	r5,zero
    c824:	003fdc06 	br	c798 <__alt_mem_onchip_memory2_0+0xfbfec798>
    c828:	000b883a 	mov	r5,zero
    c82c:	003ff706 	br	c80c <__alt_mem_onchip_memory2_0+0xfbfec80c>

0000c830 <__fixdfsi>:
    c830:	2806d53a 	srli	r3,r5,20
    c834:	00800434 	movhi	r2,16
    c838:	10bfffc4 	addi	r2,r2,-1
    c83c:	18c1ffcc 	andi	r3,r3,2047
    c840:	0180ff84 	movi	r6,1022
    c844:	2884703a 	and	r2,r5,r2
    c848:	280ad7fa 	srli	r5,r5,31
    c84c:	30c0130e 	bge	r6,r3,c89c <__fixdfsi+0x6c>
    c850:	01810744 	movi	r6,1053
    c854:	30c00d16 	blt	r6,r3,c88c <__fixdfsi+0x5c>
    c858:	01810cc4 	movi	r6,1075
    c85c:	30cdc83a 	sub	r6,r6,r3
    c860:	01c007c4 	movi	r7,31
    c864:	10800434 	orhi	r2,r2,16
    c868:	39800e0e 	bge	r7,r6,c8a4 <__fixdfsi+0x74>
    c86c:	010104c4 	movi	r4,1043
    c870:	20c7c83a 	sub	r3,r4,r3
    c874:	10c6d83a 	srl	r3,r2,r3
    c878:	29403fcc 	andi	r5,r5,255
    c87c:	0145c83a 	sub	r2,zero,r5
    c880:	1884f03a 	xor	r2,r3,r2
    c884:	1145883a 	add	r2,r2,r5
    c888:	f800283a 	ret
    c88c:	00a00034 	movhi	r2,32768
    c890:	10bfffc4 	addi	r2,r2,-1
    c894:	2885883a 	add	r2,r5,r2
    c898:	f800283a 	ret
    c89c:	0005883a 	mov	r2,zero
    c8a0:	f800283a 	ret
    c8a4:	18fefb44 	addi	r3,r3,-1043
    c8a8:	2188d83a 	srl	r4,r4,r6
    c8ac:	10c6983a 	sll	r3,r2,r3
    c8b0:	20c6b03a 	or	r3,r4,r3
    c8b4:	003ff006 	br	c878 <__alt_mem_onchip_memory2_0+0xfbfec878>

0000c8b8 <__floatsidf>:
    c8b8:	defffd04 	addi	sp,sp,-12
    c8bc:	dc400115 	stw	r17,4(sp)
    c8c0:	dfc00215 	stw	ra,8(sp)
    c8c4:	dc000015 	stw	r16,0(sp)
    c8c8:	2023883a 	mov	r17,r4
    c8cc:	20001426 	beq	r4,zero,c920 <__floatsidf+0x68>
    c8d0:	2020d7fa 	srli	r16,r4,31
    c8d4:	80000126 	beq	r16,zero,c8dc <__floatsidf+0x24>
    c8d8:	0123c83a 	sub	r17,zero,r4
    c8dc:	8809883a 	mov	r4,r17
    c8e0:	000ca2c0 	call	ca2c <__clzsi2>
    c8e4:	01410784 	movi	r5,1054
    c8e8:	00c00284 	movi	r3,10
    c8ec:	288bc83a 	sub	r5,r5,r2
    c8f0:	18801c16 	blt	r3,r2,c964 <__floatsidf+0xac>
    c8f4:	00c002c4 	movi	r3,11
    c8f8:	1887c83a 	sub	r3,r3,r2
    c8fc:	88c8d83a 	srl	r4,r17,r3
    c900:	00c00434 	movhi	r3,16
    c904:	18ffffc4 	addi	r3,r3,-1
    c908:	10800544 	addi	r2,r2,21
    c90c:	20c8703a 	and	r4,r4,r3
    c910:	8884983a 	sll	r2,r17,r2
    c914:	28c1ffcc 	andi	r3,r5,2047
    c918:	800d883a 	mov	r6,r16
    c91c:	00000406 	br	c930 <__floatsidf+0x78>
    c920:	000d883a 	mov	r6,zero
    c924:	0007883a 	mov	r3,zero
    c928:	0009883a 	mov	r4,zero
    c92c:	0005883a 	mov	r2,zero
    c930:	180a953a 	slli	r5,r3,20
    c934:	31803fcc 	andi	r6,r6,255
    c938:	00c00434 	movhi	r3,16
    c93c:	300c97fa 	slli	r6,r6,31
    c940:	18ffffc4 	addi	r3,r3,-1
    c944:	20c6703a 	and	r3,r4,r3
    c948:	1946b03a 	or	r3,r3,r5
    c94c:	1986b03a 	or	r3,r3,r6
    c950:	dfc00217 	ldw	ra,8(sp)
    c954:	dc400117 	ldw	r17,4(sp)
    c958:	dc000017 	ldw	r16,0(sp)
    c95c:	dec00304 	addi	sp,sp,12
    c960:	f800283a 	ret
    c964:	10fffd44 	addi	r3,r2,-11
    c968:	88c8983a 	sll	r4,r17,r3
    c96c:	00800434 	movhi	r2,16
    c970:	10bfffc4 	addi	r2,r2,-1
    c974:	2088703a 	and	r4,r4,r2
    c978:	28c1ffcc 	andi	r3,r5,2047
    c97c:	800d883a 	mov	r6,r16
    c980:	0005883a 	mov	r2,zero
    c984:	003fea06 	br	c930 <__alt_mem_onchip_memory2_0+0xfbfec930>

0000c988 <__floatunsidf>:
    c988:	defffe04 	addi	sp,sp,-8
    c98c:	dc000015 	stw	r16,0(sp)
    c990:	dfc00115 	stw	ra,4(sp)
    c994:	2021883a 	mov	r16,r4
    c998:	20001026 	beq	r4,zero,c9dc <__floatunsidf+0x54>
    c99c:	000ca2c0 	call	ca2c <__clzsi2>
    c9a0:	01410784 	movi	r5,1054
    c9a4:	100d883a 	mov	r6,r2
    c9a8:	288bc83a 	sub	r5,r5,r2
    c9ac:	00800284 	movi	r2,10
    c9b0:	11801616 	blt	r2,r6,ca0c <__floatunsidf+0x84>
    c9b4:	008002c4 	movi	r2,11
    c9b8:	1185c83a 	sub	r2,r2,r6
    c9bc:	8084d83a 	srl	r2,r16,r2
    c9c0:	00c00434 	movhi	r3,16
    c9c4:	31c00544 	addi	r7,r6,21
    c9c8:	18ffffc4 	addi	r3,r3,-1
    c9cc:	81e0983a 	sll	r16,r16,r7
    c9d0:	10cc703a 	and	r6,r2,r3
    c9d4:	2941ffcc 	andi	r5,r5,2047
    c9d8:	00000206 	br	c9e4 <__floatunsidf+0x5c>
    c9dc:	000b883a 	mov	r5,zero
    c9e0:	000d883a 	mov	r6,zero
    c9e4:	280a953a 	slli	r5,r5,20
    c9e8:	00c00434 	movhi	r3,16
    c9ec:	18ffffc4 	addi	r3,r3,-1
    c9f0:	30c6703a 	and	r3,r6,r3
    c9f4:	8005883a 	mov	r2,r16
    c9f8:	1946b03a 	or	r3,r3,r5
    c9fc:	dfc00117 	ldw	ra,4(sp)
    ca00:	dc000017 	ldw	r16,0(sp)
    ca04:	dec00204 	addi	sp,sp,8
    ca08:	f800283a 	ret
    ca0c:	31bffd44 	addi	r6,r6,-11
    ca10:	818c983a 	sll	r6,r16,r6
    ca14:	00800434 	movhi	r2,16
    ca18:	10bfffc4 	addi	r2,r2,-1
    ca1c:	2941ffcc 	andi	r5,r5,2047
    ca20:	0021883a 	mov	r16,zero
    ca24:	308c703a 	and	r6,r6,r2
    ca28:	003fee06 	br	c9e4 <__alt_mem_onchip_memory2_0+0xfbfec9e4>

0000ca2c <__clzsi2>:
    ca2c:	00bfffd4 	movui	r2,65535
    ca30:	11000b36 	bltu	r2,r4,ca60 <__clzsi2+0x34>
    ca34:	00803fc4 	movi	r2,255
    ca38:	1100122e 	bgeu	r2,r4,ca84 <__clzsi2+0x58>
    ca3c:	00c00204 	movi	r3,8
    ca40:	01400604 	movi	r5,24
    ca44:	20c8d83a 	srl	r4,r4,r3
    ca48:	00800074 	movhi	r2,1
    ca4c:	10801004 	addi	r2,r2,64
    ca50:	1109883a 	add	r4,r2,r4
    ca54:	20800003 	ldbu	r2,0(r4)
    ca58:	2885c83a 	sub	r2,r5,r2
    ca5c:	f800283a 	ret
    ca60:	00804034 	movhi	r2,256
    ca64:	10bfffc4 	addi	r2,r2,-1
    ca68:	11000336 	bltu	r2,r4,ca78 <__clzsi2+0x4c>
    ca6c:	00c00404 	movi	r3,16
    ca70:	180b883a 	mov	r5,r3
    ca74:	003ff306 	br	ca44 <__alt_mem_onchip_memory2_0+0xfbfeca44>
    ca78:	00c00604 	movi	r3,24
    ca7c:	01400204 	movi	r5,8
    ca80:	003ff006 	br	ca44 <__alt_mem_onchip_memory2_0+0xfbfeca44>
    ca84:	0007883a 	mov	r3,zero
    ca88:	01400804 	movi	r5,32
    ca8c:	003fed06 	br	ca44 <__alt_mem_onchip_memory2_0+0xfbfeca44>

0000ca90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ca90:	defffe04 	addi	sp,sp,-8
    ca94:	dfc00115 	stw	ra,4(sp)
    ca98:	df000015 	stw	fp,0(sp)
    ca9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    caa0:	00800074 	movhi	r2,1
    caa4:	10875804 	addi	r2,r2,7520
    caa8:	10800017 	ldw	r2,0(r2)
    caac:	10000526 	beq	r2,zero,cac4 <alt_get_errno+0x34>
    cab0:	00800074 	movhi	r2,1
    cab4:	10875804 	addi	r2,r2,7520
    cab8:	10800017 	ldw	r2,0(r2)
    cabc:	103ee83a 	callr	r2
    cac0:	00000206 	br	cacc <alt_get_errno+0x3c>
    cac4:	00800074 	movhi	r2,1
    cac8:	108e2604 	addi	r2,r2,14488
}
    cacc:	e037883a 	mov	sp,fp
    cad0:	dfc00117 	ldw	ra,4(sp)
    cad4:	df000017 	ldw	fp,0(sp)
    cad8:	dec00204 	addi	sp,sp,8
    cadc:	f800283a 	ret

0000cae0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    cae0:	defffb04 	addi	sp,sp,-20
    cae4:	dfc00415 	stw	ra,16(sp)
    cae8:	df000315 	stw	fp,12(sp)
    caec:	df000304 	addi	fp,sp,12
    caf0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    caf4:	e0bfff17 	ldw	r2,-4(fp)
    caf8:	10000616 	blt	r2,zero,cb14 <close+0x34>
    cafc:	e0bfff17 	ldw	r2,-4(fp)
    cb00:	10c00324 	muli	r3,r2,12
    cb04:	00800074 	movhi	r2,1
    cb08:	1082d104 	addi	r2,r2,2884
    cb0c:	1885883a 	add	r2,r3,r2
    cb10:	00000106 	br	cb18 <close+0x38>
    cb14:	0005883a 	mov	r2,zero
    cb18:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    cb1c:	e0bffd17 	ldw	r2,-12(fp)
    cb20:	10001926 	beq	r2,zero,cb88 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    cb24:	e0bffd17 	ldw	r2,-12(fp)
    cb28:	10800017 	ldw	r2,0(r2)
    cb2c:	10800417 	ldw	r2,16(r2)
    cb30:	10000626 	beq	r2,zero,cb4c <close+0x6c>
    cb34:	e0bffd17 	ldw	r2,-12(fp)
    cb38:	10800017 	ldw	r2,0(r2)
    cb3c:	10800417 	ldw	r2,16(r2)
    cb40:	e13ffd17 	ldw	r4,-12(fp)
    cb44:	103ee83a 	callr	r2
    cb48:	00000106 	br	cb50 <close+0x70>
    cb4c:	0005883a 	mov	r2,zero
    cb50:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    cb54:	e13fff17 	ldw	r4,-4(fp)
    cb58:	000d1dc0 	call	d1dc <alt_release_fd>
    if (rval < 0)
    cb5c:	e0bffe17 	ldw	r2,-8(fp)
    cb60:	1000070e 	bge	r2,zero,cb80 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    cb64:	000ca900 	call	ca90 <alt_get_errno>
    cb68:	1007883a 	mov	r3,r2
    cb6c:	e0bffe17 	ldw	r2,-8(fp)
    cb70:	0085c83a 	sub	r2,zero,r2
    cb74:	18800015 	stw	r2,0(r3)
      return -1;
    cb78:	00bfffc4 	movi	r2,-1
    cb7c:	00000706 	br	cb9c <close+0xbc>
    }
    return 0;
    cb80:	0005883a 	mov	r2,zero
    cb84:	00000506 	br	cb9c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cb88:	000ca900 	call	ca90 <alt_get_errno>
    cb8c:	1007883a 	mov	r3,r2
    cb90:	00801444 	movi	r2,81
    cb94:	18800015 	stw	r2,0(r3)
    return -1;
    cb98:	00bfffc4 	movi	r2,-1
  }
}
    cb9c:	e037883a 	mov	sp,fp
    cba0:	dfc00117 	ldw	ra,4(sp)
    cba4:	df000017 	ldw	fp,0(sp)
    cba8:	dec00204 	addi	sp,sp,8
    cbac:	f800283a 	ret

0000cbb0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    cbb0:	defffc04 	addi	sp,sp,-16
    cbb4:	df000315 	stw	fp,12(sp)
    cbb8:	df000304 	addi	fp,sp,12
    cbbc:	e13ffd15 	stw	r4,-12(fp)
    cbc0:	e17ffe15 	stw	r5,-8(fp)
    cbc4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    cbc8:	e0bfff17 	ldw	r2,-4(fp)
}
    cbcc:	e037883a 	mov	sp,fp
    cbd0:	df000017 	ldw	fp,0(sp)
    cbd4:	dec00104 	addi	sp,sp,4
    cbd8:	f800283a 	ret

0000cbdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    cbdc:	defffe04 	addi	sp,sp,-8
    cbe0:	dfc00115 	stw	ra,4(sp)
    cbe4:	df000015 	stw	fp,0(sp)
    cbe8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cbec:	00800074 	movhi	r2,1
    cbf0:	10875804 	addi	r2,r2,7520
    cbf4:	10800017 	ldw	r2,0(r2)
    cbf8:	10000526 	beq	r2,zero,cc10 <alt_get_errno+0x34>
    cbfc:	00800074 	movhi	r2,1
    cc00:	10875804 	addi	r2,r2,7520
    cc04:	10800017 	ldw	r2,0(r2)
    cc08:	103ee83a 	callr	r2
    cc0c:	00000206 	br	cc18 <alt_get_errno+0x3c>
    cc10:	00800074 	movhi	r2,1
    cc14:	108e2604 	addi	r2,r2,14488
}
    cc18:	e037883a 	mov	sp,fp
    cc1c:	dfc00117 	ldw	ra,4(sp)
    cc20:	df000017 	ldw	fp,0(sp)
    cc24:	dec00204 	addi	sp,sp,8
    cc28:	f800283a 	ret

0000cc2c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    cc2c:	defffb04 	addi	sp,sp,-20
    cc30:	dfc00415 	stw	ra,16(sp)
    cc34:	df000315 	stw	fp,12(sp)
    cc38:	df000304 	addi	fp,sp,12
    cc3c:	e13ffe15 	stw	r4,-8(fp)
    cc40:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cc44:	e0bffe17 	ldw	r2,-8(fp)
    cc48:	10000616 	blt	r2,zero,cc64 <fstat+0x38>
    cc4c:	e0bffe17 	ldw	r2,-8(fp)
    cc50:	10c00324 	muli	r3,r2,12
    cc54:	00800074 	movhi	r2,1
    cc58:	1082d104 	addi	r2,r2,2884
    cc5c:	1885883a 	add	r2,r3,r2
    cc60:	00000106 	br	cc68 <fstat+0x3c>
    cc64:	0005883a 	mov	r2,zero
    cc68:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    cc6c:	e0bffd17 	ldw	r2,-12(fp)
    cc70:	10001026 	beq	r2,zero,ccb4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    cc74:	e0bffd17 	ldw	r2,-12(fp)
    cc78:	10800017 	ldw	r2,0(r2)
    cc7c:	10800817 	ldw	r2,32(r2)
    cc80:	10000726 	beq	r2,zero,cca0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    cc84:	e0bffd17 	ldw	r2,-12(fp)
    cc88:	10800017 	ldw	r2,0(r2)
    cc8c:	10800817 	ldw	r2,32(r2)
    cc90:	e13ffd17 	ldw	r4,-12(fp)
    cc94:	e17fff17 	ldw	r5,-4(fp)
    cc98:	103ee83a 	callr	r2
    cc9c:	00000a06 	br	ccc8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    cca0:	e0bfff17 	ldw	r2,-4(fp)
    cca4:	00c80004 	movi	r3,8192
    cca8:	10c00115 	stw	r3,4(r2)
      return 0;
    ccac:	0005883a 	mov	r2,zero
    ccb0:	00000506 	br	ccc8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    ccb4:	000cbdc0 	call	cbdc <alt_get_errno>
    ccb8:	1007883a 	mov	r3,r2
    ccbc:	00801444 	movi	r2,81
    ccc0:	18800015 	stw	r2,0(r3)
    return -1;
    ccc4:	00bfffc4 	movi	r2,-1
  }
}
    ccc8:	e037883a 	mov	sp,fp
    cccc:	dfc00117 	ldw	ra,4(sp)
    ccd0:	df000017 	ldw	fp,0(sp)
    ccd4:	dec00204 	addi	sp,sp,8
    ccd8:	f800283a 	ret

0000ccdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ccdc:	defffe04 	addi	sp,sp,-8
    cce0:	dfc00115 	stw	ra,4(sp)
    cce4:	df000015 	stw	fp,0(sp)
    cce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ccec:	00800074 	movhi	r2,1
    ccf0:	10875804 	addi	r2,r2,7520
    ccf4:	10800017 	ldw	r2,0(r2)
    ccf8:	10000526 	beq	r2,zero,cd10 <alt_get_errno+0x34>
    ccfc:	00800074 	movhi	r2,1
    cd00:	10875804 	addi	r2,r2,7520
    cd04:	10800017 	ldw	r2,0(r2)
    cd08:	103ee83a 	callr	r2
    cd0c:	00000206 	br	cd18 <alt_get_errno+0x3c>
    cd10:	00800074 	movhi	r2,1
    cd14:	108e2604 	addi	r2,r2,14488
}
    cd18:	e037883a 	mov	sp,fp
    cd1c:	dfc00117 	ldw	ra,4(sp)
    cd20:	df000017 	ldw	fp,0(sp)
    cd24:	dec00204 	addi	sp,sp,8
    cd28:	f800283a 	ret

0000cd2c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    cd2c:	deffed04 	addi	sp,sp,-76
    cd30:	dfc01215 	stw	ra,72(sp)
    cd34:	df001115 	stw	fp,68(sp)
    cd38:	df001104 	addi	fp,sp,68
    cd3c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cd40:	e0bfff17 	ldw	r2,-4(fp)
    cd44:	10000616 	blt	r2,zero,cd60 <isatty+0x34>
    cd48:	e0bfff17 	ldw	r2,-4(fp)
    cd4c:	10c00324 	muli	r3,r2,12
    cd50:	00800074 	movhi	r2,1
    cd54:	1082d104 	addi	r2,r2,2884
    cd58:	1885883a 	add	r2,r3,r2
    cd5c:	00000106 	br	cd64 <isatty+0x38>
    cd60:	0005883a 	mov	r2,zero
    cd64:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    cd68:	e0bfef17 	ldw	r2,-68(fp)
    cd6c:	10000e26 	beq	r2,zero,cda8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    cd70:	e0bfef17 	ldw	r2,-68(fp)
    cd74:	10800017 	ldw	r2,0(r2)
    cd78:	10800817 	ldw	r2,32(r2)
    cd7c:	1000021e 	bne	r2,zero,cd88 <isatty+0x5c>
    {
      return 1;
    cd80:	00800044 	movi	r2,1
    cd84:	00000d06 	br	cdbc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    cd88:	e0bff004 	addi	r2,fp,-64
    cd8c:	e13fff17 	ldw	r4,-4(fp)
    cd90:	100b883a 	mov	r5,r2
    cd94:	000cc2c0 	call	cc2c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    cd98:	e0bff117 	ldw	r2,-60(fp)
    cd9c:	10880020 	cmpeqi	r2,r2,8192
    cda0:	10803fcc 	andi	r2,r2,255
    cda4:	00000506 	br	cdbc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    cda8:	000ccdc0 	call	ccdc <alt_get_errno>
    cdac:	1007883a 	mov	r3,r2
    cdb0:	00801444 	movi	r2,81
    cdb4:	18800015 	stw	r2,0(r3)
    return 0;
    cdb8:	0005883a 	mov	r2,zero
  }
}
    cdbc:	e037883a 	mov	sp,fp
    cdc0:	dfc00117 	ldw	ra,4(sp)
    cdc4:	df000017 	ldw	fp,0(sp)
    cdc8:	dec00204 	addi	sp,sp,8
    cdcc:	f800283a 	ret

0000cdd0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    cdd0:	defffc04 	addi	sp,sp,-16
    cdd4:	df000315 	stw	fp,12(sp)
    cdd8:	df000304 	addi	fp,sp,12
    cddc:	e13ffd15 	stw	r4,-12(fp)
    cde0:	e17ffe15 	stw	r5,-8(fp)
    cde4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    cde8:	e0fffe17 	ldw	r3,-8(fp)
    cdec:	e0bffd17 	ldw	r2,-12(fp)
    cdf0:	18800c26 	beq	r3,r2,ce24 <alt_load_section+0x54>
  {
    while( to != end )
    cdf4:	00000806 	br	ce18 <alt_load_section+0x48>
    {
      *to++ = *from++;
    cdf8:	e0bffe17 	ldw	r2,-8(fp)
    cdfc:	10c00104 	addi	r3,r2,4
    ce00:	e0fffe15 	stw	r3,-8(fp)
    ce04:	e0fffd17 	ldw	r3,-12(fp)
    ce08:	19000104 	addi	r4,r3,4
    ce0c:	e13ffd15 	stw	r4,-12(fp)
    ce10:	18c00017 	ldw	r3,0(r3)
    ce14:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    ce18:	e0fffe17 	ldw	r3,-8(fp)
    ce1c:	e0bfff17 	ldw	r2,-4(fp)
    ce20:	18bff51e 	bne	r3,r2,cdf8 <__alt_mem_onchip_memory2_0+0xfbfecdf8>
    {
      *to++ = *from++;
    }
  }
}
    ce24:	e037883a 	mov	sp,fp
    ce28:	df000017 	ldw	fp,0(sp)
    ce2c:	dec00104 	addi	sp,sp,4
    ce30:	f800283a 	ret

0000ce34 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    ce34:	defffe04 	addi	sp,sp,-8
    ce38:	dfc00115 	stw	ra,4(sp)
    ce3c:	df000015 	stw	fp,0(sp)
    ce40:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    ce44:	01000074 	movhi	r4,1
    ce48:	21075f04 	addi	r4,r4,7548
    ce4c:	01400074 	movhi	r5,1
    ce50:	29409e04 	addi	r5,r5,632
    ce54:	01800074 	movhi	r6,1
    ce58:	31875f04 	addi	r6,r6,7548
    ce5c:	000cdd00 	call	cdd0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    ce60:	01000034 	movhi	r4,0
    ce64:	21000804 	addi	r4,r4,32
    ce68:	01400034 	movhi	r5,0
    ce6c:	29400804 	addi	r5,r5,32
    ce70:	01800034 	movhi	r6,0
    ce74:	31809004 	addi	r6,r6,576
    ce78:	000cdd00 	call	cdd0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    ce7c:	01000074 	movhi	r4,1
    ce80:	213ecc04 	addi	r4,r4,-1232
    ce84:	01400074 	movhi	r5,1
    ce88:	297ecc04 	addi	r5,r5,-1232
    ce8c:	01800074 	movhi	r6,1
    ce90:	31809e04 	addi	r6,r6,632
    ce94:	000cdd00 	call	cdd0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    ce98:	000e7b80 	call	e7b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    ce9c:	000ea380 	call	ea38 <alt_icache_flush_all>
}
    cea0:	e037883a 	mov	sp,fp
    cea4:	dfc00117 	ldw	ra,4(sp)
    cea8:	df000017 	ldw	fp,0(sp)
    ceac:	dec00204 	addi	sp,sp,8
    ceb0:	f800283a 	ret

0000ceb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ceb4:	defffe04 	addi	sp,sp,-8
    ceb8:	dfc00115 	stw	ra,4(sp)
    cebc:	df000015 	stw	fp,0(sp)
    cec0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    cec4:	00800074 	movhi	r2,1
    cec8:	10875804 	addi	r2,r2,7520
    cecc:	10800017 	ldw	r2,0(r2)
    ced0:	10000526 	beq	r2,zero,cee8 <alt_get_errno+0x34>
    ced4:	00800074 	movhi	r2,1
    ced8:	10875804 	addi	r2,r2,7520
    cedc:	10800017 	ldw	r2,0(r2)
    cee0:	103ee83a 	callr	r2
    cee4:	00000206 	br	cef0 <alt_get_errno+0x3c>
    cee8:	00800074 	movhi	r2,1
    ceec:	108e2604 	addi	r2,r2,14488
}
    cef0:	e037883a 	mov	sp,fp
    cef4:	dfc00117 	ldw	ra,4(sp)
    cef8:	df000017 	ldw	fp,0(sp)
    cefc:	dec00204 	addi	sp,sp,8
    cf00:	f800283a 	ret

0000cf04 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    cf04:	defff904 	addi	sp,sp,-28
    cf08:	dfc00615 	stw	ra,24(sp)
    cf0c:	df000515 	stw	fp,20(sp)
    cf10:	df000504 	addi	fp,sp,20
    cf14:	e13ffd15 	stw	r4,-12(fp)
    cf18:	e17ffe15 	stw	r5,-8(fp)
    cf1c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    cf20:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    cf24:	e0bffd17 	ldw	r2,-12(fp)
    cf28:	10000616 	blt	r2,zero,cf44 <lseek+0x40>
    cf2c:	e0bffd17 	ldw	r2,-12(fp)
    cf30:	10c00324 	muli	r3,r2,12
    cf34:	00800074 	movhi	r2,1
    cf38:	1082d104 	addi	r2,r2,2884
    cf3c:	1885883a 	add	r2,r3,r2
    cf40:	00000106 	br	cf48 <lseek+0x44>
    cf44:	0005883a 	mov	r2,zero
    cf48:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    cf4c:	e0bffc17 	ldw	r2,-16(fp)
    cf50:	10001026 	beq	r2,zero,cf94 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    cf54:	e0bffc17 	ldw	r2,-16(fp)
    cf58:	10800017 	ldw	r2,0(r2)
    cf5c:	10800717 	ldw	r2,28(r2)
    cf60:	10000926 	beq	r2,zero,cf88 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    cf64:	e0bffc17 	ldw	r2,-16(fp)
    cf68:	10800017 	ldw	r2,0(r2)
    cf6c:	10800717 	ldw	r2,28(r2)
    cf70:	e13ffc17 	ldw	r4,-16(fp)
    cf74:	e17ffe17 	ldw	r5,-8(fp)
    cf78:	e1bfff17 	ldw	r6,-4(fp)
    cf7c:	103ee83a 	callr	r2
    cf80:	e0bffb15 	stw	r2,-20(fp)
    cf84:	00000506 	br	cf9c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    cf88:	00bfde84 	movi	r2,-134
    cf8c:	e0bffb15 	stw	r2,-20(fp)
    cf90:	00000206 	br	cf9c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    cf94:	00bfebc4 	movi	r2,-81
    cf98:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    cf9c:	e0bffb17 	ldw	r2,-20(fp)
    cfa0:	1000070e 	bge	r2,zero,cfc0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    cfa4:	000ceb40 	call	ceb4 <alt_get_errno>
    cfa8:	1007883a 	mov	r3,r2
    cfac:	e0bffb17 	ldw	r2,-20(fp)
    cfb0:	0085c83a 	sub	r2,zero,r2
    cfb4:	18800015 	stw	r2,0(r3)
    rc = -1;
    cfb8:	00bfffc4 	movi	r2,-1
    cfbc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    cfc0:	e0bffb17 	ldw	r2,-20(fp)
}
    cfc4:	e037883a 	mov	sp,fp
    cfc8:	dfc00117 	ldw	ra,4(sp)
    cfcc:	df000017 	ldw	fp,0(sp)
    cfd0:	dec00204 	addi	sp,sp,8
    cfd4:	f800283a 	ret

0000cfd8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    cfd8:	defffd04 	addi	sp,sp,-12
    cfdc:	dfc00215 	stw	ra,8(sp)
    cfe0:	df000115 	stw	fp,4(sp)
    cfe4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    cfe8:	0009883a 	mov	r4,zero
    cfec:	000d5280 	call	d528 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    cff0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    cff4:	000d55c0 	call	d55c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    cff8:	01000074 	movhi	r4,1
    cffc:	21005304 	addi	r4,r4,332
    d000:	01400074 	movhi	r5,1
    d004:	29405304 	addi	r5,r5,332
    d008:	01800074 	movhi	r6,1
    d00c:	31805304 	addi	r6,r6,332
    d010:	000edf80 	call	edf8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    d014:	000e8f00 	call	e8f0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    d018:	01000074 	movhi	r4,1
    d01c:	213a5304 	addi	r4,r4,-5812
    d020:	000f71c0 	call	f71c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    d024:	d126da17 	ldw	r4,-25752(gp)
    d028:	d0e6db17 	ldw	r3,-25748(gp)
    d02c:	d0a6dc17 	ldw	r2,-25744(gp)
    d030:	180b883a 	mov	r5,r3
    d034:	100d883a 	mov	r6,r2
    d038:	000028c0 	call	28c <main>
    d03c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    d040:	01000044 	movi	r4,1
    d044:	000cae00 	call	cae0 <close>
  exit (result);
    d048:	e13fff17 	ldw	r4,-4(fp)
    d04c:	000f7300 	call	f730 <exit>

0000d050 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    d050:	defffe04 	addi	sp,sp,-8
    d054:	df000115 	stw	fp,4(sp)
    d058:	df000104 	addi	fp,sp,4
    d05c:	e13fff15 	stw	r4,-4(fp)
}
    d060:	e037883a 	mov	sp,fp
    d064:	df000017 	ldw	fp,0(sp)
    d068:	dec00104 	addi	sp,sp,4
    d06c:	f800283a 	ret

0000d070 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    d070:	defffe04 	addi	sp,sp,-8
    d074:	df000115 	stw	fp,4(sp)
    d078:	df000104 	addi	fp,sp,4
    d07c:	e13fff15 	stw	r4,-4(fp)
}
    d080:	e037883a 	mov	sp,fp
    d084:	df000017 	ldw	fp,0(sp)
    d088:	dec00104 	addi	sp,sp,4
    d08c:	f800283a 	ret

0000d090 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d090:	defffe04 	addi	sp,sp,-8
    d094:	dfc00115 	stw	ra,4(sp)
    d098:	df000015 	stw	fp,0(sp)
    d09c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d0a0:	00800074 	movhi	r2,1
    d0a4:	10875804 	addi	r2,r2,7520
    d0a8:	10800017 	ldw	r2,0(r2)
    d0ac:	10000526 	beq	r2,zero,d0c4 <alt_get_errno+0x34>
    d0b0:	00800074 	movhi	r2,1
    d0b4:	10875804 	addi	r2,r2,7520
    d0b8:	10800017 	ldw	r2,0(r2)
    d0bc:	103ee83a 	callr	r2
    d0c0:	00000206 	br	d0cc <alt_get_errno+0x3c>
    d0c4:	00800074 	movhi	r2,1
    d0c8:	108e2604 	addi	r2,r2,14488
}
    d0cc:	e037883a 	mov	sp,fp
    d0d0:	dfc00117 	ldw	ra,4(sp)
    d0d4:	df000017 	ldw	fp,0(sp)
    d0d8:	dec00204 	addi	sp,sp,8
    d0dc:	f800283a 	ret

0000d0e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    d0e0:	defff904 	addi	sp,sp,-28
    d0e4:	dfc00615 	stw	ra,24(sp)
    d0e8:	df000515 	stw	fp,20(sp)
    d0ec:	df000504 	addi	fp,sp,20
    d0f0:	e13ffd15 	stw	r4,-12(fp)
    d0f4:	e17ffe15 	stw	r5,-8(fp)
    d0f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d0fc:	e0bffd17 	ldw	r2,-12(fp)
    d100:	10000616 	blt	r2,zero,d11c <read+0x3c>
    d104:	e0bffd17 	ldw	r2,-12(fp)
    d108:	10c00324 	muli	r3,r2,12
    d10c:	00800074 	movhi	r2,1
    d110:	1082d104 	addi	r2,r2,2884
    d114:	1885883a 	add	r2,r3,r2
    d118:	00000106 	br	d120 <read+0x40>
    d11c:	0005883a 	mov	r2,zero
    d120:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d124:	e0bffb17 	ldw	r2,-20(fp)
    d128:	10002226 	beq	r2,zero,d1b4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d12c:	e0bffb17 	ldw	r2,-20(fp)
    d130:	10800217 	ldw	r2,8(r2)
    d134:	108000cc 	andi	r2,r2,3
    d138:	10800060 	cmpeqi	r2,r2,1
    d13c:	1000181e 	bne	r2,zero,d1a0 <read+0xc0>
        (fd->dev->read))
    d140:	e0bffb17 	ldw	r2,-20(fp)
    d144:	10800017 	ldw	r2,0(r2)
    d148:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    d14c:	10001426 	beq	r2,zero,d1a0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    d150:	e0bffb17 	ldw	r2,-20(fp)
    d154:	10800017 	ldw	r2,0(r2)
    d158:	10800517 	ldw	r2,20(r2)
    d15c:	e0ffff17 	ldw	r3,-4(fp)
    d160:	e13ffb17 	ldw	r4,-20(fp)
    d164:	e17ffe17 	ldw	r5,-8(fp)
    d168:	180d883a 	mov	r6,r3
    d16c:	103ee83a 	callr	r2
    d170:	e0bffc15 	stw	r2,-16(fp)
    d174:	e0bffc17 	ldw	r2,-16(fp)
    d178:	1000070e 	bge	r2,zero,d198 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    d17c:	000d0900 	call	d090 <alt_get_errno>
    d180:	1007883a 	mov	r3,r2
    d184:	e0bffc17 	ldw	r2,-16(fp)
    d188:	0085c83a 	sub	r2,zero,r2
    d18c:	18800015 	stw	r2,0(r3)
          return -1;
    d190:	00bfffc4 	movi	r2,-1
    d194:	00000c06 	br	d1c8 <read+0xe8>
        }
        return rval;
    d198:	e0bffc17 	ldw	r2,-16(fp)
    d19c:	00000a06 	br	d1c8 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    d1a0:	000d0900 	call	d090 <alt_get_errno>
    d1a4:	1007883a 	mov	r3,r2
    d1a8:	00800344 	movi	r2,13
    d1ac:	18800015 	stw	r2,0(r3)
    d1b0:	00000406 	br	d1c4 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    d1b4:	000d0900 	call	d090 <alt_get_errno>
    d1b8:	1007883a 	mov	r3,r2
    d1bc:	00801444 	movi	r2,81
    d1c0:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d1c4:	00bfffc4 	movi	r2,-1
}
    d1c8:	e037883a 	mov	sp,fp
    d1cc:	dfc00117 	ldw	ra,4(sp)
    d1d0:	df000017 	ldw	fp,0(sp)
    d1d4:	dec00204 	addi	sp,sp,8
    d1d8:	f800283a 	ret

0000d1dc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    d1dc:	defffe04 	addi	sp,sp,-8
    d1e0:	df000115 	stw	fp,4(sp)
    d1e4:	df000104 	addi	fp,sp,4
    d1e8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    d1ec:	e0bfff17 	ldw	r2,-4(fp)
    d1f0:	108000d0 	cmplti	r2,r2,3
    d1f4:	10000d1e 	bne	r2,zero,d22c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    d1f8:	00800074 	movhi	r2,1
    d1fc:	1082d104 	addi	r2,r2,2884
    d200:	e0ffff17 	ldw	r3,-4(fp)
    d204:	18c00324 	muli	r3,r3,12
    d208:	18c00204 	addi	r3,r3,8
    d20c:	10c5883a 	add	r2,r2,r3
    d210:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    d214:	00800074 	movhi	r2,1
    d218:	1082d104 	addi	r2,r2,2884
    d21c:	e0ffff17 	ldw	r3,-4(fp)
    d220:	18c00324 	muli	r3,r3,12
    d224:	10c5883a 	add	r2,r2,r3
    d228:	10000015 	stw	zero,0(r2)
  }
}
    d22c:	e037883a 	mov	sp,fp
    d230:	df000017 	ldw	fp,0(sp)
    d234:	dec00104 	addi	sp,sp,4
    d238:	f800283a 	ret

0000d23c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    d23c:	defff904 	addi	sp,sp,-28
    d240:	df000615 	stw	fp,24(sp)
    d244:	df000604 	addi	fp,sp,24
    d248:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d24c:	0005303a 	rdctl	r2,status
    d250:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d254:	e0fffc17 	ldw	r3,-16(fp)
    d258:	00bfff84 	movi	r2,-2
    d25c:	1884703a 	and	r2,r3,r2
    d260:	1001703a 	wrctl	status,r2
  
  return context;
    d264:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    d268:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    d26c:	d0a00c17 	ldw	r2,-32720(gp)
    d270:	10c000c4 	addi	r3,r2,3
    d274:	00bfff04 	movi	r2,-4
    d278:	1884703a 	and	r2,r3,r2
    d27c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    d280:	d0e00c17 	ldw	r3,-32720(gp)
    d284:	e0bfff17 	ldw	r2,-4(fp)
    d288:	1887883a 	add	r3,r3,r2
    d28c:	00804034 	movhi	r2,256
    d290:	10800004 	addi	r2,r2,0
    d294:	10c0062e 	bgeu	r2,r3,d2b0 <sbrk+0x74>
    d298:	e0bffa17 	ldw	r2,-24(fp)
    d29c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d2a0:	e0bffd17 	ldw	r2,-12(fp)
    d2a4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    d2a8:	00bfffc4 	movi	r2,-1
    d2ac:	00000b06 	br	d2dc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    d2b0:	d0a00c17 	ldw	r2,-32720(gp)
    d2b4:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
    d2b8:	d0e00c17 	ldw	r3,-32720(gp)
    d2bc:	e0bfff17 	ldw	r2,-4(fp)
    d2c0:	1885883a 	add	r2,r3,r2
    d2c4:	d0a00c15 	stw	r2,-32720(gp)
    d2c8:	e0bffa17 	ldw	r2,-24(fp)
    d2cc:	e0bffe15 	stw	r2,-8(fp)
    d2d0:	e0bffe17 	ldw	r2,-8(fp)
    d2d4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    d2d8:	e0bffb17 	ldw	r2,-20(fp)
} 
    d2dc:	e037883a 	mov	sp,fp
    d2e0:	df000017 	ldw	fp,0(sp)
    d2e4:	dec00104 	addi	sp,sp,4
    d2e8:	f800283a 	ret

0000d2ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d2ec:	defffe04 	addi	sp,sp,-8
    d2f0:	dfc00115 	stw	ra,4(sp)
    d2f4:	df000015 	stw	fp,0(sp)
    d2f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d2fc:	00800074 	movhi	r2,1
    d300:	10875804 	addi	r2,r2,7520
    d304:	10800017 	ldw	r2,0(r2)
    d308:	10000526 	beq	r2,zero,d320 <alt_get_errno+0x34>
    d30c:	00800074 	movhi	r2,1
    d310:	10875804 	addi	r2,r2,7520
    d314:	10800017 	ldw	r2,0(r2)
    d318:	103ee83a 	callr	r2
    d31c:	00000206 	br	d328 <alt_get_errno+0x3c>
    d320:	00800074 	movhi	r2,1
    d324:	108e2604 	addi	r2,r2,14488
}
    d328:	e037883a 	mov	sp,fp
    d32c:	dfc00117 	ldw	ra,4(sp)
    d330:	df000017 	ldw	fp,0(sp)
    d334:	dec00204 	addi	sp,sp,8
    d338:	f800283a 	ret

0000d33c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    d33c:	defff904 	addi	sp,sp,-28
    d340:	dfc00615 	stw	ra,24(sp)
    d344:	df000515 	stw	fp,20(sp)
    d348:	df000504 	addi	fp,sp,20
    d34c:	e13ffd15 	stw	r4,-12(fp)
    d350:	e17ffe15 	stw	r5,-8(fp)
    d354:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d358:	e0bffd17 	ldw	r2,-12(fp)
    d35c:	10000616 	blt	r2,zero,d378 <write+0x3c>
    d360:	e0bffd17 	ldw	r2,-12(fp)
    d364:	10c00324 	muli	r3,r2,12
    d368:	00800074 	movhi	r2,1
    d36c:	1082d104 	addi	r2,r2,2884
    d370:	1885883a 	add	r2,r3,r2
    d374:	00000106 	br	d37c <write+0x40>
    d378:	0005883a 	mov	r2,zero
    d37c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    d380:	e0bffb17 	ldw	r2,-20(fp)
    d384:	10002126 	beq	r2,zero,d40c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    d388:	e0bffb17 	ldw	r2,-20(fp)
    d38c:	10800217 	ldw	r2,8(r2)
    d390:	108000cc 	andi	r2,r2,3
    d394:	10001826 	beq	r2,zero,d3f8 <write+0xbc>
    d398:	e0bffb17 	ldw	r2,-20(fp)
    d39c:	10800017 	ldw	r2,0(r2)
    d3a0:	10800617 	ldw	r2,24(r2)
    d3a4:	10001426 	beq	r2,zero,d3f8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    d3a8:	e0bffb17 	ldw	r2,-20(fp)
    d3ac:	10800017 	ldw	r2,0(r2)
    d3b0:	10800617 	ldw	r2,24(r2)
    d3b4:	e0ffff17 	ldw	r3,-4(fp)
    d3b8:	e13ffb17 	ldw	r4,-20(fp)
    d3bc:	e17ffe17 	ldw	r5,-8(fp)
    d3c0:	180d883a 	mov	r6,r3
    d3c4:	103ee83a 	callr	r2
    d3c8:	e0bffc15 	stw	r2,-16(fp)
    d3cc:	e0bffc17 	ldw	r2,-16(fp)
    d3d0:	1000070e 	bge	r2,zero,d3f0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    d3d4:	000d2ec0 	call	d2ec <alt_get_errno>
    d3d8:	1007883a 	mov	r3,r2
    d3dc:	e0bffc17 	ldw	r2,-16(fp)
    d3e0:	0085c83a 	sub	r2,zero,r2
    d3e4:	18800015 	stw	r2,0(r3)
        return -1;
    d3e8:	00bfffc4 	movi	r2,-1
    d3ec:	00000c06 	br	d420 <write+0xe4>
      }
      return rval;
    d3f0:	e0bffc17 	ldw	r2,-16(fp)
    d3f4:	00000a06 	br	d420 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    d3f8:	000d2ec0 	call	d2ec <alt_get_errno>
    d3fc:	1007883a 	mov	r3,r2
    d400:	00800344 	movi	r2,13
    d404:	18800015 	stw	r2,0(r3)
    d408:	00000406 	br	d41c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    d40c:	000d2ec0 	call	d2ec <alt_get_errno>
    d410:	1007883a 	mov	r3,r2
    d414:	00801444 	movi	r2,81
    d418:	18800015 	stw	r2,0(r3)
  }
  return -1;
    d41c:	00bfffc4 	movi	r2,-1
}
    d420:	e037883a 	mov	sp,fp
    d424:	dfc00117 	ldw	ra,4(sp)
    d428:	df000017 	ldw	fp,0(sp)
    d42c:	dec00204 	addi	sp,sp,8
    d430:	f800283a 	ret

0000d434 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    d434:	defffd04 	addi	sp,sp,-12
    d438:	dfc00215 	stw	ra,8(sp)
    d43c:	df000115 	stw	fp,4(sp)
    d440:	df000104 	addi	fp,sp,4
    d444:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    d448:	e13fff17 	ldw	r4,-4(fp)
    d44c:	01400074 	movhi	r5,1
    d450:	29475504 	addi	r5,r5,7508
    d454:	000e84c0 	call	e84c <alt_dev_llist_insert>
}
    d458:	e037883a 	mov	sp,fp
    d45c:	dfc00117 	ldw	ra,4(sp)
    d460:	df000017 	ldw	fp,0(sp)
    d464:	dec00204 	addi	sp,sp,8
    d468:	f800283a 	ret

0000d46c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d46c:	defffe04 	addi	sp,sp,-8
    d470:	dfc00115 	stw	ra,4(sp)
    d474:	df000015 	stw	fp,0(sp)
    d478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d47c:	00800074 	movhi	r2,1
    d480:	10875804 	addi	r2,r2,7520
    d484:	10800017 	ldw	r2,0(r2)
    d488:	10000526 	beq	r2,zero,d4a0 <alt_get_errno+0x34>
    d48c:	00800074 	movhi	r2,1
    d490:	10875804 	addi	r2,r2,7520
    d494:	10800017 	ldw	r2,0(r2)
    d498:	103ee83a 	callr	r2
    d49c:	00000206 	br	d4a8 <alt_get_errno+0x3c>
    d4a0:	00800074 	movhi	r2,1
    d4a4:	108e2604 	addi	r2,r2,14488
}
    d4a8:	e037883a 	mov	sp,fp
    d4ac:	dfc00117 	ldw	ra,4(sp)
    d4b0:	df000017 	ldw	fp,0(sp)
    d4b4:	dec00204 	addi	sp,sp,8
    d4b8:	f800283a 	ret

0000d4bc <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
    d4bc:	defffc04 	addi	sp,sp,-16
    d4c0:	dfc00315 	stw	ra,12(sp)
    d4c4:	df000215 	stw	fp,8(sp)
    d4c8:	df000204 	addi	fp,sp,8
    d4cc:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    d4d0:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
    d4d4:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
    d4d8:	e0bffe17 	ldw	r2,-8(fp)
    d4dc:	1000061e 	bne	r2,zero,d4f8 <alt_avalon_mutex_reg+0x3c>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
    d4e0:	e13fff17 	ldw	r4,-4(fp)
    d4e4:	01400074 	movhi	r5,1
    d4e8:	29475a04 	addi	r5,r5,7528
    d4ec:	000e84c0 	call	e84c <alt_dev_llist_insert>
    d4f0:	e0bffe15 	stw	r2,-8(fp)
    d4f4:	00000606 	br	d510 <alt_avalon_mutex_reg+0x54>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
    d4f8:	000d46c0 	call	d46c <alt_get_errno>
    d4fc:	1007883a 	mov	r3,r2
    d500:	00800304 	movi	r2,12
    d504:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
    d508:	00bffd04 	movi	r2,-12
    d50c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
    d510:	e0bffe17 	ldw	r2,-8(fp)
}
    d514:	e037883a 	mov	sp,fp
    d518:	dfc00117 	ldw	ra,4(sp)
    d51c:	df000017 	ldw	fp,0(sp)
    d520:	dec00204 	addi	sp,sp,8
    d524:	f800283a 	ret

0000d528 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    d528:	defffd04 	addi	sp,sp,-12
    d52c:	dfc00215 	stw	ra,8(sp)
    d530:	df000115 	stw	fp,4(sp)
    d534:	df000104 	addi	fp,sp,4
    d538:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1, cpu_1);
    d53c:	000f2800 	call	f280 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    d540:	00800044 	movi	r2,1
    d544:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    d548:	e037883a 	mov	sp,fp
    d54c:	dfc00117 	ldw	ra,4(sp)
    d550:	df000017 	ldw	fp,0(sp)
    d554:	dec00204 	addi	sp,sp,8
    d558:	f800283a 	ret

0000d55c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    d55c:	defffe04 	addi	sp,sp,-8
    d560:	dfc00115 	stw	ra,4(sp)
    d564:	df000015 	stw	fp,0(sp)
    d568:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
    d56c:	01010034 	movhi	r4,1024
    d570:	21140004 	addi	r4,r4,20480
    d574:	000b883a 	mov	r5,zero
    d578:	000d883a 	mov	r6,zero
    d57c:	01c0fa04 	movi	r7,1000
    d580:	000e3700 	call	e370 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    d584:	01000074 	movhi	r4,1
    d588:	21033b04 	addi	r4,r4,3308
    d58c:	000b883a 	mov	r5,zero
    d590:	01800044 	movi	r6,1
    d594:	000d73c0 	call	d73c <altera_avalon_jtag_uart_init>
    d598:	01000074 	movhi	r4,1
    d59c:	21033104 	addi	r4,r4,3268
    d5a0:	000d4340 	call	d434 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX, mutex);
    d5a4:	01000074 	movhi	r4,1
    d5a8:	21074904 	addi	r4,r4,7460
    d5ac:	000d4bc0 	call	d4bc <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER, performance_counter);
    d5b0:	00c00044 	movi	r3,1
    d5b4:	00810034 	movhi	r2,1024
    d5b8:	10840004 	addi	r2,r2,4096
    d5bc:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
    d5c0:	0001883a 	nop
}
    d5c4:	e037883a 	mov	sp,fp
    d5c8:	dfc00117 	ldw	ra,4(sp)
    d5cc:	df000017 	ldw	fp,0(sp)
    d5d0:	dec00204 	addi	sp,sp,8
    d5d4:	f800283a 	ret

0000d5d8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    d5d8:	defffa04 	addi	sp,sp,-24
    d5dc:	dfc00515 	stw	ra,20(sp)
    d5e0:	df000415 	stw	fp,16(sp)
    d5e4:	df000404 	addi	fp,sp,16
    d5e8:	e13ffd15 	stw	r4,-12(fp)
    d5ec:	e17ffe15 	stw	r5,-8(fp)
    d5f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d5f4:	e0bffd17 	ldw	r2,-12(fp)
    d5f8:	10800017 	ldw	r2,0(r2)
    d5fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    d600:	e0bffc17 	ldw	r2,-16(fp)
    d604:	10c00a04 	addi	r3,r2,40
    d608:	e0bffd17 	ldw	r2,-12(fp)
    d60c:	10800217 	ldw	r2,8(r2)
    d610:	1809883a 	mov	r4,r3
    d614:	e17ffe17 	ldw	r5,-8(fp)
    d618:	e1bfff17 	ldw	r6,-4(fp)
    d61c:	100f883a 	mov	r7,r2
    d620:	000dc000 	call	dc00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    d624:	e037883a 	mov	sp,fp
    d628:	dfc00117 	ldw	ra,4(sp)
    d62c:	df000017 	ldw	fp,0(sp)
    d630:	dec00204 	addi	sp,sp,8
    d634:	f800283a 	ret

0000d638 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d638:	defffa04 	addi	sp,sp,-24
    d63c:	dfc00515 	stw	ra,20(sp)
    d640:	df000415 	stw	fp,16(sp)
    d644:	df000404 	addi	fp,sp,16
    d648:	e13ffd15 	stw	r4,-12(fp)
    d64c:	e17ffe15 	stw	r5,-8(fp)
    d650:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d654:	e0bffd17 	ldw	r2,-12(fp)
    d658:	10800017 	ldw	r2,0(r2)
    d65c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    d660:	e0bffc17 	ldw	r2,-16(fp)
    d664:	10c00a04 	addi	r3,r2,40
    d668:	e0bffd17 	ldw	r2,-12(fp)
    d66c:	10800217 	ldw	r2,8(r2)
    d670:	1809883a 	mov	r4,r3
    d674:	e17ffe17 	ldw	r5,-8(fp)
    d678:	e1bfff17 	ldw	r6,-4(fp)
    d67c:	100f883a 	mov	r7,r2
    d680:	000de0c0 	call	de0c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    d684:	e037883a 	mov	sp,fp
    d688:	dfc00117 	ldw	ra,4(sp)
    d68c:	df000017 	ldw	fp,0(sp)
    d690:	dec00204 	addi	sp,sp,8
    d694:	f800283a 	ret

0000d698 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    d698:	defffc04 	addi	sp,sp,-16
    d69c:	dfc00315 	stw	ra,12(sp)
    d6a0:	df000215 	stw	fp,8(sp)
    d6a4:	df000204 	addi	fp,sp,8
    d6a8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    d6ac:	e0bfff17 	ldw	r2,-4(fp)
    d6b0:	10800017 	ldw	r2,0(r2)
    d6b4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    d6b8:	e0bffe17 	ldw	r2,-8(fp)
    d6bc:	10c00a04 	addi	r3,r2,40
    d6c0:	e0bfff17 	ldw	r2,-4(fp)
    d6c4:	10800217 	ldw	r2,8(r2)
    d6c8:	1809883a 	mov	r4,r3
    d6cc:	100b883a 	mov	r5,r2
    d6d0:	000daac0 	call	daac <altera_avalon_jtag_uart_close>
}
    d6d4:	e037883a 	mov	sp,fp
    d6d8:	dfc00117 	ldw	ra,4(sp)
    d6dc:	df000017 	ldw	fp,0(sp)
    d6e0:	dec00204 	addi	sp,sp,8
    d6e4:	f800283a 	ret

0000d6e8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    d6e8:	defffa04 	addi	sp,sp,-24
    d6ec:	dfc00515 	stw	ra,20(sp)
    d6f0:	df000415 	stw	fp,16(sp)
    d6f4:	df000404 	addi	fp,sp,16
    d6f8:	e13ffd15 	stw	r4,-12(fp)
    d6fc:	e17ffe15 	stw	r5,-8(fp)
    d700:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    d704:	e0bffd17 	ldw	r2,-12(fp)
    d708:	10800017 	ldw	r2,0(r2)
    d70c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    d710:	e0bffc17 	ldw	r2,-16(fp)
    d714:	10800a04 	addi	r2,r2,40
    d718:	1009883a 	mov	r4,r2
    d71c:	e17ffe17 	ldw	r5,-8(fp)
    d720:	e1bfff17 	ldw	r6,-4(fp)
    d724:	000db140 	call	db14 <altera_avalon_jtag_uart_ioctl>
}
    d728:	e037883a 	mov	sp,fp
    d72c:	dfc00117 	ldw	ra,4(sp)
    d730:	df000017 	ldw	fp,0(sp)
    d734:	dec00204 	addi	sp,sp,8
    d738:	f800283a 	ret

0000d73c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    d73c:	defffa04 	addi	sp,sp,-24
    d740:	dfc00515 	stw	ra,20(sp)
    d744:	df000415 	stw	fp,16(sp)
    d748:	df000404 	addi	fp,sp,16
    d74c:	e13ffd15 	stw	r4,-12(fp)
    d750:	e17ffe15 	stw	r5,-8(fp)
    d754:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d758:	e0bffd17 	ldw	r2,-12(fp)
    d75c:	00c00044 	movi	r3,1
    d760:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    d764:	e0bffd17 	ldw	r2,-12(fp)
    d768:	10800017 	ldw	r2,0(r2)
    d76c:	10800104 	addi	r2,r2,4
    d770:	1007883a 	mov	r3,r2
    d774:	e0bffd17 	ldw	r2,-12(fp)
    d778:	10800817 	ldw	r2,32(r2)
    d77c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    d780:	e0fffe17 	ldw	r3,-8(fp)
    d784:	e0bfff17 	ldw	r2,-4(fp)
    d788:	d8000015 	stw	zero,0(sp)
    d78c:	1809883a 	mov	r4,r3
    d790:	100b883a 	mov	r5,r2
    d794:	01800074 	movhi	r6,1
    d798:	31b60004 	addi	r6,r6,-10240
    d79c:	e1fffd17 	ldw	r7,-12(fp)
    d7a0:	000ea680 	call	ea68 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    d7a4:	e0bffd17 	ldw	r2,-12(fp)
    d7a8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    d7ac:	e0bffd17 	ldw	r2,-12(fp)
    d7b0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d7b4:	00800074 	movhi	r2,1
    d7b8:	108e2b04 	addi	r2,r2,14508
    d7bc:	10800017 	ldw	r2,0(r2)
    d7c0:	1809883a 	mov	r4,r3
    d7c4:	100b883a 	mov	r5,r2
    d7c8:	01800074 	movhi	r6,1
    d7cc:	31b68104 	addi	r6,r6,-9724
    d7d0:	e1fffd17 	ldw	r7,-12(fp)
    d7d4:	000e6780 	call	e678 <alt_alarm_start>
    d7d8:	1000040e 	bge	r2,zero,d7ec <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    d7dc:	e0fffd17 	ldw	r3,-12(fp)
    d7e0:	00a00034 	movhi	r2,32768
    d7e4:	10bfffc4 	addi	r2,r2,-1
    d7e8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    d7ec:	e037883a 	mov	sp,fp
    d7f0:	dfc00117 	ldw	ra,4(sp)
    d7f4:	df000017 	ldw	fp,0(sp)
    d7f8:	dec00204 	addi	sp,sp,8
    d7fc:	f800283a 	ret

0000d800 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    d800:	defff804 	addi	sp,sp,-32
    d804:	df000715 	stw	fp,28(sp)
    d808:	df000704 	addi	fp,sp,28
    d80c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    d810:	e0bfff17 	ldw	r2,-4(fp)
    d814:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    d818:	e0bffb17 	ldw	r2,-20(fp)
    d81c:	10800017 	ldw	r2,0(r2)
    d820:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d824:	e0bffc17 	ldw	r2,-16(fp)
    d828:	10800104 	addi	r2,r2,4
    d82c:	10800037 	ldwio	r2,0(r2)
    d830:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    d834:	e0bffd17 	ldw	r2,-12(fp)
    d838:	1080c00c 	andi	r2,r2,768
    d83c:	1000011e 	bne	r2,zero,d844 <altera_avalon_jtag_uart_irq+0x44>
      break;
    d840:	00006c06 	br	d9f4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    d844:	e0bffd17 	ldw	r2,-12(fp)
    d848:	1080400c 	andi	r2,r2,256
    d84c:	10003426 	beq	r2,zero,d920 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    d850:	00800074 	movhi	r2,1
    d854:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d858:	e0bffb17 	ldw	r2,-20(fp)
    d85c:	10800a17 	ldw	r2,40(r2)
    d860:	10800044 	addi	r2,r2,1
    d864:	1081ffcc 	andi	r2,r2,2047
    d868:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    d86c:	e0bffb17 	ldw	r2,-20(fp)
    d870:	10c00b17 	ldw	r3,44(r2)
    d874:	e0bffe17 	ldw	r2,-8(fp)
    d878:	1880011e 	bne	r3,r2,d880 <altera_avalon_jtag_uart_irq+0x80>
          break;
    d87c:	00001606 	br	d8d8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    d880:	e0bffc17 	ldw	r2,-16(fp)
    d884:	10800037 	ldwio	r2,0(r2)
    d888:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    d88c:	e0bff917 	ldw	r2,-28(fp)
    d890:	10a0000c 	andi	r2,r2,32768
    d894:	1000011e 	bne	r2,zero,d89c <altera_avalon_jtag_uart_irq+0x9c>
          break;
    d898:	00000f06 	br	d8d8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    d89c:	e0bffb17 	ldw	r2,-20(fp)
    d8a0:	10800a17 	ldw	r2,40(r2)
    d8a4:	e0fff917 	ldw	r3,-28(fp)
    d8a8:	1809883a 	mov	r4,r3
    d8ac:	e0fffb17 	ldw	r3,-20(fp)
    d8b0:	1885883a 	add	r2,r3,r2
    d8b4:	10800e04 	addi	r2,r2,56
    d8b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d8bc:	e0bffb17 	ldw	r2,-20(fp)
    d8c0:	10800a17 	ldw	r2,40(r2)
    d8c4:	10800044 	addi	r2,r2,1
    d8c8:	10c1ffcc 	andi	r3,r2,2047
    d8cc:	e0bffb17 	ldw	r2,-20(fp)
    d8d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    d8d4:	003fe006 	br	d858 <__alt_mem_onchip_memory2_0+0xfbfed858>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    d8d8:	e0bff917 	ldw	r2,-28(fp)
    d8dc:	10bfffec 	andhi	r2,r2,65535
    d8e0:	10000f26 	beq	r2,zero,d920 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    d8e4:	e0bffb17 	ldw	r2,-20(fp)
    d8e8:	10c00817 	ldw	r3,32(r2)
    d8ec:	00bfff84 	movi	r2,-2
    d8f0:	1886703a 	and	r3,r3,r2
    d8f4:	e0bffb17 	ldw	r2,-20(fp)
    d8f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    d8fc:	e0bffc17 	ldw	r2,-16(fp)
    d900:	10800104 	addi	r2,r2,4
    d904:	1007883a 	mov	r3,r2
    d908:	e0bffb17 	ldw	r2,-20(fp)
    d90c:	10800817 	ldw	r2,32(r2)
    d910:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d914:	e0bffc17 	ldw	r2,-16(fp)
    d918:	10800104 	addi	r2,r2,4
    d91c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    d920:	e0bffd17 	ldw	r2,-12(fp)
    d924:	1080800c 	andi	r2,r2,512
    d928:	10003126 	beq	r2,zero,d9f0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    d92c:	e0bffd17 	ldw	r2,-12(fp)
    d930:	1004d43a 	srli	r2,r2,16
    d934:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    d938:	00001406 	br	d98c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    d93c:	e0bffc17 	ldw	r2,-16(fp)
    d940:	e0fffb17 	ldw	r3,-20(fp)
    d944:	18c00d17 	ldw	r3,52(r3)
    d948:	e13ffb17 	ldw	r4,-20(fp)
    d94c:	20c7883a 	add	r3,r4,r3
    d950:	18c20e04 	addi	r3,r3,2104
    d954:	18c00003 	ldbu	r3,0(r3)
    d958:	18c03fcc 	andi	r3,r3,255
    d95c:	18c0201c 	xori	r3,r3,128
    d960:	18ffe004 	addi	r3,r3,-128
    d964:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    d968:	e0bffb17 	ldw	r2,-20(fp)
    d96c:	10800d17 	ldw	r2,52(r2)
    d970:	10800044 	addi	r2,r2,1
    d974:	10c1ffcc 	andi	r3,r2,2047
    d978:	e0bffb17 	ldw	r2,-20(fp)
    d97c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    d980:	e0bffa17 	ldw	r2,-24(fp)
    d984:	10bfffc4 	addi	r2,r2,-1
    d988:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    d98c:	e0bffa17 	ldw	r2,-24(fp)
    d990:	10000526 	beq	r2,zero,d9a8 <altera_avalon_jtag_uart_irq+0x1a8>
    d994:	e0bffb17 	ldw	r2,-20(fp)
    d998:	10c00d17 	ldw	r3,52(r2)
    d99c:	e0bffb17 	ldw	r2,-20(fp)
    d9a0:	10800c17 	ldw	r2,48(r2)
    d9a4:	18bfe51e 	bne	r3,r2,d93c <__alt_mem_onchip_memory2_0+0xfbfed93c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    d9a8:	e0bffa17 	ldw	r2,-24(fp)
    d9ac:	10001026 	beq	r2,zero,d9f0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    d9b0:	e0bffb17 	ldw	r2,-20(fp)
    d9b4:	10c00817 	ldw	r3,32(r2)
    d9b8:	00bfff44 	movi	r2,-3
    d9bc:	1886703a 	and	r3,r3,r2
    d9c0:	e0bffb17 	ldw	r2,-20(fp)
    d9c4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    d9c8:	e0bffb17 	ldw	r2,-20(fp)
    d9cc:	10800017 	ldw	r2,0(r2)
    d9d0:	10800104 	addi	r2,r2,4
    d9d4:	1007883a 	mov	r3,r2
    d9d8:	e0bffb17 	ldw	r2,-20(fp)
    d9dc:	10800817 	ldw	r2,32(r2)
    d9e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    d9e4:	e0bffc17 	ldw	r2,-16(fp)
    d9e8:	10800104 	addi	r2,r2,4
    d9ec:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    d9f0:	003f8c06 	br	d824 <__alt_mem_onchip_memory2_0+0xfbfed824>
}
    d9f4:	e037883a 	mov	sp,fp
    d9f8:	df000017 	ldw	fp,0(sp)
    d9fc:	dec00104 	addi	sp,sp,4
    da00:	f800283a 	ret

0000da04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    da04:	defff804 	addi	sp,sp,-32
    da08:	df000715 	stw	fp,28(sp)
    da0c:	df000704 	addi	fp,sp,28
    da10:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    da14:	e0bffb17 	ldw	r2,-20(fp)
    da18:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    da1c:	e0bff917 	ldw	r2,-28(fp)
    da20:	10800017 	ldw	r2,0(r2)
    da24:	10800104 	addi	r2,r2,4
    da28:	10800037 	ldwio	r2,0(r2)
    da2c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    da30:	e0bffa17 	ldw	r2,-24(fp)
    da34:	1081000c 	andi	r2,r2,1024
    da38:	10000b26 	beq	r2,zero,da68 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    da3c:	e0bff917 	ldw	r2,-28(fp)
    da40:	10800017 	ldw	r2,0(r2)
    da44:	10800104 	addi	r2,r2,4
    da48:	1007883a 	mov	r3,r2
    da4c:	e0bff917 	ldw	r2,-28(fp)
    da50:	10800817 	ldw	r2,32(r2)
    da54:	10810014 	ori	r2,r2,1024
    da58:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    da5c:	e0bff917 	ldw	r2,-28(fp)
    da60:	10000915 	stw	zero,36(r2)
    da64:	00000a06 	br	da90 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    da68:	e0bff917 	ldw	r2,-28(fp)
    da6c:	10c00917 	ldw	r3,36(r2)
    da70:	00a00034 	movhi	r2,32768
    da74:	10bfff04 	addi	r2,r2,-4
    da78:	10c00536 	bltu	r2,r3,da90 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    da7c:	e0bff917 	ldw	r2,-28(fp)
    da80:	10800917 	ldw	r2,36(r2)
    da84:	10c00044 	addi	r3,r2,1
    da88:	e0bff917 	ldw	r2,-28(fp)
    da8c:	10c00915 	stw	r3,36(r2)
    da90:	00800074 	movhi	r2,1
    da94:	108e2b04 	addi	r2,r2,14508
    da98:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    da9c:	e037883a 	mov	sp,fp
    daa0:	df000017 	ldw	fp,0(sp)
    daa4:	dec00104 	addi	sp,sp,4
    daa8:	f800283a 	ret

0000daac <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    daac:	defffd04 	addi	sp,sp,-12
    dab0:	df000215 	stw	fp,8(sp)
    dab4:	df000204 	addi	fp,sp,8
    dab8:	e13ffe15 	stw	r4,-8(fp)
    dabc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dac0:	00000506 	br	dad8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    dac4:	e0bfff17 	ldw	r2,-4(fp)
    dac8:	1090000c 	andi	r2,r2,16384
    dacc:	10000226 	beq	r2,zero,dad8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    dad0:	00bffd44 	movi	r2,-11
    dad4:	00000b06 	br	db04 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    dad8:	e0bffe17 	ldw	r2,-8(fp)
    dadc:	10c00d17 	ldw	r3,52(r2)
    dae0:	e0bffe17 	ldw	r2,-8(fp)
    dae4:	10800c17 	ldw	r2,48(r2)
    dae8:	18800526 	beq	r3,r2,db00 <altera_avalon_jtag_uart_close+0x54>
    daec:	e0bffe17 	ldw	r2,-8(fp)
    daf0:	10c00917 	ldw	r3,36(r2)
    daf4:	e0bffe17 	ldw	r2,-8(fp)
    daf8:	10800117 	ldw	r2,4(r2)
    dafc:	18bff136 	bltu	r3,r2,dac4 <__alt_mem_onchip_memory2_0+0xfbfedac4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    db00:	0005883a 	mov	r2,zero
}
    db04:	e037883a 	mov	sp,fp
    db08:	df000017 	ldw	fp,0(sp)
    db0c:	dec00104 	addi	sp,sp,4
    db10:	f800283a 	ret

0000db14 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    db14:	defffa04 	addi	sp,sp,-24
    db18:	df000515 	stw	fp,20(sp)
    db1c:	df000504 	addi	fp,sp,20
    db20:	e13ffd15 	stw	r4,-12(fp)
    db24:	e17ffe15 	stw	r5,-8(fp)
    db28:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    db2c:	00bff9c4 	movi	r2,-25
    db30:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    db34:	e0bffe17 	ldw	r2,-8(fp)
    db38:	10da8060 	cmpeqi	r3,r2,27137
    db3c:	1800031e 	bne	r3,zero,db4c <altera_avalon_jtag_uart_ioctl+0x38>
    db40:	109a80a0 	cmpeqi	r2,r2,27138
    db44:	1000191e 	bne	r2,zero,dbac <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
    db48:	00002806 	br	dbec <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    db4c:	e0bffd17 	ldw	r2,-12(fp)
    db50:	10c00117 	ldw	r3,4(r2)
    db54:	00a00034 	movhi	r2,32768
    db58:	10bfffc4 	addi	r2,r2,-1
    db5c:	18801226 	beq	r3,r2,dba8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
    db60:	e0bfff17 	ldw	r2,-4(fp)
    db64:	10800017 	ldw	r2,0(r2)
    db68:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    db6c:	e0bffc17 	ldw	r2,-16(fp)
    db70:	10800090 	cmplti	r2,r2,2
    db74:	1000061e 	bne	r2,zero,db90 <altera_avalon_jtag_uart_ioctl+0x7c>
    db78:	e0fffc17 	ldw	r3,-16(fp)
    db7c:	00a00034 	movhi	r2,32768
    db80:	10bfffc4 	addi	r2,r2,-1
    db84:	18800226 	beq	r3,r2,db90 <altera_avalon_jtag_uart_ioctl+0x7c>
    db88:	e0bffc17 	ldw	r2,-16(fp)
    db8c:	00000206 	br	db98 <altera_avalon_jtag_uart_ioctl+0x84>
    db90:	00a00034 	movhi	r2,32768
    db94:	10bfff84 	addi	r2,r2,-2
    db98:	e0fffd17 	ldw	r3,-12(fp)
    db9c:	18800115 	stw	r2,4(r3)
      rc = 0;
    dba0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dba4:	00001106 	br	dbec <altera_avalon_jtag_uart_ioctl+0xd8>
    dba8:	00001006 	br	dbec <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    dbac:	e0bffd17 	ldw	r2,-12(fp)
    dbb0:	10c00117 	ldw	r3,4(r2)
    dbb4:	00a00034 	movhi	r2,32768
    dbb8:	10bfffc4 	addi	r2,r2,-1
    dbbc:	18800a26 	beq	r3,r2,dbe8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    dbc0:	e0bffd17 	ldw	r2,-12(fp)
    dbc4:	10c00917 	ldw	r3,36(r2)
    dbc8:	e0bffd17 	ldw	r2,-12(fp)
    dbcc:	10800117 	ldw	r2,4(r2)
    dbd0:	1885803a 	cmpltu	r2,r3,r2
    dbd4:	10c03fcc 	andi	r3,r2,255
    dbd8:	e0bfff17 	ldw	r2,-4(fp)
    dbdc:	10c00015 	stw	r3,0(r2)
      rc = 0;
    dbe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    dbe4:	00000006 	br	dbe8 <altera_avalon_jtag_uart_ioctl+0xd4>
    dbe8:	0001883a 	nop

  default:
    break;
  }

  return rc;
    dbec:	e0bffb17 	ldw	r2,-20(fp)
}
    dbf0:	e037883a 	mov	sp,fp
    dbf4:	df000017 	ldw	fp,0(sp)
    dbf8:	dec00104 	addi	sp,sp,4
    dbfc:	f800283a 	ret

0000dc00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    dc00:	defff304 	addi	sp,sp,-52
    dc04:	dfc00c15 	stw	ra,48(sp)
    dc08:	df000b15 	stw	fp,44(sp)
    dc0c:	df000b04 	addi	fp,sp,44
    dc10:	e13ffc15 	stw	r4,-16(fp)
    dc14:	e17ffd15 	stw	r5,-12(fp)
    dc18:	e1bffe15 	stw	r6,-8(fp)
    dc1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    dc20:	e0bffd17 	ldw	r2,-12(fp)
    dc24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dc28:	00004906 	br	dd50 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    dc2c:	e0bffc17 	ldw	r2,-16(fp)
    dc30:	10800a17 	ldw	r2,40(r2)
    dc34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    dc38:	e0bffc17 	ldw	r2,-16(fp)
    dc3c:	10800b17 	ldw	r2,44(r2)
    dc40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    dc44:	e0fff717 	ldw	r3,-36(fp)
    dc48:	e0bff817 	ldw	r2,-32(fp)
    dc4c:	18800536 	bltu	r3,r2,dc64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    dc50:	e0fff717 	ldw	r3,-36(fp)
    dc54:	e0bff817 	ldw	r2,-32(fp)
    dc58:	1885c83a 	sub	r2,r3,r2
    dc5c:	e0bff615 	stw	r2,-40(fp)
    dc60:	00000406 	br	dc74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    dc64:	00c20004 	movi	r3,2048
    dc68:	e0bff817 	ldw	r2,-32(fp)
    dc6c:	1885c83a 	sub	r2,r3,r2
    dc70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    dc74:	e0bff617 	ldw	r2,-40(fp)
    dc78:	1000011e 	bne	r2,zero,dc80 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
    dc7c:	00001d06 	br	dcf4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
    dc80:	e0fffe17 	ldw	r3,-8(fp)
    dc84:	e0bff617 	ldw	r2,-40(fp)
    dc88:	1880022e 	bgeu	r3,r2,dc94 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    dc8c:	e0bffe17 	ldw	r2,-8(fp)
    dc90:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    dc94:	e0bff817 	ldw	r2,-32(fp)
    dc98:	10800e04 	addi	r2,r2,56
    dc9c:	e0fffc17 	ldw	r3,-16(fp)
    dca0:	1885883a 	add	r2,r3,r2
    dca4:	e13ff517 	ldw	r4,-44(fp)
    dca8:	100b883a 	mov	r5,r2
    dcac:	e1bff617 	ldw	r6,-40(fp)
    dcb0:	00005440 	call	544 <memcpy>
      ptr   += n;
    dcb4:	e0fff517 	ldw	r3,-44(fp)
    dcb8:	e0bff617 	ldw	r2,-40(fp)
    dcbc:	1885883a 	add	r2,r3,r2
    dcc0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    dcc4:	e0fffe17 	ldw	r3,-8(fp)
    dcc8:	e0bff617 	ldw	r2,-40(fp)
    dccc:	1885c83a 	sub	r2,r3,r2
    dcd0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    dcd4:	e0fff817 	ldw	r3,-32(fp)
    dcd8:	e0bff617 	ldw	r2,-40(fp)
    dcdc:	1885883a 	add	r2,r3,r2
    dce0:	10c1ffcc 	andi	r3,r2,2047
    dce4:	e0bffc17 	ldw	r2,-16(fp)
    dce8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    dcec:	e0bffe17 	ldw	r2,-8(fp)
    dcf0:	00bfce16 	blt	zero,r2,dc2c <__alt_mem_onchip_memory2_0+0xfbfedc2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    dcf4:	e0fff517 	ldw	r3,-44(fp)
    dcf8:	e0bffd17 	ldw	r2,-12(fp)
    dcfc:	18800126 	beq	r3,r2,dd04 <altera_avalon_jtag_uart_read+0x104>
      break;
    dd00:	00001506 	br	dd58 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    dd04:	e0bfff17 	ldw	r2,-4(fp)
    dd08:	1090000c 	andi	r2,r2,16384
    dd0c:	10000126 	beq	r2,zero,dd14 <altera_avalon_jtag_uart_read+0x114>
      break;
    dd10:	00001106 	br	dd58 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    dd14:	0001883a 	nop
    dd18:	e0bffc17 	ldw	r2,-16(fp)
    dd1c:	10c00a17 	ldw	r3,40(r2)
    dd20:	e0bff717 	ldw	r2,-36(fp)
    dd24:	1880051e 	bne	r3,r2,dd3c <altera_avalon_jtag_uart_read+0x13c>
    dd28:	e0bffc17 	ldw	r2,-16(fp)
    dd2c:	10c00917 	ldw	r3,36(r2)
    dd30:	e0bffc17 	ldw	r2,-16(fp)
    dd34:	10800117 	ldw	r2,4(r2)
    dd38:	18bff736 	bltu	r3,r2,dd18 <__alt_mem_onchip_memory2_0+0xfbfedd18>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    dd3c:	e0bffc17 	ldw	r2,-16(fp)
    dd40:	10c00a17 	ldw	r3,40(r2)
    dd44:	e0bff717 	ldw	r2,-36(fp)
    dd48:	1880011e 	bne	r3,r2,dd50 <altera_avalon_jtag_uart_read+0x150>
      break;
    dd4c:	00000206 	br	dd58 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    dd50:	e0bffe17 	ldw	r2,-8(fp)
    dd54:	00bfb516 	blt	zero,r2,dc2c <__alt_mem_onchip_memory2_0+0xfbfedc2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    dd58:	e0fff517 	ldw	r3,-44(fp)
    dd5c:	e0bffd17 	ldw	r2,-12(fp)
    dd60:	18801826 	beq	r3,r2,ddc4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dd64:	0005303a 	rdctl	r2,status
    dd68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dd6c:	e0fffa17 	ldw	r3,-24(fp)
    dd70:	00bfff84 	movi	r2,-2
    dd74:	1884703a 	and	r2,r3,r2
    dd78:	1001703a 	wrctl	status,r2
  
  return context;
    dd7c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    dd80:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    dd84:	e0bffc17 	ldw	r2,-16(fp)
    dd88:	10800817 	ldw	r2,32(r2)
    dd8c:	10c00054 	ori	r3,r2,1
    dd90:	e0bffc17 	ldw	r2,-16(fp)
    dd94:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    dd98:	e0bffc17 	ldw	r2,-16(fp)
    dd9c:	10800017 	ldw	r2,0(r2)
    dda0:	10800104 	addi	r2,r2,4
    dda4:	1007883a 	mov	r3,r2
    dda8:	e0bffc17 	ldw	r2,-16(fp)
    ddac:	10800817 	ldw	r2,32(r2)
    ddb0:	18800035 	stwio	r2,0(r3)
    ddb4:	e0bff917 	ldw	r2,-28(fp)
    ddb8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ddbc:	e0bffb17 	ldw	r2,-20(fp)
    ddc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ddc4:	e0fff517 	ldw	r3,-44(fp)
    ddc8:	e0bffd17 	ldw	r2,-12(fp)
    ddcc:	18800426 	beq	r3,r2,dde0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
    ddd0:	e0fff517 	ldw	r3,-44(fp)
    ddd4:	e0bffd17 	ldw	r2,-12(fp)
    ddd8:	1885c83a 	sub	r2,r3,r2
    dddc:	00000606 	br	ddf8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
    dde0:	e0bfff17 	ldw	r2,-4(fp)
    dde4:	1090000c 	andi	r2,r2,16384
    dde8:	10000226 	beq	r2,zero,ddf4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
    ddec:	00bffd44 	movi	r2,-11
    ddf0:	00000106 	br	ddf8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
    ddf4:	00bffec4 	movi	r2,-5
}
    ddf8:	e037883a 	mov	sp,fp
    ddfc:	dfc00117 	ldw	ra,4(sp)
    de00:	df000017 	ldw	fp,0(sp)
    de04:	dec00204 	addi	sp,sp,8
    de08:	f800283a 	ret

0000de0c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    de0c:	defff304 	addi	sp,sp,-52
    de10:	dfc00c15 	stw	ra,48(sp)
    de14:	df000b15 	stw	fp,44(sp)
    de18:	df000b04 	addi	fp,sp,44
    de1c:	e13ffc15 	stw	r4,-16(fp)
    de20:	e17ffd15 	stw	r5,-12(fp)
    de24:	e1bffe15 	stw	r6,-8(fp)
    de28:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    de2c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    de30:	e0bffd17 	ldw	r2,-12(fp)
    de34:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    de38:	00003806 	br	df1c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    de3c:	e0bffc17 	ldw	r2,-16(fp)
    de40:	10800c17 	ldw	r2,48(r2)
    de44:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
    de48:	e0bffc17 	ldw	r2,-16(fp)
    de4c:	10800d17 	ldw	r2,52(r2)
    de50:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    de54:	e0fff817 	ldw	r3,-32(fp)
    de58:	e0bff517 	ldw	r2,-44(fp)
    de5c:	1880062e 	bgeu	r3,r2,de78 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    de60:	e0fff517 	ldw	r3,-44(fp)
    de64:	e0bff817 	ldw	r2,-32(fp)
    de68:	1885c83a 	sub	r2,r3,r2
    de6c:	10bfffc4 	addi	r2,r2,-1
    de70:	e0bff615 	stw	r2,-40(fp)
    de74:	00000b06 	br	dea4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    de78:	e0bff517 	ldw	r2,-44(fp)
    de7c:	10000526 	beq	r2,zero,de94 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    de80:	00c20004 	movi	r3,2048
    de84:	e0bff817 	ldw	r2,-32(fp)
    de88:	1885c83a 	sub	r2,r3,r2
    de8c:	e0bff615 	stw	r2,-40(fp)
    de90:	00000406 	br	dea4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    de94:	00c1ffc4 	movi	r3,2047
    de98:	e0bff817 	ldw	r2,-32(fp)
    de9c:	1885c83a 	sub	r2,r3,r2
    dea0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    dea4:	e0bff617 	ldw	r2,-40(fp)
    dea8:	1000011e 	bne	r2,zero,deb0 <altera_avalon_jtag_uart_write+0xa4>
        break;
    deac:	00001d06 	br	df24 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
    deb0:	e0fffe17 	ldw	r3,-8(fp)
    deb4:	e0bff617 	ldw	r2,-40(fp)
    deb8:	1880022e 	bgeu	r3,r2,dec4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
    debc:	e0bffe17 	ldw	r2,-8(fp)
    dec0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    dec4:	e0bff817 	ldw	r2,-32(fp)
    dec8:	10820e04 	addi	r2,r2,2104
    decc:	e0fffc17 	ldw	r3,-16(fp)
    ded0:	1885883a 	add	r2,r3,r2
    ded4:	1009883a 	mov	r4,r2
    ded8:	e17ffd17 	ldw	r5,-12(fp)
    dedc:	e1bff617 	ldw	r6,-40(fp)
    dee0:	00005440 	call	544 <memcpy>
      ptr   += n;
    dee4:	e0fffd17 	ldw	r3,-12(fp)
    dee8:	e0bff617 	ldw	r2,-40(fp)
    deec:	1885883a 	add	r2,r3,r2
    def0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    def4:	e0fffe17 	ldw	r3,-8(fp)
    def8:	e0bff617 	ldw	r2,-40(fp)
    defc:	1885c83a 	sub	r2,r3,r2
    df00:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    df04:	e0fff817 	ldw	r3,-32(fp)
    df08:	e0bff617 	ldw	r2,-40(fp)
    df0c:	1885883a 	add	r2,r3,r2
    df10:	10c1ffcc 	andi	r3,r2,2047
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    df1c:	e0bffe17 	ldw	r2,-8(fp)
    df20:	00bfc616 	blt	zero,r2,de3c <__alt_mem_onchip_memory2_0+0xfbfede3c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df24:	0005303a 	rdctl	r2,status
    df28:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df2c:	e0fffa17 	ldw	r3,-24(fp)
    df30:	00bfff84 	movi	r2,-2
    df34:	1884703a 	and	r2,r3,r2
    df38:	1001703a 	wrctl	status,r2
  
  return context;
    df3c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    df40:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    df44:	e0bffc17 	ldw	r2,-16(fp)
    df48:	10800817 	ldw	r2,32(r2)
    df4c:	10c00094 	ori	r3,r2,2
    df50:	e0bffc17 	ldw	r2,-16(fp)
    df54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    df58:	e0bffc17 	ldw	r2,-16(fp)
    df5c:	10800017 	ldw	r2,0(r2)
    df60:	10800104 	addi	r2,r2,4
    df64:	1007883a 	mov	r3,r2
    df68:	e0bffc17 	ldw	r2,-16(fp)
    df6c:	10800817 	ldw	r2,32(r2)
    df70:	18800035 	stwio	r2,0(r3)
    df74:	e0bff917 	ldw	r2,-28(fp)
    df78:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df7c:	e0bffb17 	ldw	r2,-20(fp)
    df80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    df84:	e0bffe17 	ldw	r2,-8(fp)
    df88:	0080120e 	bge	zero,r2,dfd4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
    df8c:	e0bfff17 	ldw	r2,-4(fp)
    df90:	1090000c 	andi	r2,r2,16384
    df94:	10000126 	beq	r2,zero,df9c <altera_avalon_jtag_uart_write+0x190>
        break;
    df98:	00001006 	br	dfdc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    df9c:	0001883a 	nop
    dfa0:	e0bffc17 	ldw	r2,-16(fp)
    dfa4:	10c00d17 	ldw	r3,52(r2)
    dfa8:	e0bff517 	ldw	r2,-44(fp)
    dfac:	1880051e 	bne	r3,r2,dfc4 <altera_avalon_jtag_uart_write+0x1b8>
    dfb0:	e0bffc17 	ldw	r2,-16(fp)
    dfb4:	10c00917 	ldw	r3,36(r2)
    dfb8:	e0bffc17 	ldw	r2,-16(fp)
    dfbc:	10800117 	ldw	r2,4(r2)
    dfc0:	18bff736 	bltu	r3,r2,dfa0 <__alt_mem_onchip_memory2_0+0xfbfedfa0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    dfc4:	e0bffc17 	ldw	r2,-16(fp)
    dfc8:	10800917 	ldw	r2,36(r2)
    dfcc:	10000126 	beq	r2,zero,dfd4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
    dfd0:	00000206 	br	dfdc <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
    dfd4:	e0bffe17 	ldw	r2,-8(fp)
    dfd8:	00bf9716 	blt	zero,r2,de38 <__alt_mem_onchip_memory2_0+0xfbfede38>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    dfdc:	e0fffd17 	ldw	r3,-12(fp)
    dfe0:	e0bff717 	ldw	r2,-36(fp)
    dfe4:	18800426 	beq	r3,r2,dff8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
    dfe8:	e0fffd17 	ldw	r3,-12(fp)
    dfec:	e0bff717 	ldw	r2,-36(fp)
    dff0:	1885c83a 	sub	r2,r3,r2
    dff4:	00000606 	br	e010 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
    dff8:	e0bfff17 	ldw	r2,-4(fp)
    dffc:	1090000c 	andi	r2,r2,16384
    e000:	10000226 	beq	r2,zero,e00c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
    e004:	00bffd44 	movi	r2,-11
    e008:	00000106 	br	e010 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    e00c:	00bffec4 	movi	r2,-5
}
    e010:	e037883a 	mov	sp,fp
    e014:	dfc00117 	ldw	ra,4(sp)
    e018:	df000017 	ldw	fp,0(sp)
    e01c:	dec00204 	addi	sp,sp,8
    e020:	f800283a 	ret

0000e024 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e024:	defffe04 	addi	sp,sp,-8
    e028:	dfc00115 	stw	ra,4(sp)
    e02c:	df000015 	stw	fp,0(sp)
    e030:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e034:	00800074 	movhi	r2,1
    e038:	10875804 	addi	r2,r2,7520
    e03c:	10800017 	ldw	r2,0(r2)
    e040:	10000526 	beq	r2,zero,e058 <alt_get_errno+0x34>
    e044:	00800074 	movhi	r2,1
    e048:	10875804 	addi	r2,r2,7520
    e04c:	10800017 	ldw	r2,0(r2)
    e050:	103ee83a 	callr	r2
    e054:	00000206 	br	e060 <alt_get_errno+0x3c>
    e058:	00800074 	movhi	r2,1
    e05c:	108e2604 	addi	r2,r2,14488
}
    e060:	e037883a 	mov	sp,fp
    e064:	dfc00117 	ldw	ra,4(sp)
    e068:	df000017 	ldw	fp,0(sp)
    e06c:	dec00204 	addi	sp,sp,8
    e070:	f800283a 	ret

0000e074 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
    e074:	defff904 	addi	sp,sp,-28
    e078:	df000615 	stw	fp,24(sp)
    e07c:	df000604 	addi	fp,sp,24
    e080:	e13ffe15 	stw	r4,-8(fp)
    e084:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
    e088:	00bfffc4 	movi	r2,-1
    e08c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
    e090:	0005317a 	rdctl	r2,cpuid
    e094:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
    e098:	e0bffb17 	ldw	r2,-20(fp)
    e09c:	1006943a 	slli	r3,r2,16
    e0a0:	e0bfff17 	ldw	r2,-4(fp)
    e0a4:	1884b03a 	or	r2,r3,r2
    e0a8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
    e0ac:	e0bffe17 	ldw	r2,-8(fp)
    e0b0:	10800317 	ldw	r2,12(r2)
    e0b4:	e0fffc17 	ldw	r3,-16(fp)
    e0b8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    e0bc:	e0bffe17 	ldw	r2,-8(fp)
    e0c0:	10800317 	ldw	r2,12(r2)
    e0c4:	10800037 	ldwio	r2,0(r2)
    e0c8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
    e0cc:	e0fffd17 	ldw	r3,-12(fp)
    e0d0:	e0bffc17 	ldw	r2,-16(fp)
    e0d4:	1880011e 	bne	r3,r2,e0dc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
    e0d8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
    e0dc:	e0bffa17 	ldw	r2,-24(fp)
}
    e0e0:	e037883a 	mov	sp,fp
    e0e4:	df000017 	ldw	fp,0(sp)
    e0e8:	dec00104 	addi	sp,sp,4
    e0ec:	f800283a 	ret

0000e0f0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
    e0f0:	defffc04 	addi	sp,sp,-16
    e0f4:	dfc00315 	stw	ra,12(sp)
    e0f8:	df000215 	stw	fp,8(sp)
    e0fc:	df000204 	addi	fp,sp,8
    e100:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
    e104:	e13fff17 	ldw	r4,-4(fp)
    e108:	d1600d04 	addi	r5,gp,-32716
    e10c:	000e9a80 	call	e9a8 <alt_find_dev>
    e110:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
    e114:	e0bffe17 	ldw	r2,-8(fp)
    e118:	1000041e 	bne	r2,zero,e12c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
    e11c:	000e0240 	call	e024 <alt_get_errno>
    e120:	1007883a 	mov	r3,r2
    e124:	008004c4 	movi	r2,19
    e128:	18800015 	stw	r2,0(r3)
  }

  return dev;
    e12c:	e0bffe17 	ldw	r2,-8(fp)
}
    e130:	e037883a 	mov	sp,fp
    e134:	dfc00117 	ldw	ra,4(sp)
    e138:	df000017 	ldw	fp,0(sp)
    e13c:	dec00204 	addi	sp,sp,8
    e140:	f800283a 	ret

0000e144 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
    e144:	defffe04 	addi	sp,sp,-8
    e148:	df000115 	stw	fp,4(sp)
    e14c:	df000104 	addi	fp,sp,4
    e150:	e13fff15 	stw	r4,-4(fp)
  return;
    e154:	0001883a 	nop
}
    e158:	e037883a 	mov	sp,fp
    e15c:	df000017 	ldw	fp,0(sp)
    e160:	dec00104 	addi	sp,sp,4
    e164:	f800283a 	ret

0000e168 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
    e168:	defffc04 	addi	sp,sp,-16
    e16c:	dfc00315 	stw	ra,12(sp)
    e170:	df000215 	stw	fp,8(sp)
    e174:	df000204 	addi	fp,sp,8
    e178:	e13ffe15 	stw	r4,-8(fp)
    e17c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
    e180:	0001883a 	nop
    e184:	e13ffe17 	ldw	r4,-8(fp)
    e188:	e17fff17 	ldw	r5,-4(fp)
    e18c:	000e0740 	call	e074 <alt_mutex_trylock>
    e190:	103ffc1e 	bne	r2,zero,e184 <__alt_mem_onchip_memory2_0+0xfbfee184>
}
    e194:	e037883a 	mov	sp,fp
    e198:	dfc00117 	ldw	ra,4(sp)
    e19c:	df000017 	ldw	fp,0(sp)
    e1a0:	dec00204 	addi	sp,sp,8
    e1a4:	f800283a 	ret

0000e1a8 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
    e1a8:	defffa04 	addi	sp,sp,-24
    e1ac:	dfc00515 	stw	ra,20(sp)
    e1b0:	df000415 	stw	fp,16(sp)
    e1b4:	df000404 	addi	fp,sp,16
    e1b8:	e13ffd15 	stw	r4,-12(fp)
    e1bc:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
    e1c0:	e13ffd17 	ldw	r4,-12(fp)
    e1c4:	e17ffe17 	ldw	r5,-8(fp)
    e1c8:	000e0740 	call	e074 <alt_mutex_trylock>
    e1cc:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
    e1d0:	e0bffc17 	ldw	r2,-16(fp)
}
    e1d4:	e037883a 	mov	sp,fp
    e1d8:	dfc00117 	ldw	ra,4(sp)
    e1dc:	df000017 	ldw	fp,0(sp)
    e1e0:	dec00204 	addi	sp,sp,8
    e1e4:	f800283a 	ret

0000e1e8 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
    e1e8:	defffd04 	addi	sp,sp,-12
    e1ec:	df000215 	stw	fp,8(sp)
    e1f0:	df000204 	addi	fp,sp,8
    e1f4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
    e1f8:	0005317a 	rdctl	r2,cpuid
    e1fc:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
    e200:	e0bfff17 	ldw	r2,-4(fp)
    e204:	10800317 	ldw	r2,12(r2)
    e208:	10800104 	addi	r2,r2,4
    e20c:	00c00044 	movi	r3,1
    e210:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
    e214:	e0bfff17 	ldw	r2,-4(fp)
    e218:	10800317 	ldw	r2,12(r2)
    e21c:	e0fffe17 	ldw	r3,-8(fp)
    e220:	1806943a 	slli	r3,r3,16
    e224:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
    e228:	e037883a 	mov	sp,fp
    e22c:	df000017 	ldw	fp,0(sp)
    e230:	dec00104 	addi	sp,sp,4
    e234:	f800283a 	ret

0000e238 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
    e238:	defff904 	addi	sp,sp,-28
    e23c:	df000615 	stw	fp,24(sp)
    e240:	df000604 	addi	fp,sp,24
    e244:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
    e248:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
    e24c:	0005317a 	rdctl	r2,cpuid
    e250:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
    e254:	e0bfff17 	ldw	r2,-4(fp)
    e258:	10800317 	ldw	r2,12(r2)
    e25c:	10800037 	ldwio	r2,0(r2)
    e260:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
    e264:	e0bffc17 	ldw	r2,-16(fp)
    e268:	1004d43a 	srli	r2,r2,16
    e26c:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
    e270:	e0fffd17 	ldw	r3,-12(fp)
    e274:	e0bffb17 	ldw	r2,-20(fp)
    e278:	1880071e 	bne	r3,r2,e298 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
    e27c:	e0bffc17 	ldw	r2,-16(fp)
    e280:	10bfffcc 	andi	r2,r2,65535
    e284:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
    e288:	e0bffe17 	ldw	r2,-8(fp)
    e28c:	10000226 	beq	r2,zero,e298 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
    e290:	00800044 	movi	r2,1
    e294:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
    e298:	e0bffa17 	ldw	r2,-24(fp)
}
    e29c:	e037883a 	mov	sp,fp
    e2a0:	df000017 	ldw	fp,0(sp)
    e2a4:	dec00104 	addi	sp,sp,4
    e2a8:	f800283a 	ret

0000e2ac <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
    e2ac:	defffc04 	addi	sp,sp,-16
    e2b0:	df000315 	stw	fp,12(sp)
    e2b4:	df000304 	addi	fp,sp,12
    e2b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
    e2bc:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
    e2c0:	e0bfff17 	ldw	r2,-4(fp)
    e2c4:	10800317 	ldw	r2,12(r2)
    e2c8:	10800104 	addi	r2,r2,4
    e2cc:	10800037 	ldwio	r2,0(r2)
    e2d0:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
    e2d4:	e0bffe17 	ldw	r2,-8(fp)
    e2d8:	1080004c 	andi	r2,r2,1
    e2dc:	10000226 	beq	r2,zero,e2e8 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
    e2e0:	00800044 	movi	r2,1
    e2e4:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
    e2e8:	e0bffd17 	ldw	r2,-12(fp)
}
    e2ec:	e037883a 	mov	sp,fp
    e2f0:	df000017 	ldw	fp,0(sp)
    e2f4:	dec00104 	addi	sp,sp,4
    e2f8:	f800283a 	ret

0000e2fc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    e2fc:	defffa04 	addi	sp,sp,-24
    e300:	dfc00515 	stw	ra,20(sp)
    e304:	df000415 	stw	fp,16(sp)
    e308:	df000404 	addi	fp,sp,16
    e30c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    e310:	0007883a 	mov	r3,zero
    e314:	e0bfff17 	ldw	r2,-4(fp)
    e318:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    e31c:	e0bfff17 	ldw	r2,-4(fp)
    e320:	10800104 	addi	r2,r2,4
    e324:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e328:	0005303a 	rdctl	r2,status
    e32c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e330:	e0fffd17 	ldw	r3,-12(fp)
    e334:	00bfff84 	movi	r2,-2
    e338:	1884703a 	and	r2,r3,r2
    e33c:	1001703a 	wrctl	status,r2
  
  return context;
    e340:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    e344:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    e348:	000f17c0 	call	f17c <alt_tick>
    e34c:	e0bffc17 	ldw	r2,-16(fp)
    e350:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e354:	e0bffe17 	ldw	r2,-8(fp)
    e358:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    e35c:	e037883a 	mov	sp,fp
    e360:	dfc00117 	ldw	ra,4(sp)
    e364:	df000017 	ldw	fp,0(sp)
    e368:	dec00204 	addi	sp,sp,8
    e36c:	f800283a 	ret

0000e370 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    e370:	defff804 	addi	sp,sp,-32
    e374:	dfc00715 	stw	ra,28(sp)
    e378:	df000615 	stw	fp,24(sp)
    e37c:	df000604 	addi	fp,sp,24
    e380:	e13ffc15 	stw	r4,-16(fp)
    e384:	e17ffd15 	stw	r5,-12(fp)
    e388:	e1bffe15 	stw	r6,-8(fp)
    e38c:	e1ffff15 	stw	r7,-4(fp)
    e390:	e0bfff17 	ldw	r2,-4(fp)
    e394:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    e398:	00800074 	movhi	r2,1
    e39c:	108e2b04 	addi	r2,r2,14508
    e3a0:	10800017 	ldw	r2,0(r2)
    e3a4:	1000041e 	bne	r2,zero,e3b8 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    e3a8:	00800074 	movhi	r2,1
    e3ac:	108e2b04 	addi	r2,r2,14508
    e3b0:	e0fffb17 	ldw	r3,-20(fp)
    e3b4:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    e3b8:	e0bffc17 	ldw	r2,-16(fp)
    e3bc:	10800104 	addi	r2,r2,4
    e3c0:	00c001c4 	movi	r3,7
    e3c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    e3c8:	d8000015 	stw	zero,0(sp)
    e3cc:	e13ffd17 	ldw	r4,-12(fp)
    e3d0:	e17ffe17 	ldw	r5,-8(fp)
    e3d4:	01800074 	movhi	r6,1
    e3d8:	31b8bf04 	addi	r6,r6,-7428
    e3dc:	e1fffc17 	ldw	r7,-16(fp)
    e3e0:	000ea680 	call	ea68 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    e3e4:	e037883a 	mov	sp,fp
    e3e8:	dfc00117 	ldw	ra,4(sp)
    e3ec:	df000017 	ldw	fp,0(sp)
    e3f0:	dec00204 	addi	sp,sp,8
    e3f4:	f800283a 	ret

0000e3f8 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
    e3f8:	deffe504 	addi	sp,sp,-108
    e3fc:	dfc01915 	stw	ra,100(sp)
    e400:	df001815 	stw	fp,96(sp)
    e404:	dcc01715 	stw	r19,92(sp)
    e408:	dc801615 	stw	r18,88(sp)
    e40c:	dc401515 	stw	r17,84(sp)
    e410:	dc001415 	stw	r16,80(sp)
    e414:	df001804 	addi	fp,sp,96
    e418:	e13ff915 	stw	r4,-28(fp)
    e41c:	e17ffa15 	stw	r5,-24(fp)
    e420:	e1c00215 	stw	r7,8(fp)
    e424:	e1bffb15 	stw	r6,-20(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
    e428:	00800044 	movi	r2,1
    e42c:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
    e430:	00800074 	movhi	r2,1
    e434:	10805e04 	addi	r2,r2,376
    e438:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
    e43c:	00800074 	movhi	r2,1
    e440:	10806f04 	addi	r2,r2,444
    e444:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
    e448:	0007883a 	mov	r3,zero
    e44c:	e0bff917 	ldw	r2,-28(fp)
    e450:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
    e454:	e0800204 	addi	r2,fp,8
    e458:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
    e45c:	e13ff917 	ldw	r4,-28(fp)
    e460:	000f35c0 	call	f35c <perf_get_total_time>
    e464:	e0bff215 	stw	r2,-56(fp)
    e468:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
    e46c:	e13ff217 	ldw	r4,-56(fp)
    e470:	e17ff317 	ldw	r5,-52(fp)
    e474:	000fa8c0 	call	fa8c <__floatundidf>
    e478:	1021883a 	mov	r16,r2
    e47c:	1823883a 	mov	r17,r3
    e480:	e13ffa17 	ldw	r4,-24(fp)
    e484:	000c9880 	call	c988 <__floatunsidf>
    e488:	100f883a 	mov	r7,r2
    e48c:	1811883a 	mov	r8,r3
    e490:	8009883a 	mov	r4,r16
    e494:	880b883a 	mov	r5,r17
    e498:	380d883a 	mov	r6,r7
    e49c:	400f883a 	mov	r7,r8
    e4a0:	000ad2c0 	call	ad2c <__divdf3>
    e4a4:	1009883a 	mov	r4,r2
    e4a8:	180b883a 	mov	r5,r3
    e4ac:	e13ff415 	stw	r4,-48(fp)
    e4b0:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
    e4b4:	e0bff017 	ldw	r2,-64(fp)
    e4b8:	d8800115 	stw	r2,4(sp)
    e4bc:	e0bff117 	ldw	r2,-60(fp)
    e4c0:	d8800215 	stw	r2,8(sp)
    e4c4:	e0bff017 	ldw	r2,-64(fp)
    e4c8:	d8800315 	stw	r2,12(sp)
    e4cc:	e0bff317 	ldw	r2,-52(fp)
    e4d0:	d8800015 	stw	r2,0(sp)
    e4d4:	e1fff217 	ldw	r7,-56(fp)
    e4d8:	01000074 	movhi	r4,1
    e4dc:	21008004 	addi	r4,r4,512
    e4e0:	e17ff417 	ldw	r5,-48(fp)
    e4e4:	e1bff517 	ldw	r6,-44(fp)
    e4e8:	00007cc0 	call	7cc <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
    e4ec:	e0bff817 	ldw	r2,-32(fp)
    e4f0:	10c00104 	addi	r3,r2,4
    e4f4:	e0fff815 	stw	r3,-32(fp)
    e4f8:	10800017 	ldw	r2,0(r2)
    e4fc:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
    e500:	00800044 	movi	r2,1
    e504:	e0bfef15 	stw	r2,-68(fp)
    e508:	00004e06 	br	e644 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
    e50c:	e13ff917 	ldw	r4,-28(fp)
    e510:	e17fef17 	ldw	r5,-68(fp)
    e514:	000f2a00 	call	f2a0 <perf_get_section_time>
    e518:	e0bff615 	stw	r2,-40(fp)
    e51c:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
    e520:	e13ff617 	ldw	r4,-40(fp)
    e524:	e17ff717 	ldw	r5,-36(fp)
    e528:	000fa8c0 	call	fa8c <__floatundidf>
    e52c:	100b883a 	mov	r5,r2
    e530:	180d883a 	mov	r6,r3
    e534:	2809883a 	mov	r4,r5
    e538:	300b883a 	mov	r5,r6
    e53c:	000d883a 	mov	r6,zero
    e540:	01d01674 	movhi	r7,16473
    e544:	000b83c0 	call	b83c <__muldf3>
    e548:	1009883a 	mov	r4,r2
    e54c:	180b883a 	mov	r5,r3
    e550:	2021883a 	mov	r16,r4
    e554:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    e558:	e13ff217 	ldw	r4,-56(fp)
    e55c:	e17ff317 	ldw	r5,-52(fp)
    e560:	000fa8c0 	call	fa8c <__floatundidf>
    e564:	100f883a 	mov	r7,r2
    e568:	1811883a 	mov	r8,r3
    e56c:	8009883a 	mov	r4,r16
    e570:	880b883a 	mov	r5,r17
    e574:	380d883a 	mov	r6,r7
    e578:	400f883a 	mov	r7,r8
    e57c:	000ad2c0 	call	ad2c <__divdf3>
    e580:	1009883a 	mov	r4,r2
    e584:	180b883a 	mov	r5,r3
    e588:	2025883a 	mov	r18,r4
    e58c:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
    e590:	e13ff617 	ldw	r4,-40(fp)
    e594:	e17ff717 	ldw	r5,-36(fp)
    e598:	000fa8c0 	call	fa8c <__floatundidf>
    e59c:	1021883a 	mov	r16,r2
    e5a0:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    e5a4:	e13ffa17 	ldw	r4,-24(fp)
    e5a8:	000c9880 	call	c988 <__floatunsidf>
    e5ac:	100f883a 	mov	r7,r2
    e5b0:	1811883a 	mov	r8,r3
    e5b4:	8009883a 	mov	r4,r16
    e5b8:	880b883a 	mov	r5,r17
    e5bc:	380d883a 	mov	r6,r7
    e5c0:	400f883a 	mov	r7,r8
    e5c4:	000ad2c0 	call	ad2c <__divdf3>
    e5c8:	1009883a 	mov	r4,r2
    e5cc:	180b883a 	mov	r5,r3
    e5d0:	2021883a 	mov	r16,r4
    e5d4:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
    e5d8:	e13ff917 	ldw	r4,-28(fp)
    e5dc:	e17fef17 	ldw	r5,-68(fp)
    e5e0:	000f3a80 	call	f3a8 <perf_get_num_starts>
    e5e4:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    e5e8:	dc000015 	stw	r16,0(sp)
    e5ec:	dc400115 	stw	r17,4(sp)
    e5f0:	e0bff617 	ldw	r2,-40(fp)
    e5f4:	d8800215 	stw	r2,8(sp)
    e5f8:	e0bff717 	ldw	r2,-36(fp)
    e5fc:	d8800315 	stw	r2,12(sp)
    e600:	d8c00415 	stw	r3,16(sp)
    e604:	e0bff017 	ldw	r2,-64(fp)
    e608:	d8800515 	stw	r2,20(sp)
    e60c:	01000074 	movhi	r4,1
    e610:	21009504 	addi	r4,r4,596
    e614:	e17fee17 	ldw	r5,-72(fp)
    e618:	900d883a 	mov	r6,r18
    e61c:	980f883a 	mov	r7,r19
    e620:	00007cc0 	call	7cc <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
    e624:	e0bff817 	ldw	r2,-32(fp)
    e628:	10c00104 	addi	r3,r2,4
    e62c:	e0fff815 	stw	r3,-32(fp)
    e630:	10800017 	ldw	r2,0(r2)
    e634:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
    e638:	e0bfef17 	ldw	r2,-68(fp)
    e63c:	10800044 	addi	r2,r2,1
    e640:	e0bfef15 	stw	r2,-68(fp)
    e644:	e0bfef17 	ldw	r2,-68(fp)
    e648:	e0fffb17 	ldw	r3,-20(fp)
    e64c:	18bfaf0e 	bge	r3,r2,e50c <__alt_mem_onchip_memory2_0+0xfbfee50c>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
    e650:	0005883a 	mov	r2,zero
}
    e654:	e6fffc04 	addi	sp,fp,-16
    e658:	dfc00517 	ldw	ra,20(sp)
    e65c:	df000417 	ldw	fp,16(sp)
    e660:	dcc00317 	ldw	r19,12(sp)
    e664:	dc800217 	ldw	r18,8(sp)
    e668:	dc400117 	ldw	r17,4(sp)
    e66c:	dc000017 	ldw	r16,0(sp)
    e670:	dec00704 	addi	sp,sp,28
    e674:	f800283a 	ret

0000e678 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    e678:	defff504 	addi	sp,sp,-44
    e67c:	df000a15 	stw	fp,40(sp)
    e680:	df000a04 	addi	fp,sp,40
    e684:	e13ffc15 	stw	r4,-16(fp)
    e688:	e17ffd15 	stw	r5,-12(fp)
    e68c:	e1bffe15 	stw	r6,-8(fp)
    e690:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    e694:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e698:	00800074 	movhi	r2,1
    e69c:	108e2b04 	addi	r2,r2,14508
    e6a0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    e6a4:	10003f26 	beq	r2,zero,e7a4 <alt_alarm_start+0x12c>
  {
    if (alarm)
    e6a8:	e0bffc17 	ldw	r2,-16(fp)
    e6ac:	10003b26 	beq	r2,zero,e79c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
    e6b0:	e0bffc17 	ldw	r2,-16(fp)
    e6b4:	e0fffe17 	ldw	r3,-8(fp)
    e6b8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    e6bc:	e0bffc17 	ldw	r2,-16(fp)
    e6c0:	e0ffff17 	ldw	r3,-4(fp)
    e6c4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e6c8:	0005303a 	rdctl	r2,status
    e6cc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e6d0:	e0fff817 	ldw	r3,-32(fp)
    e6d4:	00bfff84 	movi	r2,-2
    e6d8:	1884703a 	and	r2,r3,r2
    e6dc:	1001703a 	wrctl	status,r2
  
  return context;
    e6e0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    e6e4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    e6e8:	00800074 	movhi	r2,1
    e6ec:	108e2c04 	addi	r2,r2,14512
    e6f0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    e6f4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    e6f8:	e0fffd17 	ldw	r3,-12(fp)
    e6fc:	e0bff617 	ldw	r2,-40(fp)
    e700:	1885883a 	add	r2,r3,r2
    e704:	10c00044 	addi	r3,r2,1
    e708:	e0bffc17 	ldw	r2,-16(fp)
    e70c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    e710:	e0bffc17 	ldw	r2,-16(fp)
    e714:	10c00217 	ldw	r3,8(r2)
    e718:	e0bff617 	ldw	r2,-40(fp)
    e71c:	1880042e 	bgeu	r3,r2,e730 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
    e720:	e0bffc17 	ldw	r2,-16(fp)
    e724:	00c00044 	movi	r3,1
    e728:	10c00405 	stb	r3,16(r2)
    e72c:	00000206 	br	e738 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
    e730:	e0bffc17 	ldw	r2,-16(fp)
    e734:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    e738:	e0fffc17 	ldw	r3,-16(fp)
    e73c:	00800074 	movhi	r2,1
    e740:	10875d04 	addi	r2,r2,7540
    e744:	e0bff915 	stw	r2,-28(fp)
    e748:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e74c:	e0bffa17 	ldw	r2,-24(fp)
    e750:	e0fff917 	ldw	r3,-28(fp)
    e754:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e758:	e0bff917 	ldw	r2,-28(fp)
    e75c:	10c00017 	ldw	r3,0(r2)
    e760:	e0bffa17 	ldw	r2,-24(fp)
    e764:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e768:	e0bff917 	ldw	r2,-28(fp)
    e76c:	10800017 	ldw	r2,0(r2)
    e770:	e0fffa17 	ldw	r3,-24(fp)
    e774:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e778:	e0bff917 	ldw	r2,-28(fp)
    e77c:	e0fffa17 	ldw	r3,-24(fp)
    e780:	10c00015 	stw	r3,0(r2)
    e784:	e0bff717 	ldw	r2,-36(fp)
    e788:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e78c:	e0bffb17 	ldw	r2,-20(fp)
    e790:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    e794:	0005883a 	mov	r2,zero
    e798:	00000306 	br	e7a8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
    e79c:	00bffa84 	movi	r2,-22
    e7a0:	00000106 	br	e7a8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
    e7a4:	00bfde84 	movi	r2,-134
  }
}
    e7a8:	e037883a 	mov	sp,fp
    e7ac:	df000017 	ldw	fp,0(sp)
    e7b0:	dec00104 	addi	sp,sp,4
    e7b4:	f800283a 	ret

0000e7b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    e7b8:	defffe04 	addi	sp,sp,-8
    e7bc:	df000115 	stw	fp,4(sp)
    e7c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e7c4:	e03fff15 	stw	zero,-4(fp)
    e7c8:	00000506 	br	e7e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    e7cc:	e0bfff17 	ldw	r2,-4(fp)
    e7d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    e7d4:	e0bfff17 	ldw	r2,-4(fp)
    e7d8:	10800804 	addi	r2,r2,32
    e7dc:	e0bfff15 	stw	r2,-4(fp)
    e7e0:	e0bfff17 	ldw	r2,-4(fp)
    e7e4:	10840030 	cmpltui	r2,r2,4096
    e7e8:	103ff81e 	bne	r2,zero,e7cc <__alt_mem_onchip_memory2_0+0xfbfee7cc>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    e7ec:	e037883a 	mov	sp,fp
    e7f0:	df000017 	ldw	fp,0(sp)
    e7f4:	dec00104 	addi	sp,sp,4
    e7f8:	f800283a 	ret

0000e7fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e7fc:	defffe04 	addi	sp,sp,-8
    e800:	dfc00115 	stw	ra,4(sp)
    e804:	df000015 	stw	fp,0(sp)
    e808:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e80c:	00800074 	movhi	r2,1
    e810:	10875804 	addi	r2,r2,7520
    e814:	10800017 	ldw	r2,0(r2)
    e818:	10000526 	beq	r2,zero,e830 <alt_get_errno+0x34>
    e81c:	00800074 	movhi	r2,1
    e820:	10875804 	addi	r2,r2,7520
    e824:	10800017 	ldw	r2,0(r2)
    e828:	103ee83a 	callr	r2
    e82c:	00000206 	br	e838 <alt_get_errno+0x3c>
    e830:	00800074 	movhi	r2,1
    e834:	108e2604 	addi	r2,r2,14488
}
    e838:	e037883a 	mov	sp,fp
    e83c:	dfc00117 	ldw	ra,4(sp)
    e840:	df000017 	ldw	fp,0(sp)
    e844:	dec00204 	addi	sp,sp,8
    e848:	f800283a 	ret

0000e84c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    e84c:	defffa04 	addi	sp,sp,-24
    e850:	dfc00515 	stw	ra,20(sp)
    e854:	df000415 	stw	fp,16(sp)
    e858:	df000404 	addi	fp,sp,16
    e85c:	e13ffe15 	stw	r4,-8(fp)
    e860:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    e864:	e0bffe17 	ldw	r2,-8(fp)
    e868:	10000326 	beq	r2,zero,e878 <alt_dev_llist_insert+0x2c>
    e86c:	e0bffe17 	ldw	r2,-8(fp)
    e870:	10800217 	ldw	r2,8(r2)
    e874:	1000061e 	bne	r2,zero,e890 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    e878:	000e7fc0 	call	e7fc <alt_get_errno>
    e87c:	1007883a 	mov	r3,r2
    e880:	00800584 	movi	r2,22
    e884:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    e888:	00bffa84 	movi	r2,-22
    e88c:	00001306 	br	e8dc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    e890:	e0bffe17 	ldw	r2,-8(fp)
    e894:	e0ffff17 	ldw	r3,-4(fp)
    e898:	e0fffc15 	stw	r3,-16(fp)
    e89c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    e8a0:	e0bffd17 	ldw	r2,-12(fp)
    e8a4:	e0fffc17 	ldw	r3,-16(fp)
    e8a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    e8ac:	e0bffc17 	ldw	r2,-16(fp)
    e8b0:	10c00017 	ldw	r3,0(r2)
    e8b4:	e0bffd17 	ldw	r2,-12(fp)
    e8b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    e8bc:	e0bffc17 	ldw	r2,-16(fp)
    e8c0:	10800017 	ldw	r2,0(r2)
    e8c4:	e0fffd17 	ldw	r3,-12(fp)
    e8c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    e8cc:	e0bffc17 	ldw	r2,-16(fp)
    e8d0:	e0fffd17 	ldw	r3,-12(fp)
    e8d4:	10c00015 	stw	r3,0(r2)

  return 0;  
    e8d8:	0005883a 	mov	r2,zero
}
    e8dc:	e037883a 	mov	sp,fp
    e8e0:	dfc00117 	ldw	ra,4(sp)
    e8e4:	df000017 	ldw	fp,0(sp)
    e8e8:	dec00204 	addi	sp,sp,8
    e8ec:	f800283a 	ret

0000e8f0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    e8f0:	defffd04 	addi	sp,sp,-12
    e8f4:	dfc00215 	stw	ra,8(sp)
    e8f8:	df000115 	stw	fp,4(sp)
    e8fc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e900:	00800074 	movhi	r2,1
    e904:	10becb04 	addi	r2,r2,-1236
    e908:	e0bfff15 	stw	r2,-4(fp)
    e90c:	00000606 	br	e928 <_do_ctors+0x38>
        (*ctor) (); 
    e910:	e0bfff17 	ldw	r2,-4(fp)
    e914:	10800017 	ldw	r2,0(r2)
    e918:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    e91c:	e0bfff17 	ldw	r2,-4(fp)
    e920:	10bfff04 	addi	r2,r2,-4
    e924:	e0bfff15 	stw	r2,-4(fp)
    e928:	e0ffff17 	ldw	r3,-4(fp)
    e92c:	00800074 	movhi	r2,1
    e930:	10becc04 	addi	r2,r2,-1232
    e934:	18bff62e 	bgeu	r3,r2,e910 <__alt_mem_onchip_memory2_0+0xfbfee910>
        (*ctor) (); 
}
    e938:	e037883a 	mov	sp,fp
    e93c:	dfc00117 	ldw	ra,4(sp)
    e940:	df000017 	ldw	fp,0(sp)
    e944:	dec00204 	addi	sp,sp,8
    e948:	f800283a 	ret

0000e94c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    e94c:	defffd04 	addi	sp,sp,-12
    e950:	dfc00215 	stw	ra,8(sp)
    e954:	df000115 	stw	fp,4(sp)
    e958:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e95c:	00800074 	movhi	r2,1
    e960:	10becb04 	addi	r2,r2,-1236
    e964:	e0bfff15 	stw	r2,-4(fp)
    e968:	00000606 	br	e984 <_do_dtors+0x38>
        (*dtor) (); 
    e96c:	e0bfff17 	ldw	r2,-4(fp)
    e970:	10800017 	ldw	r2,0(r2)
    e974:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    e978:	e0bfff17 	ldw	r2,-4(fp)
    e97c:	10bfff04 	addi	r2,r2,-4
    e980:	e0bfff15 	stw	r2,-4(fp)
    e984:	e0ffff17 	ldw	r3,-4(fp)
    e988:	00800074 	movhi	r2,1
    e98c:	10becc04 	addi	r2,r2,-1232
    e990:	18bff62e 	bgeu	r3,r2,e96c <__alt_mem_onchip_memory2_0+0xfbfee96c>
        (*dtor) (); 
}
    e994:	e037883a 	mov	sp,fp
    e998:	dfc00117 	ldw	ra,4(sp)
    e99c:	df000017 	ldw	fp,0(sp)
    e9a0:	dec00204 	addi	sp,sp,8
    e9a4:	f800283a 	ret

0000e9a8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e9a8:	defffa04 	addi	sp,sp,-24
    e9ac:	dfc00515 	stw	ra,20(sp)
    e9b0:	df000415 	stw	fp,16(sp)
    e9b4:	df000404 	addi	fp,sp,16
    e9b8:	e13ffe15 	stw	r4,-8(fp)
    e9bc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e9c0:	e0bfff17 	ldw	r2,-4(fp)
    e9c4:	10800017 	ldw	r2,0(r2)
    e9c8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e9cc:	e13ffe17 	ldw	r4,-8(fp)
    e9d0:	00008e40 	call	8e4 <strlen>
    e9d4:	10800044 	addi	r2,r2,1
    e9d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e9dc:	00000d06 	br	ea14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	10c00217 	ldw	r3,8(r2)
    e9e8:	e0bffd17 	ldw	r2,-12(fp)
    e9ec:	1809883a 	mov	r4,r3
    e9f0:	e17ffe17 	ldw	r5,-8(fp)
    e9f4:	100d883a 	mov	r6,r2
    e9f8:	000f7680 	call	f768 <memcmp>
    e9fc:	1000021e 	bne	r2,zero,ea08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    ea00:	e0bffc17 	ldw	r2,-16(fp)
    ea04:	00000706 	br	ea24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    ea08:	e0bffc17 	ldw	r2,-16(fp)
    ea0c:	10800017 	ldw	r2,0(r2)
    ea10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    ea14:	e0fffc17 	ldw	r3,-16(fp)
    ea18:	e0bfff17 	ldw	r2,-4(fp)
    ea1c:	18bff01e 	bne	r3,r2,e9e0 <__alt_mem_onchip_memory2_0+0xfbfee9e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    ea20:	0005883a 	mov	r2,zero
}
    ea24:	e037883a 	mov	sp,fp
    ea28:	dfc00117 	ldw	ra,4(sp)
    ea2c:	df000017 	ldw	fp,0(sp)
    ea30:	dec00204 	addi	sp,sp,8
    ea34:	f800283a 	ret

0000ea38 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    ea38:	defffe04 	addi	sp,sp,-8
    ea3c:	dfc00115 	stw	ra,4(sp)
    ea40:	df000015 	stw	fp,0(sp)
    ea44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    ea48:	0009883a 	mov	r4,zero
    ea4c:	01480004 	movi	r5,8192
    ea50:	000f5f40 	call	f5f4 <alt_icache_flush>
#endif
}
    ea54:	e037883a 	mov	sp,fp
    ea58:	dfc00117 	ldw	ra,4(sp)
    ea5c:	df000017 	ldw	fp,0(sp)
    ea60:	dec00204 	addi	sp,sp,8
    ea64:	f800283a 	ret

0000ea68 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ea68:	defff904 	addi	sp,sp,-28
    ea6c:	dfc00615 	stw	ra,24(sp)
    ea70:	df000515 	stw	fp,20(sp)
    ea74:	df000504 	addi	fp,sp,20
    ea78:	e13ffc15 	stw	r4,-16(fp)
    ea7c:	e17ffd15 	stw	r5,-12(fp)
    ea80:	e1bffe15 	stw	r6,-8(fp)
    ea84:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    ea88:	e0800217 	ldw	r2,8(fp)
    ea8c:	d8800015 	stw	r2,0(sp)
    ea90:	e13ffc17 	ldw	r4,-16(fp)
    ea94:	e17ffd17 	ldw	r5,-12(fp)
    ea98:	e1bffe17 	ldw	r6,-8(fp)
    ea9c:	e1ffff17 	ldw	r7,-4(fp)
    eaa0:	000ec480 	call	ec48 <alt_iic_isr_register>
}  
    eaa4:	e037883a 	mov	sp,fp
    eaa8:	dfc00117 	ldw	ra,4(sp)
    eaac:	df000017 	ldw	fp,0(sp)
    eab0:	dec00204 	addi	sp,sp,8
    eab4:	f800283a 	ret

0000eab8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    eab8:	defff904 	addi	sp,sp,-28
    eabc:	df000615 	stw	fp,24(sp)
    eac0:	df000604 	addi	fp,sp,24
    eac4:	e13ffe15 	stw	r4,-8(fp)
    eac8:	e17fff15 	stw	r5,-4(fp)
    eacc:	e0bfff17 	ldw	r2,-4(fp)
    ead0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ead4:	0005303a 	rdctl	r2,status
    ead8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eadc:	e0fffb17 	ldw	r3,-20(fp)
    eae0:	00bfff84 	movi	r2,-2
    eae4:	1884703a 	and	r2,r3,r2
    eae8:	1001703a 	wrctl	status,r2
  
  return context;
    eaec:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    eaf0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    eaf4:	e0bffa17 	ldw	r2,-24(fp)
    eaf8:	00c00044 	movi	r3,1
    eafc:	1884983a 	sll	r2,r3,r2
    eb00:	1007883a 	mov	r3,r2
    eb04:	00800074 	movhi	r2,1
    eb08:	108e2a04 	addi	r2,r2,14504
    eb0c:	10800017 	ldw	r2,0(r2)
    eb10:	1886b03a 	or	r3,r3,r2
    eb14:	00800074 	movhi	r2,1
    eb18:	108e2a04 	addi	r2,r2,14504
    eb1c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    eb20:	00800074 	movhi	r2,1
    eb24:	108e2a04 	addi	r2,r2,14504
    eb28:	10800017 	ldw	r2,0(r2)
    eb2c:	100170fa 	wrctl	ienable,r2
    eb30:	e0bffc17 	ldw	r2,-16(fp)
    eb34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eb38:	e0bffd17 	ldw	r2,-12(fp)
    eb3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    eb40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    eb44:	0001883a 	nop
}
    eb48:	e037883a 	mov	sp,fp
    eb4c:	df000017 	ldw	fp,0(sp)
    eb50:	dec00104 	addi	sp,sp,4
    eb54:	f800283a 	ret

0000eb58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    eb58:	defff904 	addi	sp,sp,-28
    eb5c:	df000615 	stw	fp,24(sp)
    eb60:	df000604 	addi	fp,sp,24
    eb64:	e13ffe15 	stw	r4,-8(fp)
    eb68:	e17fff15 	stw	r5,-4(fp)
    eb6c:	e0bfff17 	ldw	r2,-4(fp)
    eb70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    eb74:	0005303a 	rdctl	r2,status
    eb78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    eb7c:	e0fffb17 	ldw	r3,-20(fp)
    eb80:	00bfff84 	movi	r2,-2
    eb84:	1884703a 	and	r2,r3,r2
    eb88:	1001703a 	wrctl	status,r2
  
  return context;
    eb8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    eb90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    eb94:	e0bffa17 	ldw	r2,-24(fp)
    eb98:	00c00044 	movi	r3,1
    eb9c:	1884983a 	sll	r2,r3,r2
    eba0:	0084303a 	nor	r2,zero,r2
    eba4:	1007883a 	mov	r3,r2
    eba8:	00800074 	movhi	r2,1
    ebac:	108e2a04 	addi	r2,r2,14504
    ebb0:	10800017 	ldw	r2,0(r2)
    ebb4:	1886703a 	and	r3,r3,r2
    ebb8:	00800074 	movhi	r2,1
    ebbc:	108e2a04 	addi	r2,r2,14504
    ebc0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    ebc4:	00800074 	movhi	r2,1
    ebc8:	108e2a04 	addi	r2,r2,14504
    ebcc:	10800017 	ldw	r2,0(r2)
    ebd0:	100170fa 	wrctl	ienable,r2
    ebd4:	e0bffc17 	ldw	r2,-16(fp)
    ebd8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ebdc:	e0bffd17 	ldw	r2,-12(fp)
    ebe0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    ebe4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    ebe8:	0001883a 	nop
}
    ebec:	e037883a 	mov	sp,fp
    ebf0:	df000017 	ldw	fp,0(sp)
    ebf4:	dec00104 	addi	sp,sp,4
    ebf8:	f800283a 	ret

0000ebfc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    ebfc:	defffc04 	addi	sp,sp,-16
    ec00:	df000315 	stw	fp,12(sp)
    ec04:	df000304 	addi	fp,sp,12
    ec08:	e13ffe15 	stw	r4,-8(fp)
    ec0c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    ec10:	000530fa 	rdctl	r2,ienable
    ec14:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    ec18:	e0bfff17 	ldw	r2,-4(fp)
    ec1c:	00c00044 	movi	r3,1
    ec20:	1884983a 	sll	r2,r3,r2
    ec24:	1007883a 	mov	r3,r2
    ec28:	e0bffd17 	ldw	r2,-12(fp)
    ec2c:	1884703a 	and	r2,r3,r2
    ec30:	1004c03a 	cmpne	r2,r2,zero
    ec34:	10803fcc 	andi	r2,r2,255
}
    ec38:	e037883a 	mov	sp,fp
    ec3c:	df000017 	ldw	fp,0(sp)
    ec40:	dec00104 	addi	sp,sp,4
    ec44:	f800283a 	ret

0000ec48 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    ec48:	defff504 	addi	sp,sp,-44
    ec4c:	dfc00a15 	stw	ra,40(sp)
    ec50:	df000915 	stw	fp,36(sp)
    ec54:	df000904 	addi	fp,sp,36
    ec58:	e13ffc15 	stw	r4,-16(fp)
    ec5c:	e17ffd15 	stw	r5,-12(fp)
    ec60:	e1bffe15 	stw	r6,-8(fp)
    ec64:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    ec68:	00bffa84 	movi	r2,-22
    ec6c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    ec70:	e0bffd17 	ldw	r2,-12(fp)
    ec74:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    ec78:	e0bff817 	ldw	r2,-32(fp)
    ec7c:	10800808 	cmpgei	r2,r2,32
    ec80:	1000271e 	bne	r2,zero,ed20 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ec84:	0005303a 	rdctl	r2,status
    ec88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ec8c:	e0fffa17 	ldw	r3,-24(fp)
    ec90:	00bfff84 	movi	r2,-2
    ec94:	1884703a 	and	r2,r3,r2
    ec98:	1001703a 	wrctl	status,r2
  
  return context;
    ec9c:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    eca0:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    eca4:	00800074 	movhi	r2,1
    eca8:	108e3804 	addi	r2,r2,14560
    ecac:	e0fff817 	ldw	r3,-32(fp)
    ecb0:	180690fa 	slli	r3,r3,3
    ecb4:	10c5883a 	add	r2,r2,r3
    ecb8:	e0fffe17 	ldw	r3,-8(fp)
    ecbc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    ecc0:	00800074 	movhi	r2,1
    ecc4:	108e3804 	addi	r2,r2,14560
    ecc8:	e0fff817 	ldw	r3,-32(fp)
    eccc:	180690fa 	slli	r3,r3,3
    ecd0:	18c00104 	addi	r3,r3,4
    ecd4:	10c5883a 	add	r2,r2,r3
    ecd8:	e0ffff17 	ldw	r3,-4(fp)
    ecdc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    ece0:	e0bffe17 	ldw	r2,-8(fp)
    ece4:	10000526 	beq	r2,zero,ecfc <alt_iic_isr_register+0xb4>
    ece8:	e0bff817 	ldw	r2,-32(fp)
    ecec:	e13ffc17 	ldw	r4,-16(fp)
    ecf0:	100b883a 	mov	r5,r2
    ecf4:	000eab80 	call	eab8 <alt_ic_irq_enable>
    ecf8:	00000406 	br	ed0c <alt_iic_isr_register+0xc4>
    ecfc:	e0bff817 	ldw	r2,-32(fp)
    ed00:	e13ffc17 	ldw	r4,-16(fp)
    ed04:	100b883a 	mov	r5,r2
    ed08:	000eb580 	call	eb58 <alt_ic_irq_disable>
    ed0c:	e0bff715 	stw	r2,-36(fp)
    ed10:	e0bff917 	ldw	r2,-28(fp)
    ed14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed18:	e0bffb17 	ldw	r2,-20(fp)
    ed1c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    ed20:	e0bff717 	ldw	r2,-36(fp)
}
    ed24:	e037883a 	mov	sp,fp
    ed28:	dfc00117 	ldw	ra,4(sp)
    ed2c:	df000017 	ldw	fp,0(sp)
    ed30:	dec00204 	addi	sp,sp,8
    ed34:	f800283a 	ret

0000ed38 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    ed38:	defff904 	addi	sp,sp,-28
    ed3c:	dfc00615 	stw	ra,24(sp)
    ed40:	df000515 	stw	fp,20(sp)
    ed44:	df000504 	addi	fp,sp,20
    ed48:	e13ffc15 	stw	r4,-16(fp)
    ed4c:	e17ffd15 	stw	r5,-12(fp)
    ed50:	e1bffe15 	stw	r6,-8(fp)
    ed54:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    ed58:	e13ffd17 	ldw	r4,-12(fp)
    ed5c:	e17ffe17 	ldw	r5,-8(fp)
    ed60:	e1bfff17 	ldw	r6,-4(fp)
    ed64:	000ef8c0 	call	ef8c <open>
    ed68:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    ed6c:	e0bffb17 	ldw	r2,-20(fp)
    ed70:	10001c16 	blt	r2,zero,ede4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    ed74:	00800074 	movhi	r2,1
    ed78:	1082d104 	addi	r2,r2,2884
    ed7c:	e0fffb17 	ldw	r3,-20(fp)
    ed80:	18c00324 	muli	r3,r3,12
    ed84:	10c5883a 	add	r2,r2,r3
    ed88:	10c00017 	ldw	r3,0(r2)
    ed8c:	e0bffc17 	ldw	r2,-16(fp)
    ed90:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    ed94:	00800074 	movhi	r2,1
    ed98:	1082d104 	addi	r2,r2,2884
    ed9c:	e0fffb17 	ldw	r3,-20(fp)
    eda0:	18c00324 	muli	r3,r3,12
    eda4:	18c00104 	addi	r3,r3,4
    eda8:	10c5883a 	add	r2,r2,r3
    edac:	10c00017 	ldw	r3,0(r2)
    edb0:	e0bffc17 	ldw	r2,-16(fp)
    edb4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    edb8:	00800074 	movhi	r2,1
    edbc:	1082d104 	addi	r2,r2,2884
    edc0:	e0fffb17 	ldw	r3,-20(fp)
    edc4:	18c00324 	muli	r3,r3,12
    edc8:	18c00204 	addi	r3,r3,8
    edcc:	10c5883a 	add	r2,r2,r3
    edd0:	10c00017 	ldw	r3,0(r2)
    edd4:	e0bffc17 	ldw	r2,-16(fp)
    edd8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    eddc:	e13ffb17 	ldw	r4,-20(fp)
    ede0:	000d1dc0 	call	d1dc <alt_release_fd>
  }
} 
    ede4:	e037883a 	mov	sp,fp
    ede8:	dfc00117 	ldw	ra,4(sp)
    edec:	df000017 	ldw	fp,0(sp)
    edf0:	dec00204 	addi	sp,sp,8
    edf4:	f800283a 	ret

0000edf8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    edf8:	defffb04 	addi	sp,sp,-20
    edfc:	dfc00415 	stw	ra,16(sp)
    ee00:	df000315 	stw	fp,12(sp)
    ee04:	df000304 	addi	fp,sp,12
    ee08:	e13ffd15 	stw	r4,-12(fp)
    ee0c:	e17ffe15 	stw	r5,-8(fp)
    ee10:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    ee14:	01000074 	movhi	r4,1
    ee18:	2102d404 	addi	r4,r4,2896
    ee1c:	e17ffd17 	ldw	r5,-12(fp)
    ee20:	01800044 	movi	r6,1
    ee24:	01c07fc4 	movi	r7,511
    ee28:	000ed380 	call	ed38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    ee2c:	01000074 	movhi	r4,1
    ee30:	2102d104 	addi	r4,r4,2884
    ee34:	e17ffe17 	ldw	r5,-8(fp)
    ee38:	000d883a 	mov	r6,zero
    ee3c:	01c07fc4 	movi	r7,511
    ee40:	000ed380 	call	ed38 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    ee44:	01000074 	movhi	r4,1
    ee48:	2102d704 	addi	r4,r4,2908
    ee4c:	e17fff17 	ldw	r5,-4(fp)
    ee50:	01800044 	movi	r6,1
    ee54:	01c07fc4 	movi	r7,511
    ee58:	000ed380 	call	ed38 <alt_open_fd>
}  
    ee5c:	e037883a 	mov	sp,fp
    ee60:	dfc00117 	ldw	ra,4(sp)
    ee64:	df000017 	ldw	fp,0(sp)
    ee68:	dec00204 	addi	sp,sp,8
    ee6c:	f800283a 	ret

0000ee70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ee70:	defffe04 	addi	sp,sp,-8
    ee74:	dfc00115 	stw	ra,4(sp)
    ee78:	df000015 	stw	fp,0(sp)
    ee7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ee80:	00800074 	movhi	r2,1
    ee84:	10875804 	addi	r2,r2,7520
    ee88:	10800017 	ldw	r2,0(r2)
    ee8c:	10000526 	beq	r2,zero,eea4 <alt_get_errno+0x34>
    ee90:	00800074 	movhi	r2,1
    ee94:	10875804 	addi	r2,r2,7520
    ee98:	10800017 	ldw	r2,0(r2)
    ee9c:	103ee83a 	callr	r2
    eea0:	00000206 	br	eeac <alt_get_errno+0x3c>
    eea4:	00800074 	movhi	r2,1
    eea8:	108e2604 	addi	r2,r2,14488
}
    eeac:	e037883a 	mov	sp,fp
    eeb0:	dfc00117 	ldw	ra,4(sp)
    eeb4:	df000017 	ldw	fp,0(sp)
    eeb8:	dec00204 	addi	sp,sp,8
    eebc:	f800283a 	ret

0000eec0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    eec0:	defffd04 	addi	sp,sp,-12
    eec4:	df000215 	stw	fp,8(sp)
    eec8:	df000204 	addi	fp,sp,8
    eecc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    eed0:	e0bfff17 	ldw	r2,-4(fp)
    eed4:	10800217 	ldw	r2,8(r2)
    eed8:	10d00034 	orhi	r3,r2,16384
    eedc:	e0bfff17 	ldw	r2,-4(fp)
    eee0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    eee4:	e03ffe15 	stw	zero,-8(fp)
    eee8:	00001d06 	br	ef60 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    eeec:	00800074 	movhi	r2,1
    eef0:	1082d104 	addi	r2,r2,2884
    eef4:	e0fffe17 	ldw	r3,-8(fp)
    eef8:	18c00324 	muli	r3,r3,12
    eefc:	10c5883a 	add	r2,r2,r3
    ef00:	10c00017 	ldw	r3,0(r2)
    ef04:	e0bfff17 	ldw	r2,-4(fp)
    ef08:	10800017 	ldw	r2,0(r2)
    ef0c:	1880111e 	bne	r3,r2,ef54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef10:	00800074 	movhi	r2,1
    ef14:	1082d104 	addi	r2,r2,2884
    ef18:	e0fffe17 	ldw	r3,-8(fp)
    ef1c:	18c00324 	muli	r3,r3,12
    ef20:	18c00204 	addi	r3,r3,8
    ef24:	10c5883a 	add	r2,r2,r3
    ef28:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    ef2c:	1000090e 	bge	r2,zero,ef54 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    ef30:	e0bffe17 	ldw	r2,-8(fp)
    ef34:	10c00324 	muli	r3,r2,12
    ef38:	00800074 	movhi	r2,1
    ef3c:	1082d104 	addi	r2,r2,2884
    ef40:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    ef44:	e0bfff17 	ldw	r2,-4(fp)
    ef48:	18800226 	beq	r3,r2,ef54 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    ef4c:	00bffcc4 	movi	r2,-13
    ef50:	00000a06 	br	ef7c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    ef54:	e0bffe17 	ldw	r2,-8(fp)
    ef58:	10800044 	addi	r2,r2,1
    ef5c:	e0bffe15 	stw	r2,-8(fp)
    ef60:	00800074 	movhi	r2,1
    ef64:	10875704 	addi	r2,r2,7516
    ef68:	10800017 	ldw	r2,0(r2)
    ef6c:	1007883a 	mov	r3,r2
    ef70:	e0bffe17 	ldw	r2,-8(fp)
    ef74:	18bfdd2e 	bgeu	r3,r2,eeec <__alt_mem_onchip_memory2_0+0xfbfeeeec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    ef78:	0005883a 	mov	r2,zero
}
    ef7c:	e037883a 	mov	sp,fp
    ef80:	df000017 	ldw	fp,0(sp)
    ef84:	dec00104 	addi	sp,sp,4
    ef88:	f800283a 	ret

0000ef8c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    ef8c:	defff604 	addi	sp,sp,-40
    ef90:	dfc00915 	stw	ra,36(sp)
    ef94:	df000815 	stw	fp,32(sp)
    ef98:	df000804 	addi	fp,sp,32
    ef9c:	e13ffd15 	stw	r4,-12(fp)
    efa0:	e17ffe15 	stw	r5,-8(fp)
    efa4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    efa8:	00bfffc4 	movi	r2,-1
    efac:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    efb0:	00bffb44 	movi	r2,-19
    efb4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    efb8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    efbc:	e13ffd17 	ldw	r4,-12(fp)
    efc0:	01400074 	movhi	r5,1
    efc4:	29475504 	addi	r5,r5,7508
    efc8:	000e9a80 	call	e9a8 <alt_find_dev>
    efcc:	e0bff815 	stw	r2,-32(fp)
    efd0:	e0bff817 	ldw	r2,-32(fp)
    efd4:	1000051e 	bne	r2,zero,efec <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    efd8:	e13ffd17 	ldw	r4,-12(fp)
    efdc:	000f42c0 	call	f42c <alt_find_file>
    efe0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    efe4:	00800044 	movi	r2,1
    efe8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    efec:	e0bff817 	ldw	r2,-32(fp)
    eff0:	10002926 	beq	r2,zero,f098 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    eff4:	e13ff817 	ldw	r4,-32(fp)
    eff8:	000f5400 	call	f540 <alt_get_fd>
    effc:	e0bff915 	stw	r2,-28(fp)
    f000:	e0bff917 	ldw	r2,-28(fp)
    f004:	1000030e 	bge	r2,zero,f014 <open+0x88>
    {
      status = index;
    f008:	e0bff917 	ldw	r2,-28(fp)
    f00c:	e0bffa15 	stw	r2,-24(fp)
    f010:	00002306 	br	f0a0 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    f014:	e0bff917 	ldw	r2,-28(fp)
    f018:	10c00324 	muli	r3,r2,12
    f01c:	00800074 	movhi	r2,1
    f020:	1082d104 	addi	r2,r2,2884
    f024:	1885883a 	add	r2,r3,r2
    f028:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f02c:	e0fffe17 	ldw	r3,-8(fp)
    f030:	00900034 	movhi	r2,16384
    f034:	10bfffc4 	addi	r2,r2,-1
    f038:	1886703a 	and	r3,r3,r2
    f03c:	e0bffc17 	ldw	r2,-16(fp)
    f040:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f044:	e0bffb17 	ldw	r2,-20(fp)
    f048:	1000051e 	bne	r2,zero,f060 <open+0xd4>
    f04c:	e13ffc17 	ldw	r4,-16(fp)
    f050:	000eec00 	call	eec0 <alt_file_locked>
    f054:	e0bffa15 	stw	r2,-24(fp)
    f058:	e0bffa17 	ldw	r2,-24(fp)
    f05c:	10001016 	blt	r2,zero,f0a0 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f060:	e0bff817 	ldw	r2,-32(fp)
    f064:	10800317 	ldw	r2,12(r2)
    f068:	10000826 	beq	r2,zero,f08c <open+0x100>
    f06c:	e0bff817 	ldw	r2,-32(fp)
    f070:	10800317 	ldw	r2,12(r2)
    f074:	e13ffc17 	ldw	r4,-16(fp)
    f078:	e17ffd17 	ldw	r5,-12(fp)
    f07c:	e1bffe17 	ldw	r6,-8(fp)
    f080:	e1ffff17 	ldw	r7,-4(fp)
    f084:	103ee83a 	callr	r2
    f088:	00000106 	br	f090 <open+0x104>
    f08c:	0005883a 	mov	r2,zero
    f090:	e0bffa15 	stw	r2,-24(fp)
    f094:	00000206 	br	f0a0 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f098:	00bffb44 	movi	r2,-19
    f09c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f0a0:	e0bffa17 	ldw	r2,-24(fp)
    f0a4:	1000090e 	bge	r2,zero,f0cc <open+0x140>
  {
    alt_release_fd (index);  
    f0a8:	e13ff917 	ldw	r4,-28(fp)
    f0ac:	000d1dc0 	call	d1dc <alt_release_fd>
    ALT_ERRNO = -status;
    f0b0:	000ee700 	call	ee70 <alt_get_errno>
    f0b4:	1007883a 	mov	r3,r2
    f0b8:	e0bffa17 	ldw	r2,-24(fp)
    f0bc:	0085c83a 	sub	r2,zero,r2
    f0c0:	18800015 	stw	r2,0(r3)
    return -1;
    f0c4:	00bfffc4 	movi	r2,-1
    f0c8:	00000106 	br	f0d0 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
    f0cc:	e0bff917 	ldw	r2,-28(fp)
}
    f0d0:	e037883a 	mov	sp,fp
    f0d4:	dfc00117 	ldw	ra,4(sp)
    f0d8:	df000017 	ldw	fp,0(sp)
    f0dc:	dec00204 	addi	sp,sp,8
    f0e0:	f800283a 	ret

0000f0e4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f0e4:	defffa04 	addi	sp,sp,-24
    f0e8:	df000515 	stw	fp,20(sp)
    f0ec:	df000504 	addi	fp,sp,20
    f0f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f0f4:	0005303a 	rdctl	r2,status
    f0f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f0fc:	e0fffc17 	ldw	r3,-16(fp)
    f100:	00bfff84 	movi	r2,-2
    f104:	1884703a 	and	r2,r3,r2
    f108:	1001703a 	wrctl	status,r2
  
  return context;
    f10c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f110:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f114:	e0bfff17 	ldw	r2,-4(fp)
    f118:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f11c:	e0bffd17 	ldw	r2,-12(fp)
    f120:	10800017 	ldw	r2,0(r2)
    f124:	e0fffd17 	ldw	r3,-12(fp)
    f128:	18c00117 	ldw	r3,4(r3)
    f12c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f130:	e0bffd17 	ldw	r2,-12(fp)
    f134:	10800117 	ldw	r2,4(r2)
    f138:	e0fffd17 	ldw	r3,-12(fp)
    f13c:	18c00017 	ldw	r3,0(r3)
    f140:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f144:	e0bffd17 	ldw	r2,-12(fp)
    f148:	e0fffd17 	ldw	r3,-12(fp)
    f14c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f150:	e0bffd17 	ldw	r2,-12(fp)
    f154:	e0fffd17 	ldw	r3,-12(fp)
    f158:	10c00015 	stw	r3,0(r2)
    f15c:	e0bffb17 	ldw	r2,-20(fp)
    f160:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f164:	e0bffe17 	ldw	r2,-8(fp)
    f168:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f16c:	e037883a 	mov	sp,fp
    f170:	df000017 	ldw	fp,0(sp)
    f174:	dec00104 	addi	sp,sp,4
    f178:	f800283a 	ret

0000f17c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f17c:	defffb04 	addi	sp,sp,-20
    f180:	dfc00415 	stw	ra,16(sp)
    f184:	df000315 	stw	fp,12(sp)
    f188:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f18c:	d0a01017 	ldw	r2,-32704(gp)
    f190:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f194:	d0a6df17 	ldw	r2,-25732(gp)
    f198:	10800044 	addi	r2,r2,1
    f19c:	d0a6df15 	stw	r2,-25732(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f1a0:	00002e06 	br	f25c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f1a4:	e0bffd17 	ldw	r2,-12(fp)
    f1a8:	10800017 	ldw	r2,0(r2)
    f1ac:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f1b0:	e0bffd17 	ldw	r2,-12(fp)
    f1b4:	10800403 	ldbu	r2,16(r2)
    f1b8:	10803fcc 	andi	r2,r2,255
    f1bc:	10000426 	beq	r2,zero,f1d0 <alt_tick+0x54>
    f1c0:	d0a6df17 	ldw	r2,-25732(gp)
    f1c4:	1000021e 	bne	r2,zero,f1d0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f1c8:	e0bffd17 	ldw	r2,-12(fp)
    f1cc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f1d0:	e0bffd17 	ldw	r2,-12(fp)
    f1d4:	10800217 	ldw	r2,8(r2)
    f1d8:	d0e6df17 	ldw	r3,-25732(gp)
    f1dc:	18801d36 	bltu	r3,r2,f254 <alt_tick+0xd8>
    f1e0:	e0bffd17 	ldw	r2,-12(fp)
    f1e4:	10800403 	ldbu	r2,16(r2)
    f1e8:	10803fcc 	andi	r2,r2,255
    f1ec:	1000191e 	bne	r2,zero,f254 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f1f0:	e0bffd17 	ldw	r2,-12(fp)
    f1f4:	10800317 	ldw	r2,12(r2)
    f1f8:	e0fffd17 	ldw	r3,-12(fp)
    f1fc:	18c00517 	ldw	r3,20(r3)
    f200:	1809883a 	mov	r4,r3
    f204:	103ee83a 	callr	r2
    f208:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f20c:	e0bfff17 	ldw	r2,-4(fp)
    f210:	1000031e 	bne	r2,zero,f220 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f214:	e13ffd17 	ldw	r4,-12(fp)
    f218:	000f0e40 	call	f0e4 <alt_alarm_stop>
    f21c:	00000d06 	br	f254 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f220:	e0bffd17 	ldw	r2,-12(fp)
    f224:	10c00217 	ldw	r3,8(r2)
    f228:	e0bfff17 	ldw	r2,-4(fp)
    f22c:	1887883a 	add	r3,r3,r2
    f230:	e0bffd17 	ldw	r2,-12(fp)
    f234:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f238:	e0bffd17 	ldw	r2,-12(fp)
    f23c:	10c00217 	ldw	r3,8(r2)
    f240:	d0a6df17 	ldw	r2,-25732(gp)
    f244:	1880032e 	bgeu	r3,r2,f254 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f248:	e0bffd17 	ldw	r2,-12(fp)
    f24c:	00c00044 	movi	r3,1
    f250:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f254:	e0bffe17 	ldw	r2,-8(fp)
    f258:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f25c:	e0fffd17 	ldw	r3,-12(fp)
    f260:	d0a01004 	addi	r2,gp,-32704
    f264:	18bfcf1e 	bne	r3,r2,f1a4 <__alt_mem_onchip_memory2_0+0xfbfef1a4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f268:	0001883a 	nop
}
    f26c:	e037883a 	mov	sp,fp
    f270:	dfc00117 	ldw	ra,4(sp)
    f274:	df000017 	ldw	fp,0(sp)
    f278:	dec00204 	addi	sp,sp,8
    f27c:	f800283a 	ret

0000f280 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f280:	deffff04 	addi	sp,sp,-4
    f284:	df000015 	stw	fp,0(sp)
    f288:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f28c:	000170fa 	wrctl	ienable,zero
}
    f290:	e037883a 	mov	sp,fp
    f294:	df000017 	ldw	fp,0(sp)
    f298:	dec00104 	addi	sp,sp,4
    f29c:	f800283a 	ret

0000f2a0 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
    f2a0:	defff904 	addi	sp,sp,-28
    f2a4:	df000615 	stw	fp,24(sp)
    f2a8:	df000604 	addi	fp,sp,24
    f2ac:	e13ffe15 	stw	r4,-8(fp)
    f2b0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
    f2b4:	e03ffa15 	stw	zero,-24(fp)
    f2b8:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
    f2bc:	000b883a 	mov	r5,zero
    f2c0:	e13ffe17 	ldw	r4,-8(fp)
    f2c4:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    f2c8:	e13fff17 	ldw	r4,-4(fp)
    f2cc:	2008913a 	slli	r4,r4,4
    f2d0:	200b883a 	mov	r5,r4
    f2d4:	e13ffe17 	ldw	r4,-8(fp)
    f2d8:	2149883a 	add	r4,r4,r5
    f2dc:	21000037 	ldwio	r4,0(r4)
    f2e0:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    f2e4:	e13fff17 	ldw	r4,-4(fp)
    f2e8:	2008913a 	slli	r4,r4,4
    f2ec:	21000104 	addi	r4,r4,4
    f2f0:	200b883a 	mov	r5,r4
    f2f4:	e13ffe17 	ldw	r4,-8(fp)
    f2f8:	2149883a 	add	r4,r4,r5
    f2fc:	21000037 	ldwio	r4,0(r4)
    f300:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    f304:	e13ffd17 	ldw	r4,-12(fp)
    f308:	2011883a 	mov	r8,r4
    f30c:	0013883a 	mov	r9,zero
    f310:	4006983a 	sll	r3,r8,zero
    f314:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
    f318:	e13ffc17 	ldw	r4,-16(fp)
    f31c:	200d883a 	mov	r6,r4
    f320:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    f324:	1188b03a 	or	r4,r2,r6
    f328:	e13ffa15 	stw	r4,-24(fp)
    f32c:	19c4b03a 	or	r2,r3,r7
    f330:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
    f334:	e0bffa17 	ldw	r2,-24(fp)
    f338:	e0fffb17 	ldw	r3,-20(fp)
    f33c:	1009883a 	mov	r4,r2
    f340:	180b883a 	mov	r5,r3
}
    f344:	2005883a 	mov	r2,r4
    f348:	2807883a 	mov	r3,r5
    f34c:	e037883a 	mov	sp,fp
    f350:	df000017 	ldw	fp,0(sp)
    f354:	dec00104 	addi	sp,sp,4
    f358:	f800283a 	ret

0000f35c <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
    f35c:	defffd04 	addi	sp,sp,-12
    f360:	dfc00215 	stw	ra,8(sp)
    f364:	df000115 	stw	fp,4(sp)
    f368:	df000104 	addi	fp,sp,4
    f36c:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
    f370:	e13fff17 	ldw	r4,-4(fp)
    f374:	000b883a 	mov	r5,zero
    f378:	000f2a00 	call	f2a0 <perf_get_section_time>
    f37c:	100b883a 	mov	r5,r2
    f380:	180d883a 	mov	r6,r3
    f384:	2807883a 	mov	r3,r5
    f388:	3009883a 	mov	r4,r6
}
    f38c:	1805883a 	mov	r2,r3
    f390:	2007883a 	mov	r3,r4
    f394:	e037883a 	mov	sp,fp
    f398:	dfc00117 	ldw	ra,4(sp)
    f39c:	df000017 	ldw	fp,0(sp)
    f3a0:	dec00204 	addi	sp,sp,8
    f3a4:	f800283a 	ret

0000f3a8 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
    f3a8:	defffd04 	addi	sp,sp,-12
    f3ac:	df000215 	stw	fp,8(sp)
    f3b0:	df000204 	addi	fp,sp,8
    f3b4:	e13ffe15 	stw	r4,-8(fp)
    f3b8:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
    f3bc:	e0bfff17 	ldw	r2,-4(fp)
    f3c0:	1004913a 	slli	r2,r2,4
    f3c4:	10800204 	addi	r2,r2,8
    f3c8:	1007883a 	mov	r3,r2
    f3cc:	e0bffe17 	ldw	r2,-8(fp)
    f3d0:	10c5883a 	add	r2,r2,r3
    f3d4:	10800037 	ldwio	r2,0(r2)
}
    f3d8:	e037883a 	mov	sp,fp
    f3dc:	df000017 	ldw	fp,0(sp)
    f3e0:	dec00104 	addi	sp,sp,4
    f3e4:	f800283a 	ret

0000f3e8 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
    f3e8:	deffff04 	addi	sp,sp,-4
    f3ec:	df000015 	stw	fp,0(sp)
    f3f0:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
    f3f4:	0005883a 	mov	r2,zero
#endif
}
    f3f8:	e037883a 	mov	sp,fp
    f3fc:	df000017 	ldw	fp,0(sp)
    f400:	dec00104 	addi	sp,sp,4
    f404:	f800283a 	ret

0000f408 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
    f408:	deffff04 	addi	sp,sp,-4
    f40c:	df000015 	stw	fp,0(sp)
    f410:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
    f414:	008221b4 	movhi	r2,2182
    f418:	10807004 	addi	r2,r2,448
}
    f41c:	e037883a 	mov	sp,fp
    f420:	df000017 	ldw	fp,0(sp)
    f424:	dec00104 	addi	sp,sp,4
    f428:	f800283a 	ret

0000f42c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f42c:	defffb04 	addi	sp,sp,-20
    f430:	dfc00415 	stw	ra,16(sp)
    f434:	df000315 	stw	fp,12(sp)
    f438:	df000304 	addi	fp,sp,12
    f43c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f440:	00800074 	movhi	r2,1
    f444:	10875304 	addi	r2,r2,7500
    f448:	10800017 	ldw	r2,0(r2)
    f44c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f450:	00003106 	br	f518 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    f454:	e0bffd17 	ldw	r2,-12(fp)
    f458:	10800217 	ldw	r2,8(r2)
    f45c:	1009883a 	mov	r4,r2
    f460:	00008e40 	call	8e4 <strlen>
    f464:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f468:	e0bffd17 	ldw	r2,-12(fp)
    f46c:	10c00217 	ldw	r3,8(r2)
    f470:	e0bffe17 	ldw	r2,-8(fp)
    f474:	10bfffc4 	addi	r2,r2,-1
    f478:	1885883a 	add	r2,r3,r2
    f47c:	10800003 	ldbu	r2,0(r2)
    f480:	10803fcc 	andi	r2,r2,255
    f484:	1080201c 	xori	r2,r2,128
    f488:	10bfe004 	addi	r2,r2,-128
    f48c:	10800bd8 	cmpnei	r2,r2,47
    f490:	1000031e 	bne	r2,zero,f4a0 <alt_find_file+0x74>
    {
      len -= 1;
    f494:	e0bffe17 	ldw	r2,-8(fp)
    f498:	10bfffc4 	addi	r2,r2,-1
    f49c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f4a0:	e0bffe17 	ldw	r2,-8(fp)
    f4a4:	e0ffff17 	ldw	r3,-4(fp)
    f4a8:	1885883a 	add	r2,r3,r2
    f4ac:	10800003 	ldbu	r2,0(r2)
    f4b0:	10803fcc 	andi	r2,r2,255
    f4b4:	1080201c 	xori	r2,r2,128
    f4b8:	10bfe004 	addi	r2,r2,-128
    f4bc:	10800be0 	cmpeqi	r2,r2,47
    f4c0:	1000081e 	bne	r2,zero,f4e4 <alt_find_file+0xb8>
    f4c4:	e0bffe17 	ldw	r2,-8(fp)
    f4c8:	e0ffff17 	ldw	r3,-4(fp)
    f4cc:	1885883a 	add	r2,r3,r2
    f4d0:	10800003 	ldbu	r2,0(r2)
    f4d4:	10803fcc 	andi	r2,r2,255
    f4d8:	1080201c 	xori	r2,r2,128
    f4dc:	10bfe004 	addi	r2,r2,-128
    f4e0:	10000a1e 	bne	r2,zero,f50c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    f4e4:	e0bffd17 	ldw	r2,-12(fp)
    f4e8:	10c00217 	ldw	r3,8(r2)
    f4ec:	e0bffe17 	ldw	r2,-8(fp)
    f4f0:	1809883a 	mov	r4,r3
    f4f4:	e17fff17 	ldw	r5,-4(fp)
    f4f8:	100d883a 	mov	r6,r2
    f4fc:	000f7680 	call	f768 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f500:	1000021e 	bne	r2,zero,f50c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f504:	e0bffd17 	ldw	r2,-12(fp)
    f508:	00000806 	br	f52c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    f50c:	e0bffd17 	ldw	r2,-12(fp)
    f510:	10800017 	ldw	r2,0(r2)
    f514:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f518:	e0fffd17 	ldw	r3,-12(fp)
    f51c:	00800074 	movhi	r2,1
    f520:	10875304 	addi	r2,r2,7500
    f524:	18bfcb1e 	bne	r3,r2,f454 <__alt_mem_onchip_memory2_0+0xfbfef454>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f528:	0005883a 	mov	r2,zero
}
    f52c:	e037883a 	mov	sp,fp
    f530:	dfc00117 	ldw	ra,4(sp)
    f534:	df000017 	ldw	fp,0(sp)
    f538:	dec00204 	addi	sp,sp,8
    f53c:	f800283a 	ret

0000f540 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f540:	defffc04 	addi	sp,sp,-16
    f544:	df000315 	stw	fp,12(sp)
    f548:	df000304 	addi	fp,sp,12
    f54c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f550:	00bffa04 	movi	r2,-24
    f554:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f558:	e03ffd15 	stw	zero,-12(fp)
    f55c:	00001d06 	br	f5d4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    f560:	00800074 	movhi	r2,1
    f564:	1082d104 	addi	r2,r2,2884
    f568:	e0fffd17 	ldw	r3,-12(fp)
    f56c:	18c00324 	muli	r3,r3,12
    f570:	10c5883a 	add	r2,r2,r3
    f574:	10800017 	ldw	r2,0(r2)
    f578:	1000131e 	bne	r2,zero,f5c8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    f57c:	00800074 	movhi	r2,1
    f580:	1082d104 	addi	r2,r2,2884
    f584:	e0fffd17 	ldw	r3,-12(fp)
    f588:	18c00324 	muli	r3,r3,12
    f58c:	10c5883a 	add	r2,r2,r3
    f590:	e0ffff17 	ldw	r3,-4(fp)
    f594:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f598:	00800074 	movhi	r2,1
    f59c:	10875704 	addi	r2,r2,7516
    f5a0:	10c00017 	ldw	r3,0(r2)
    f5a4:	e0bffd17 	ldw	r2,-12(fp)
    f5a8:	1880040e 	bge	r3,r2,f5bc <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    f5ac:	00800074 	movhi	r2,1
    f5b0:	10875704 	addi	r2,r2,7516
    f5b4:	e0fffd17 	ldw	r3,-12(fp)
    f5b8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    f5bc:	e0bffd17 	ldw	r2,-12(fp)
    f5c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f5c4:	00000606 	br	f5e0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f5c8:	e0bffd17 	ldw	r2,-12(fp)
    f5cc:	10800044 	addi	r2,r2,1
    f5d0:	e0bffd15 	stw	r2,-12(fp)
    f5d4:	e0bffd17 	ldw	r2,-12(fp)
    f5d8:	10800810 	cmplti	r2,r2,32
    f5dc:	103fe01e 	bne	r2,zero,f560 <__alt_mem_onchip_memory2_0+0xfbfef560>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f5e0:	e0bffe17 	ldw	r2,-8(fp)
}
    f5e4:	e037883a 	mov	sp,fp
    f5e8:	df000017 	ldw	fp,0(sp)
    f5ec:	dec00104 	addi	sp,sp,4
    f5f0:	f800283a 	ret

0000f5f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f5f4:	defffb04 	addi	sp,sp,-20
    f5f8:	df000415 	stw	fp,16(sp)
    f5fc:	df000404 	addi	fp,sp,16
    f600:	e13ffe15 	stw	r4,-8(fp)
    f604:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f608:	e0bfff17 	ldw	r2,-4(fp)
    f60c:	10880070 	cmpltui	r2,r2,8193
    f610:	1000021e 	bne	r2,zero,f61c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f614:	00880004 	movi	r2,8192
    f618:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f61c:	e0fffe17 	ldw	r3,-8(fp)
    f620:	e0bfff17 	ldw	r2,-4(fp)
    f624:	1885883a 	add	r2,r3,r2
    f628:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f62c:	e0bffe17 	ldw	r2,-8(fp)
    f630:	e0bffc15 	stw	r2,-16(fp)
    f634:	00000506 	br	f64c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f638:	e0bffc17 	ldw	r2,-16(fp)
    f63c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f640:	e0bffc17 	ldw	r2,-16(fp)
    f644:	10800804 	addi	r2,r2,32
    f648:	e0bffc15 	stw	r2,-16(fp)
    f64c:	e0fffc17 	ldw	r3,-16(fp)
    f650:	e0bffd17 	ldw	r2,-12(fp)
    f654:	18bff836 	bltu	r3,r2,f638 <__alt_mem_onchip_memory2_0+0xfbfef638>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f658:	e0bffe17 	ldw	r2,-8(fp)
    f65c:	108007cc 	andi	r2,r2,31
    f660:	10000226 	beq	r2,zero,f66c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f664:	e0bffc17 	ldw	r2,-16(fp)
    f668:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f66c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f670:	e037883a 	mov	sp,fp
    f674:	df000017 	ldw	fp,0(sp)
    f678:	dec00104 	addi	sp,sp,4
    f67c:	f800283a 	ret

0000f680 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f680:	defffe04 	addi	sp,sp,-8
    f684:	df000115 	stw	fp,4(sp)
    f688:	df000104 	addi	fp,sp,4
    f68c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f690:	e0bfff17 	ldw	r2,-4(fp)
    f694:	10bffe84 	addi	r2,r2,-6
    f698:	10c00428 	cmpgeui	r3,r2,16
    f69c:	18001a1e 	bne	r3,zero,f708 <alt_exception_cause_generated_bad_addr+0x88>
    f6a0:	100690ba 	slli	r3,r2,2
    f6a4:	00800074 	movhi	r2,1
    f6a8:	10bdae04 	addi	r2,r2,-2376
    f6ac:	1885883a 	add	r2,r3,r2
    f6b0:	10800017 	ldw	r2,0(r2)
    f6b4:	1000683a 	jmp	r2
    f6b8:	0000f6f8 	rdprs	zero,zero,987
    f6bc:	0000f6f8 	rdprs	zero,zero,987
    f6c0:	0000f708 	cmpgei	zero,zero,988
    f6c4:	0000f708 	cmpgei	zero,zero,988
    f6c8:	0000f708 	cmpgei	zero,zero,988
    f6cc:	0000f6f8 	rdprs	zero,zero,987
    f6d0:	0000f700 	call	f70 <___vfprintf_internal_r+0x5f4>
    f6d4:	0000f708 	cmpgei	zero,zero,988
    f6d8:	0000f6f8 	rdprs	zero,zero,987
    f6dc:	0000f6f8 	rdprs	zero,zero,987
    f6e0:	0000f708 	cmpgei	zero,zero,988
    f6e4:	0000f6f8 	rdprs	zero,zero,987
    f6e8:	0000f700 	call	f70 <___vfprintf_internal_r+0x5f4>
    f6ec:	0000f708 	cmpgei	zero,zero,988
    f6f0:	0000f708 	cmpgei	zero,zero,988
    f6f4:	0000f6f8 	rdprs	zero,zero,987
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f6f8:	00800044 	movi	r2,1
    f6fc:	00000306 	br	f70c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f700:	0005883a 	mov	r2,zero
    f704:	00000106 	br	f70c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f708:	0005883a 	mov	r2,zero
  }
}
    f70c:	e037883a 	mov	sp,fp
    f710:	df000017 	ldw	fp,0(sp)
    f714:	dec00104 	addi	sp,sp,4
    f718:	f800283a 	ret

0000f71c <atexit>:
    f71c:	200b883a 	mov	r5,r4
    f720:	000d883a 	mov	r6,zero
    f724:	0009883a 	mov	r4,zero
    f728:	000f883a 	mov	r7,zero
    f72c:	000f7e41 	jmpi	f7e4 <__register_exitproc>

0000f730 <exit>:
    f730:	defffe04 	addi	sp,sp,-8
    f734:	000b883a 	mov	r5,zero
    f738:	dc000015 	stw	r16,0(sp)
    f73c:	dfc00115 	stw	ra,4(sp)
    f740:	2021883a 	mov	r16,r4
    f744:	000f8f80 	call	f8f8 <__call_exitprocs>
    f748:	00800074 	movhi	r2,1
    f74c:	10874d04 	addi	r2,r2,7476
    f750:	11000017 	ldw	r4,0(r2)
    f754:	20800f17 	ldw	r2,60(r4)
    f758:	10000126 	beq	r2,zero,f760 <exit+0x30>
    f75c:	103ee83a 	callr	r2
    f760:	8009883a 	mov	r4,r16
    f764:	000fafc0 	call	fafc <_exit>

0000f768 <memcmp>:
    f768:	01c000c4 	movi	r7,3
    f76c:	3980192e 	bgeu	r7,r6,f7d4 <memcmp+0x6c>
    f770:	2144b03a 	or	r2,r4,r5
    f774:	11c4703a 	and	r2,r2,r7
    f778:	10000f26 	beq	r2,zero,f7b8 <memcmp+0x50>
    f77c:	20800003 	ldbu	r2,0(r4)
    f780:	28c00003 	ldbu	r3,0(r5)
    f784:	10c0151e 	bne	r2,r3,f7dc <memcmp+0x74>
    f788:	31bfff84 	addi	r6,r6,-2
    f78c:	01ffffc4 	movi	r7,-1
    f790:	00000406 	br	f7a4 <memcmp+0x3c>
    f794:	20800003 	ldbu	r2,0(r4)
    f798:	28c00003 	ldbu	r3,0(r5)
    f79c:	31bfffc4 	addi	r6,r6,-1
    f7a0:	10c00e1e 	bne	r2,r3,f7dc <memcmp+0x74>
    f7a4:	21000044 	addi	r4,r4,1
    f7a8:	29400044 	addi	r5,r5,1
    f7ac:	31fff91e 	bne	r6,r7,f794 <__alt_mem_onchip_memory2_0+0xfbfef794>
    f7b0:	0005883a 	mov	r2,zero
    f7b4:	f800283a 	ret
    f7b8:	20c00017 	ldw	r3,0(r4)
    f7bc:	28800017 	ldw	r2,0(r5)
    f7c0:	1880041e 	bne	r3,r2,f7d4 <memcmp+0x6c>
    f7c4:	31bfff04 	addi	r6,r6,-4
    f7c8:	21000104 	addi	r4,r4,4
    f7cc:	29400104 	addi	r5,r5,4
    f7d0:	39bff936 	bltu	r7,r6,f7b8 <__alt_mem_onchip_memory2_0+0xfbfef7b8>
    f7d4:	303fe91e 	bne	r6,zero,f77c <__alt_mem_onchip_memory2_0+0xfbfef77c>
    f7d8:	003ff506 	br	f7b0 <__alt_mem_onchip_memory2_0+0xfbfef7b0>
    f7dc:	10c5c83a 	sub	r2,r2,r3
    f7e0:	f800283a 	ret

0000f7e4 <__register_exitproc>:
    f7e4:	00800074 	movhi	r2,1
    f7e8:	defffa04 	addi	sp,sp,-24
    f7ec:	10874d04 	addi	r2,r2,7476
    f7f0:	dc000315 	stw	r16,12(sp)
    f7f4:	14000017 	ldw	r16,0(r2)
    f7f8:	dc400415 	stw	r17,16(sp)
    f7fc:	dfc00515 	stw	ra,20(sp)
    f800:	80805217 	ldw	r2,328(r16)
    f804:	2023883a 	mov	r17,r4
    f808:	10003626 	beq	r2,zero,f8e4 <__register_exitproc+0x100>
    f80c:	10c00117 	ldw	r3,4(r2)
    f810:	010007c4 	movi	r4,31
    f814:	20c00e16 	blt	r4,r3,f850 <__register_exitproc+0x6c>
    f818:	1a400044 	addi	r9,r3,1
    f81c:	8800211e 	bne	r17,zero,f8a4 <__register_exitproc+0xc0>
    f820:	18c00084 	addi	r3,r3,2
    f824:	18c7883a 	add	r3,r3,r3
    f828:	18c7883a 	add	r3,r3,r3
    f82c:	12400115 	stw	r9,4(r2)
    f830:	10c7883a 	add	r3,r2,r3
    f834:	19400015 	stw	r5,0(r3)
    f838:	0005883a 	mov	r2,zero
    f83c:	dfc00517 	ldw	ra,20(sp)
    f840:	dc400417 	ldw	r17,16(sp)
    f844:	dc000317 	ldw	r16,12(sp)
    f848:	dec00604 	addi	sp,sp,24
    f84c:	f800283a 	ret
    f850:	00800034 	movhi	r2,0
    f854:	10800004 	addi	r2,r2,0
    f858:	10002526 	beq	r2,zero,f8f0 <__register_exitproc+0x10c>
    f85c:	01006404 	movi	r4,400
    f860:	d9400015 	stw	r5,0(sp)
    f864:	d9800115 	stw	r6,4(sp)
    f868:	d9c00215 	stw	r7,8(sp)
    f86c:	00000000 	call	0 <__alt_mem_sdram_controller>
    f870:	d9400017 	ldw	r5,0(sp)
    f874:	d9800117 	ldw	r6,4(sp)
    f878:	d9c00217 	ldw	r7,8(sp)
    f87c:	10001c26 	beq	r2,zero,f8f0 <__register_exitproc+0x10c>
    f880:	80c05217 	ldw	r3,328(r16)
    f884:	10000115 	stw	zero,4(r2)
    f888:	02400044 	movi	r9,1
    f88c:	10c00015 	stw	r3,0(r2)
    f890:	80805215 	stw	r2,328(r16)
    f894:	10006215 	stw	zero,392(r2)
    f898:	10006315 	stw	zero,396(r2)
    f89c:	0007883a 	mov	r3,zero
    f8a0:	883fdf26 	beq	r17,zero,f820 <__alt_mem_onchip_memory2_0+0xfbfef820>
    f8a4:	18d1883a 	add	r8,r3,r3
    f8a8:	4211883a 	add	r8,r8,r8
    f8ac:	1211883a 	add	r8,r2,r8
    f8b0:	41802215 	stw	r6,136(r8)
    f8b4:	01000044 	movi	r4,1
    f8b8:	11806217 	ldw	r6,392(r2)
    f8bc:	20c8983a 	sll	r4,r4,r3
    f8c0:	310cb03a 	or	r6,r6,r4
    f8c4:	11806215 	stw	r6,392(r2)
    f8c8:	41c04215 	stw	r7,264(r8)
    f8cc:	01800084 	movi	r6,2
    f8d0:	89bfd31e 	bne	r17,r6,f820 <__alt_mem_onchip_memory2_0+0xfbfef820>
    f8d4:	11806317 	ldw	r6,396(r2)
    f8d8:	3108b03a 	or	r4,r6,r4
    f8dc:	11006315 	stw	r4,396(r2)
    f8e0:	003fcf06 	br	f820 <__alt_mem_onchip_memory2_0+0xfbfef820>
    f8e4:	80805304 	addi	r2,r16,332
    f8e8:	80805215 	stw	r2,328(r16)
    f8ec:	003fc706 	br	f80c <__alt_mem_onchip_memory2_0+0xfbfef80c>
    f8f0:	00bfffc4 	movi	r2,-1
    f8f4:	003fd106 	br	f83c <__alt_mem_onchip_memory2_0+0xfbfef83c>

0000f8f8 <__call_exitprocs>:
    f8f8:	00800074 	movhi	r2,1
    f8fc:	10874d04 	addi	r2,r2,7476
    f900:	10800017 	ldw	r2,0(r2)
    f904:	defff404 	addi	sp,sp,-48
    f908:	dd800815 	stw	r22,32(sp)
    f90c:	d8800015 	stw	r2,0(sp)
    f910:	10805204 	addi	r2,r2,328
    f914:	dd000615 	stw	r20,24(sp)
    f918:	dc800415 	stw	r18,16(sp)
    f91c:	dfc00b15 	stw	ra,44(sp)
    f920:	df000a15 	stw	fp,40(sp)
    f924:	ddc00915 	stw	r23,36(sp)
    f928:	dd400715 	stw	r21,28(sp)
    f92c:	dcc00515 	stw	r19,20(sp)
    f930:	dc400315 	stw	r17,12(sp)
    f934:	dc000215 	stw	r16,8(sp)
    f938:	2025883a 	mov	r18,r4
    f93c:	2829883a 	mov	r20,r5
    f940:	d8800115 	stw	r2,4(sp)
    f944:	05bfffc4 	movi	r22,-1
    f948:	d8800017 	ldw	r2,0(sp)
    f94c:	14c05217 	ldw	r19,328(r2)
    f950:	98001d26 	beq	r19,zero,f9c8 <__call_exitprocs+0xd0>
    f954:	dd400117 	ldw	r21,4(sp)
    f958:	98800117 	ldw	r2,4(r19)
    f95c:	173fffc4 	addi	fp,r2,-1
    f960:	e0000d16 	blt	fp,zero,f998 <__call_exitprocs+0xa0>
    f964:	14000044 	addi	r16,r2,1
    f968:	8421883a 	add	r16,r16,r16
    f96c:	8421883a 	add	r16,r16,r16
    f970:	84402004 	addi	r17,r16,128
    f974:	9c63883a 	add	r17,r19,r17
    f978:	9c21883a 	add	r16,r19,r16
    f97c:	a0001e26 	beq	r20,zero,f9f8 <__call_exitprocs+0x100>
    f980:	80804017 	ldw	r2,256(r16)
    f984:	15001c26 	beq	r2,r20,f9f8 <__call_exitprocs+0x100>
    f988:	e73fffc4 	addi	fp,fp,-1
    f98c:	843fff04 	addi	r16,r16,-4
    f990:	8c7fff04 	addi	r17,r17,-4
    f994:	e5bff91e 	bne	fp,r22,f97c <__alt_mem_onchip_memory2_0+0xfbfef97c>
    f998:	00800034 	movhi	r2,0
    f99c:	10800004 	addi	r2,r2,0
    f9a0:	10000926 	beq	r2,zero,f9c8 <__call_exitprocs+0xd0>
    f9a4:	98800117 	ldw	r2,4(r19)
    f9a8:	1000311e 	bne	r2,zero,fa70 <__call_exitprocs+0x178>
    f9ac:	98800017 	ldw	r2,0(r19)
    f9b0:	10003426 	beq	r2,zero,fa84 <__call_exitprocs+0x18c>
    f9b4:	9809883a 	mov	r4,r19
    f9b8:	a8800015 	stw	r2,0(r21)
    f9bc:	00000000 	call	0 <__alt_mem_sdram_controller>
    f9c0:	acc00017 	ldw	r19,0(r21)
    f9c4:	983fe41e 	bne	r19,zero,f958 <__alt_mem_onchip_memory2_0+0xfbfef958>
    f9c8:	dfc00b17 	ldw	ra,44(sp)
    f9cc:	df000a17 	ldw	fp,40(sp)
    f9d0:	ddc00917 	ldw	r23,36(sp)
    f9d4:	dd800817 	ldw	r22,32(sp)
    f9d8:	dd400717 	ldw	r21,28(sp)
    f9dc:	dd000617 	ldw	r20,24(sp)
    f9e0:	dcc00517 	ldw	r19,20(sp)
    f9e4:	dc800417 	ldw	r18,16(sp)
    f9e8:	dc400317 	ldw	r17,12(sp)
    f9ec:	dc000217 	ldw	r16,8(sp)
    f9f0:	dec00c04 	addi	sp,sp,48
    f9f4:	f800283a 	ret
    f9f8:	98800117 	ldw	r2,4(r19)
    f9fc:	80c00017 	ldw	r3,0(r16)
    fa00:	10bfffc4 	addi	r2,r2,-1
    fa04:	17001526 	beq	r2,fp,fa5c <__call_exitprocs+0x164>
    fa08:	80000015 	stw	zero,0(r16)
    fa0c:	183fde26 	beq	r3,zero,f988 <__alt_mem_onchip_memory2_0+0xfbfef988>
    fa10:	00800044 	movi	r2,1
    fa14:	1708983a 	sll	r4,r2,fp
    fa18:	98806217 	ldw	r2,392(r19)
    fa1c:	9dc00117 	ldw	r23,4(r19)
    fa20:	2084703a 	and	r2,r4,r2
    fa24:	1000061e 	bne	r2,zero,fa40 <__call_exitprocs+0x148>
    fa28:	183ee83a 	callr	r3
    fa2c:	98800117 	ldw	r2,4(r19)
    fa30:	15ffc51e 	bne	r2,r23,f948 <__alt_mem_onchip_memory2_0+0xfbfef948>
    fa34:	a8800017 	ldw	r2,0(r21)
    fa38:	14ffd326 	beq	r2,r19,f988 <__alt_mem_onchip_memory2_0+0xfbfef988>
    fa3c:	003fc206 	br	f948 <__alt_mem_onchip_memory2_0+0xfbfef948>
    fa40:	98806317 	ldw	r2,396(r19)
    fa44:	2084703a 	and	r2,r4,r2
    fa48:	1000061e 	bne	r2,zero,fa64 <__call_exitprocs+0x16c>
    fa4c:	89400017 	ldw	r5,0(r17)
    fa50:	9009883a 	mov	r4,r18
    fa54:	183ee83a 	callr	r3
    fa58:	003ff406 	br	fa2c <__alt_mem_onchip_memory2_0+0xfbfefa2c>
    fa5c:	9f000115 	stw	fp,4(r19)
    fa60:	003fea06 	br	fa0c <__alt_mem_onchip_memory2_0+0xfbfefa0c>
    fa64:	89000017 	ldw	r4,0(r17)
    fa68:	183ee83a 	callr	r3
    fa6c:	003fef06 	br	fa2c <__alt_mem_onchip_memory2_0+0xfbfefa2c>
    fa70:	98800017 	ldw	r2,0(r19)
    fa74:	982b883a 	mov	r21,r19
    fa78:	1027883a 	mov	r19,r2
    fa7c:	983fb61e 	bne	r19,zero,f958 <__alt_mem_onchip_memory2_0+0xfbfef958>
    fa80:	003fd106 	br	f9c8 <__alt_mem_onchip_memory2_0+0xfbfef9c8>
    fa84:	0005883a 	mov	r2,zero
    fa88:	003ffa06 	br	fa74 <__alt_mem_onchip_memory2_0+0xfbfefa74>

0000fa8c <__floatundidf>:
    fa8c:	defffc04 	addi	sp,sp,-16
    fa90:	dc800215 	stw	r18,8(sp)
    fa94:	2025883a 	mov	r18,r4
    fa98:	2809883a 	mov	r4,r5
    fa9c:	dfc00315 	stw	ra,12(sp)
    faa0:	dc400115 	stw	r17,4(sp)
    faa4:	dc000015 	stw	r16,0(sp)
    faa8:	000c9880 	call	c988 <__floatunsidf>
    faac:	180b883a 	mov	r5,r3
    fab0:	000d883a 	mov	r6,zero
    fab4:	01d07c34 	movhi	r7,16880
    fab8:	1009883a 	mov	r4,r2
    fabc:	000b83c0 	call	b83c <__muldf3>
    fac0:	9009883a 	mov	r4,r18
    fac4:	1023883a 	mov	r17,r2
    fac8:	1821883a 	mov	r16,r3
    facc:	000c9880 	call	c988 <__floatunsidf>
    fad0:	1009883a 	mov	r4,r2
    fad4:	180b883a 	mov	r5,r3
    fad8:	880d883a 	mov	r6,r17
    fadc:	800f883a 	mov	r7,r16
    fae0:	000a4900 	call	a490 <__adddf3>
    fae4:	dfc00317 	ldw	ra,12(sp)
    fae8:	dc800217 	ldw	r18,8(sp)
    faec:	dc400117 	ldw	r17,4(sp)
    faf0:	dc000017 	ldw	r16,0(sp)
    faf4:	dec00404 	addi	sp,sp,16
    faf8:	f800283a 	ret

0000fafc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fafc:	defffd04 	addi	sp,sp,-12
    fb00:	df000215 	stw	fp,8(sp)
    fb04:	df000204 	addi	fp,sp,8
    fb08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fb0c:	0001883a 	nop
    fb10:	e0bfff17 	ldw	r2,-4(fp)
    fb14:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fb18:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fb1c:	10000226 	beq	r2,zero,fb28 <_exit+0x2c>
    ALT_SIM_FAIL();
    fb20:	002af070 	cmpltui	zero,zero,43969
    fb24:	00000106 	br	fb2c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fb28:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fb2c:	003fff06 	br	fb2c <__alt_mem_onchip_memory2_0+0xfbfefb2c>
